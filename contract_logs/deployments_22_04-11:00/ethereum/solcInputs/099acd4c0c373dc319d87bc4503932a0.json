{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/AdvisiorsVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AdvisiorsVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"Vesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the AdvisiorsVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount > 0) {\n                // When the beneficiary already has claimed tokens, the new amount should be set as already claimed amount\n                if (beneficiary.claimed > _amounts[i]) {\n                    beneficiary.amount = beneficiary.claimed;\n                } else {\n                    // Otherwise, set the new amount\n                    beneficiary.amount = _amounts[i];\n                }\n            } else {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingBeneficiary[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingBeneficiary[] memory beneficiaries = new VestingBeneficiary[](\n            length\n        );\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            beneficiaries[i] = vestingBeneficiaries[beneficiary];\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/FoundationVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FoundationVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"Vesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the FoundationVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount == 0) {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingBeneficiary[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingBeneficiary[] memory beneficiaries = new VestingBeneficiary[](\n            length\n        );\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            beneficiaries[i] = vestingBeneficiaries[beneficiary];\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/MarketingVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MarketingVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"MPROVesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the MPROVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount > 0) {\n                // When the beneficiary already has claimed tokens, the new amount should be set as already claimed amount\n                if (beneficiary.claimed > _amounts[i]) {\n                    beneficiary.amount = beneficiary.claimed;\n                } else {\n                    // Otherwise, set the new amount\n                    beneficiary.amount = _amounts[i];\n                }\n            } else {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingBeneficiary[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingBeneficiary[] memory beneficiaries = new VestingBeneficiary[](\n            length\n        );\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            beneficiaries[i] = vestingBeneficiaries[beneficiary];\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/MPROVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MPROVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"MPROVesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the MPROVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount == 0) {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingBeneficiary[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingBeneficiary[] memory beneficiaries = new VestingBeneficiary[](\n            length\n        );\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            beneficiaries[i] = vestingBeneficiaries[beneficiary];\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/PrivateRoundVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PrivateRoundVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"Vesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the PrivateRoundVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount == 0) {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingBeneficiary[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingBeneficiary[] memory beneficiaries = new VestingBeneficiary[](\n            length\n        );\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            beneficiaries[i] = vestingBeneficiaries[beneficiary];\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/VestingSeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract VestingSeed is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"Vesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the VestingSeed contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount == 0) {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingBeneficiary[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingBeneficiary[] memory beneficiaries = new VestingBeneficiary[](\n            length\n        );\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            beneficiaries[i] = vestingBeneficiaries[beneficiary];\n        }\n\n        return beneficiaries;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}