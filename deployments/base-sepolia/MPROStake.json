{
  "address": "0x4D7dA192f57B7190d7cd0a5f9b6E1DE5F44D23E9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stake",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "MoveToStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "StakeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "UpdateReward",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accRewardTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accRewardTokenQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPeriodDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewardStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyRewardWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableForRelease",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getEarnedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplierForTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakeStartTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardTokenQuantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStakedSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct MPROStake.StakeConfig",
          "name": "stakeConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getWalletStakeUpdates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_blockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_updatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MPROStake.StakeUpdate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStakeWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUpdaterWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakerAddress",
          "type": "address"
        }
      ],
      "name": "moveToStake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextReleaseAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextReleaseTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardUnlockPercentPerPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimRewardStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_claimPeriodDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardUnlockPercentPerPeriod",
          "type": "uint256"
        }
      ],
      "name": "setClaimRewardConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeEndTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setStakeConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakeAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "setStakeWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "setUpdaterWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeEndTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "staker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceWithRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "walletStakeUpdates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_blockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_updatedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8aea2ebd9fa52facebd1569f6ba8459ef68b180a8073f022c63df18f0a41dea",
  "receipt": {
    "to": null,
    "from": "0xC856f7BcB20eE58F5788620b1261082829163dc4",
    "contractAddress": "0x4D7dA192f57B7190d7cd0a5f9b6E1DE5F44D23E9",
    "transactionIndex": 17,
    "gasUsed": "2149849",
    "logsBloom": "0x
    "blockHash": "0x27de8855cc0dea97f1591fda1c6c08a604b183f7205455e337565fd7998782e1",
    "transactionHash": "0xb8aea2ebd9fa52facebd1569f6ba8459ef68b180a8073f022c63df18f0a41dea",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 11505770,
        "transactionHash": "0xb8aea2ebd9fa52facebd1569f6ba8459ef68b180a8073f022c63df18f0a41dea",
        "address": "0x4D7dA192f57B7190d7cd0a5f9b6E1DE5F44D23E9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c856f7bcb20ee58f5788620b1261082829163dc4"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x27de8855cc0dea97f1591fda1c6c08a604b183f7205455e337565fd7998782e1"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 11505770,
        "transactionHash": "0xb8aea2ebd9fa52facebd1569f6ba8459ef68b180a8073f022c63df18f0a41dea",
        "address": "0x4D7dA192f57B7190d7cd0a5f9b6E1DE5F44D23E9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000c856f7bcb20ee58f5788620b1261082829163dc4",
          "0x000000000000000000000000c856f7bcb20ee58f5788620b1261082829163dc4"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x27de8855cc0dea97f1591fda1c6c08a604b183f7205455e337565fd7998782e1"
      }
    ],
    "blockNumber": 11505770,
    "cumulativeGasUsed": "4991364",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbf31DE649bA7AC79e92FEe4171B16c84B7c352A0",
    "0xC856f7BcB20eE58F5788620b1261082829163dc4"
  ],
  "numDeployments": 1,
  "solcInputHash": "32162930a0fe131d64f5728637120c3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MoveToStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"StakeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"UpdateReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardTokenQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewardStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRewardWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableForRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getEarnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplierForTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct MPROStake.StakeConfig\",\"name\":\"stakeConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getWalletStakeUpdates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MPROStake.StakeUpdate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStakeWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUpdaterWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"}],\"name\":\"moveToStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReleaseAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReleaseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardUnlockPercentPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimRewardStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardUnlockPercentPerPeriod\",\"type\":\"uint256\"}],\"name\":\"setClaimRewardConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"setStakeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setStakeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setUpdaterWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceWithRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"walletStakeUpdates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the MPROAutoStake contract. This function initializes the MPROAutoStake contract with the specified reward token address and the new owner address. It sets the reward token and transfers the ownership to the new owner.\",\"params\":{\"_newOwner\":\"The address of the new owner.\",\"_rewardTokenAddress\":\"The address of the reward token.\"}},\"emergencyRewardWithdrawal()\":{\"details\":\"Withdraws emergency reward tokens from the contract.\"},\"enableForRelease()\":{\"details\":\"Computes the amount of tokens available for release. This function calculates and returns the amount of tokens available for release for the sender. It checks if the current timestamp is greater than or equal to the claim reward start timestamp. If claim configuration is set to retrieve data about cycles, it calculates the current cycle, the percent to claim, and the claimable tokens based on the staker's balance to claim and claimed balance. If claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.\",\"returns\":{\"_0\":\"uint256 The amount of tokens available for release.\"}},\"getEarnedAmount(address)\":{\"details\":\"Retrieves the earned reward amount for a specific staker. This function returns the earned reward amount for a specific staker based on their account address.\",\"params\":{\"_account\":\"The address of the staker.\"},\"returns\":{\"_0\":\"uint256 The earned reward amount.\"}},\"getMultiplierForTimestamps(uint256,uint256)\":{\"details\":\"Retrieves the multiplier for timestamps. This function calculates and returns the multiplier for timestamps based on the start and end timestamps of the stake period. If the end timestamp is less than or equal to the specified timestamp, the function returns the difference between the two timestamps. If the start timestamp is greater than or equal to the specified timestamp, the function returns zero. Otherwise, it returns the difference between the end timestamp and the specified timestamp.\",\"params\":{\"_from\":\"The start timestamp.\",\"_to\":\"The end timestamp.\"},\"returns\":{\"_0\":\"uint256 The multiplier for timestamps.\"}},\"getStakedAmount(address)\":{\"details\":\"Retrieves the staked amount for a specific staker. This function returns the staked amount for a specific staker based on their account address.\",\"params\":{\"_account\":\"The address of the staker.\"},\"returns\":{\"_0\":\"uint256 The staked amount.\"}},\"getWalletStakeUpdates(address)\":{\"details\":\"Retrieves the claimed balance for a specific staker. This function returns the claimed balance for a specific staker based on their account address.\",\"params\":{\"_account\":\"The address of the staker.\"},\"returns\":{\"_0\":\"uint256 The claimed balance.\"}},\"moveToStake(address)\":{\"details\":\"Moves tokens to another stake contract. This function allows the sender to move tokens to another stake contract. It verifies that the contract is not paused, and the claim reward period has started. It calculates the amount of tokens available for release using the `enableForRelease` function and ensures that it is greater than zero. The tokens available for release are then added to the staker's claimed balance, and the stake contract specified by `_stakeAddress` is called to transfer the tokens.\",\"params\":{\"_stakerAddress\":\"The address of the staker.\"}},\"nextReleaseAllocation()\":{\"details\":\"Retrieves the next release allocation. This function calculates and returns the next release allocation based on the current timestamp and the claim reward start timestamp. If the current timestamp is greater than or equal to the claim reward start timestamp, it retrieves the staker's information and calculates the percent to claim based on the current cycle. It then calculates the claimable tokens based on the staker's balance with rewards and claimed balance. If the claimable tokens are greater than the balance with rewards, it sets the claimable tokens to the balance with rewards. If the claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.\",\"returns\":{\"_0\":\"uint256 The next release allocation.\"}},\"nextReleaseTimestamp()\":{\"details\":\"Retrieves the next release timestamp. This function calculates and returns the next release timestamp based on the current timestamp and the claim reward start timestamp. If the current timestamp is less than the claim reward start timestamp, it returns the claim reward start timestamp. Otherwise, it calculates the reward cycle and returns the next release timestamp.\",\"returns\":{\"_0\":\"uint256 The next release timestamp.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingReward(address)\":{\"details\":\"Retrieves the pending reward for a specific staker. This function calculates and returns the pending reward for a specific staker based on their balance to claim, the reward per token from the last updated timestamp, and the current balance. If the staker's last updated timestamp is zero, indicating no previous updates, the function returns zero. Otherwise, it computes the pending reward per token and returns the result.\",\"params\":{\"_account\":\"The address of the staker.\"},\"returns\":{\"_0\":\"uint256 The pending reward amount.\"}},\"removeDust(uint256)\":{\"details\":\"Removes dust tokens from the contract. This function allows the contract owner to transfer all remaining tokens (dust) from the contract to the owner's address.\",\"params\":{\"_amount\":\"The amount to remove from the contract.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setClaimRewardConfig(uint256,uint256,uint256)\":{\"details\":\"Sets the claim reward configuration parameters. This function allows the contract owner to set the claim reward configuration parameters including the start timestamp for claiming rewards, the duration of each claim period, and the percent of rewards to unlock per period.\",\"params\":{\"_claimPeriodDuration\":\"The duration of each claim period is seconds.\",\"_claimRewardStartTimestamp\":\"The start timestamp for claiming rewards.\",\"_rewardUnlockPercentPerPeriod\":\"The percent of rewards to unlock per period. 10000 = 100%, 9000 = 90%, etc.\"}},\"setStakeConfig(uint256,uint256)\":{\"details\":\"Sets the stake configuration parameters. This function allows the contract owner to set the stake configuration parameters including the start and end timestamps for staking and declaration periods.\",\"params\":{\"_stakeEndTimestamp\":\"The end timestamp for the stake period.\",\"_stakeStartTimestamp\":\"The start timestamp for the stake period.\"}},\"stakeDuration()\":{\"details\":\"Returns the duration of the stake period. This function computes and returns the duration of the stake period by subtracting the start timestamp from the end timestamp.\",\"returns\":{\"_0\":\"uint256 The duration of the stake period.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake()\":{\"details\":\"Claims tokens for the sender. This function allows the sender to claim tokens. It verifies that the contract is not paused and there are tokens available for claim. It updates the staker's balance to claim if there are pending rewards. It then ensures that the remaining balance to claim is sufficient for the tokens to be claimed. If the conditions are met, the tokens are transferred to the sender.\"},\"updatePool()\":{\"details\":\"Updates the pool. This function updates the pool by calculating the multiplier for timestamps and the reward token reward. It then updates the accumulated reward per share based on the reward token reward and the total staked supply. If the current timestamp is less than or equal to the last reward timestamp, the function returns without updating the pool. If the total staked supply is zero, the function returns without updating the pool. Otherwise, it calculates the multiplier for timestamps and the reward token reward, updates the accumulated reward per share, and sets the last reward timestamp to the current timestamp.\"},\"updateReward(uint256)\":{\"details\":\"Updates the reward tokens within the contract. This function is used by the contract owner to update the reward tokens within the contract. It verifies the validity of the stake period, transfers the specified amount of reward tokens to the contract address, increases the reward token quantity by the transferred amount, and updates the reward rate based on the new reward token quantity and stake duration.\",\"params\":{\"_amount\":\"The amount of reward tokens to be added.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MPROStake.sol\":\"MPROStake\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xf6535971ddad602e5c39c959d75cfcdccc26e103edc07ab1fc9104d2ebe69ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/MPROStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// TODO remove console\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MPROStake is Ownable, Pausable {\\n    using SafeMath for uint256;\\n\\n    // Unlock percent divider\\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\\n\\n    // Reward token\\n    IERC20 public immutable rewardToken;\\n\\n    // Start of staking period\\n    uint256 public stakeStartTimestamp;\\n    // End of staking period\\n    uint256 public stakeEndTimestamp;\\n    // Reward to be paid out per second\\n    uint256 public rewardPerSecond;\\n    // Quantity of reward token to be paid out\\n    uint256 public rewardTokenQuantity;\\n    // Total staked\\n    uint256 public totalStakedSupply;\\n\\n    // Last reward timestamp\\n    uint256 public lastRewardTimestamp;\\n    // Accumulated reward per share\\n    uint256 public accRewardTokenPerShare;\\n    // Accumulated reward token quantity\\n    uint256 public accRewardTokenQuantity;\\n    //  Last update reward timestamp (function updateReward)\\n    uint256 public lastUpdateRewardTimestamp;\\n    // For updating rewards in the future we need to know how much reward was distributed\\n    uint256 private distributedReward;\\n\\n    struct Staker {\\n        // pure staked tokens\\n        uint256 staked;\\n        // staked tokens with compounds\\n        uint256 balanceWithRewards;\\n        uint256 claimedBalance;\\n        uint256 reward;\\n        uint256 rewardDebt;\\n    }\\n\\n    struct StakeConfig {\\n        uint256 stakeStartTimestamp;\\n        uint256 stakeEndTimestamp;\\n        uint256 rewardPerSecond;\\n        uint256 rewardTokenQuantity;\\n        uint256 totalStakedSupply;\\n    }\\n    // Stakers\\n    mapping(address => Staker) public staker;\\n\\n    struct StakeUpdate {\\n        uint256 _blockTimestamp;\\n        uint256 _updatedAmount;\\n    }\\n\\n    mapping(address => StakeUpdate[]) public walletStakeUpdates;\\n\\n    // CLAIM REWARD CONFIG\\n    // Start timestamp for claiming rewards\\n    uint256 public claimRewardStartTimestamp;\\n    // Reward unlock percent per period (10000 = 100%, 9000 = 90%, etc.)\\n    uint256 public rewardUnlockPercentPerPeriod = 10000;\\n    // Duration of each claim period in seconds\\n    uint256 public claimPeriodDuration;\\n\\n    mapping(address => bool) public isStakeWhitelisted;\\n\\n    mapping(address => bool) public isUpdaterWhitelisted;\\n\\n    modifier onlyWhitelistedStakes() {\\n        require(\\n            isStakeWhitelisted[_msgSender()],\\n            \\\"MPROStake: Stake contract is not whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWhitelistedUpdaters() {\\n        require(\\n            isUpdaterWhitelisted[_msgSender()] || _msgSender() == owner(),\\n            \\\"MPROStake: Address is not whitelisted updater\\\"\\n        );\\n        _;\\n    }\\n\\n    event StakeReward(address _staker, uint256 _rewardAmount);\\n    event Stake(address _staker, uint256 _stakeAmount);\\n    event MoveToStake(address _staker, address _stake, uint256 _amount);\\n    event Unstake(address _staker, uint256 _amount);\\n    event ClaimReward(address _staker, uint256 _amount);\\n    event UpdateReward(uint256 _amount, uint256 _rewardPerSecond);\\n\\n    /**\\n     * @dev Initializes the MPROAutoStake contract.\\n     *\\n     * This function initializes the MPROAutoStake contract with the specified reward token address and the new owner address. It sets the reward token and transfers the ownership to the new owner.\\n     *\\n     * @param _rewardTokenAddress The address of the reward token.\\n     * @param _newOwner The address of the new owner.\\n     */\\n    constructor(address _rewardTokenAddress, address _newOwner) {\\n        rewardToken = ERC20(_rewardTokenAddress);\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    function stake(uint256 _amount) public {\\n        // Update pool before updating stakers\\n        updatePool();\\n        Staker storage _staker = staker[_msgSender()];\\n\\n        // stake reward\\n        uint256 reward = stakeReward(_msgSender());\\n        // Update staked amount\\n        uint256 stakeAmount = stakeLocal(_msgSender(), _amount);\\n\\n        _staker.rewardDebt = getAmountByWallet(_msgSender())\\n            .mul(accRewardTokenPerShare)\\n            .div(1e18);\\n\\n        walletStakeUpdates[_msgSender()].push(\\n            StakeUpdate({\\n                _blockTimestamp: block.timestamp,\\n                _updatedAmount: stakeAmount + reward\\n            })\\n        );\\n        // Send required tokens to the contract address\\n        rewardToken.transferFrom(_msgSender(), address(this), stakeAmount);\\n        // Update total staked supply increased by pending rewards\\n        rewardTokenQuantity -= reward;\\n        totalStakedSupply += stakeAmount + reward;\\n\\n        emit Stake(_msgSender(), stakeAmount + reward);\\n    }\\n\\n    function stakeReward(address _wallet) private returns (uint256) {\\n        Staker storage _staker = staker[_wallet];\\n        uint256 pending = getAmountByWallet(_wallet)\\n            .mul(accRewardTokenPerShare)\\n            .div(1e18)\\n            .sub(_staker.rewardDebt);\\n\\n        if (pending > 0) {\\n            _staker.reward += pending;\\n            _staker.balanceWithRewards += pending;\\n        }\\n        _staker.rewardDebt = getAmountByWallet(_wallet)\\n            .mul(accRewardTokenPerShare)\\n            .div(1e18);\\n\\n        emit StakeReward(_wallet, pending);\\n        return pending;\\n    }\\n\\n    /**\\n     * @dev Stakes tokens for a specific staker.\\n     *\\n     * This function allows the contract owner to stake tokens for a specific staker. It verifies the validity of the stake period, ensures that the staker's balance is greater than zero, and calculates the amount to stake based on the staker's address and the specified amount. If the staker's balance is zero, the function returns zero. Otherwise, it calculates the amount to stake, updates the staker's information, and returns the staked amount.\\n     *\\n     * @param _wallet The address of the staker.\\n     * @param _amount The amount of tokens to stake.\\n     * @return uint256 The staked amount.\\n     */\\n    function stakeLocal(\\n        address _wallet,\\n        uint256 _amount\\n    ) private returns (uint256) {\\n        Staker storage _staker = staker[_wallet];\\n        _staker.staked += _amount;\\n        _staker.balanceWithRewards += _amount;\\n\\n        _staker.rewardDebt = getAmountByWallet(_wallet)\\n            .mul(accRewardTokenPerShare)\\n            .div(1e18);\\n\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev Retrieves the pending reward for a specific staker.\\n     *\\n     * This function calculates and returns the pending reward for a specific staker based on their balance to claim, the reward per token from the last updated timestamp, and the current balance. If the staker's last updated timestamp is zero, indicating no previous updates, the function returns zero. Otherwise, it computes the pending reward per token and returns the result.\\n     *\\n     * @param _account The address of the staker.\\n     * @return uint256 The pending reward amount.\\n     */\\n    function pendingReward(address _account) public view returns (uint256) {\\n        Staker memory _staker = staker[_account];\\n        uint256 _accRewardPerShare = accRewardTokenPerShare;\\n        if (block.timestamp > lastRewardTimestamp && totalStakedSupply != 0) {\\n            uint256 multiplier = getMultiplierForTimestamps(\\n                lastRewardTimestamp,\\n                block.timestamp\\n            );\\n\\n            uint256 rewardTokenReward = multiplier.mul(rewardPerSecond);\\n            _accRewardPerShare = accRewardTokenPerShare.add(\\n                rewardTokenReward.mul(1e18).div(totalStakedSupply)\\n            );\\n        }\\n\\n        return\\n            getAmountByWallet(_account).mul(_accRewardPerShare).div(1e18).sub(\\n                _staker.rewardDebt\\n            );\\n    }\\n\\n    /**\\n     * @dev Updates the pool.\\n     *\\n     * This function updates the pool by calculating the multiplier for timestamps and the reward token reward. It then updates the accumulated reward per share based on the reward token reward and the total staked supply. If the current timestamp is less than or equal to the last reward timestamp, the function returns without updating the pool. If the total staked supply is zero, the function returns without updating the pool. Otherwise, it calculates the multiplier for timestamps and the reward token reward, updates the accumulated reward per share, and sets the last reward timestamp to the current timestamp.\\n     */\\n    function updatePool() public {\\n        if (block.timestamp <= lastRewardTimestamp) {\\n            return;\\n        }\\n        if (totalStakedSupply == 0) {\\n            lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplierForTimestamps(\\n            lastRewardTimestamp,\\n            block.timestamp\\n        );\\n        uint256 rewardTokenReward = multiplier.mul(rewardPerSecond);\\n        accRewardTokenPerShare = accRewardTokenPerShare.add(\\n            rewardTokenReward.mul(1e18).div(totalStakedSupply)\\n        );\\n\\n        lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Retrieves the multiplier for timestamps.\\n     *\\n     * This function calculates and returns the multiplier for timestamps based on the start and end timestamps of the stake period. If the end timestamp is less than or equal to the specified timestamp, the function returns the difference between the two timestamps. If the start timestamp is greater than or equal to the specified timestamp, the function returns zero. Otherwise, it returns the difference between the end timestamp and the specified timestamp.\\n     *\\n     * @param _from The start timestamp.\\n     * @param _to The end timestamp.\\n     * @return uint256 The multiplier for timestamps.\\n     */\\n    function getMultiplierForTimestamps(\\n        uint256 _from,\\n        uint256 _to\\n    ) public view returns (uint256) {\\n        if (_to <= stakeEndTimestamp) {\\n            return _to.sub(_from);\\n        } else if (_from >= stakeEndTimestamp) {\\n            return 0;\\n        } else {\\n            return stakeEndTimestamp.sub(_from);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the duration of the stake period.\\n     *\\n     * This function computes and returns the duration of the stake period by subtracting the start timestamp from the end timestamp.\\n     *\\n     * @return uint256 The duration of the stake period.\\n     */\\n    function stakeDuration() public view returns (uint256) {\\n        return stakeEndTimestamp - stakeStartTimestamp;\\n    }\\n\\n    /**\\n     * @dev Retrieves the staked amount for a specific staker.\\n     *\\n     * This function returns the staked amount for a specific staker based on their account address.\\n     *\\n     * @param _account The address of the staker.\\n     * @return uint256 The staked amount.\\n     */\\n    function getStakedAmount(address _account) public view returns (uint256) {\\n        return staker[_account].staked;\\n    }\\n\\n    /**\\n     * @dev Retrieves the earned reward amount for a specific staker.\\n     *\\n     * This function returns the earned reward amount for a specific staker based on their account address.\\n     *\\n     * @param _account The address of the staker.\\n     * @return uint256 The earned reward amount.\\n     */\\n    function getEarnedAmount(address _account) public view returns (uint256) {\\n        return staker[_account].reward;\\n    }\\n\\n    /**\\n     * @dev Retrieves the claimed balance for a specific staker.\\n     *\\n     * This function returns the claimed balance for a specific staker based on their account address.\\n     *\\n     * @param _account The address of the staker.\\n     * @return uint256 The claimed balance.\\n     */\\n    function getWalletStakeUpdates(\\n        address _account\\n    ) public view returns (StakeUpdate[] memory) {\\n        return walletStakeUpdates[_account];\\n    }\\n\\n    /**\\n     * @dev Updates the reward tokens within the contract.\\n     *\\n     * This function is used by the contract owner to update the reward tokens within the contract. It verifies the validity of the stake period, transfers the specified amount of reward tokens to the contract address, increases the reward token quantity by the transferred amount, and updates the reward rate based on the new reward token quantity and stake duration.\\n     *\\n     * @param _amount The amount of reward tokens to be added.\\n     */\\n    function updateReward(uint256 _amount) public onlyWhitelistedUpdaters {\\n        require(\\n            stakeStartTimestamp > 0 && stakeEndTimestamp > 0,\\n            \\\"Invalid stake period config\\\"\\n        );\\n        require(block.timestamp < stakeEndTimestamp, \\\"Stake period has ended\\\");\\n        updatePool();\\n        rewardToken.transferFrom(_msgSender(), address(this), _amount);\\n        rewardTokenQuantity += _amount;\\n        accRewardTokenQuantity += _amount;\\n        uint256 remainingStakeTime = stakeEndTimestamp - block.timestamp;\\n        if (block.timestamp < stakeStartTimestamp) {\\n            remainingStakeTime = stakeEndTimestamp - stakeStartTimestamp;\\n        }\\n\\n        if (\\n            lastUpdateRewardTimestamp > 0 &&\\n            block.timestamp > stakeStartTimestamp\\n        ) {\\n            distributedReward += rewardPerSecond.mul(\\n                block.timestamp - lastUpdateRewardTimestamp\\n            );\\n        }\\n\\n        rewardPerSecond =\\n            (accRewardTokenQuantity - distributedReward) /\\n            remainingStakeTime;\\n\\n        if (block.timestamp > stakeStartTimestamp) {\\n            lastUpdateRewardTimestamp = block.timestamp;\\n        } else {\\n            lastUpdateRewardTimestamp = stakeStartTimestamp;\\n        }\\n\\n        emit UpdateReward(_amount, rewardPerSecond);\\n    }\\n\\n    /**\\n     * @dev Moves tokens to another stake contract.\\n     *\\n     * This function allows the sender to move tokens to another stake contract. It verifies that the contract is not paused, and the claim reward period has started. It calculates the amount of tokens available for release using the `enableForRelease` function and ensures that it is greater than zero. The tokens available for release are then added to the staker's claimed balance, and the stake contract specified by `_stakeAddress` is called to transfer the tokens.\\n     *\\n     * @param _stakerAddress The address of the staker.\\n     */\\n    function moveToStake(\\n        address _stakerAddress\\n    )\\n        external\\n        virtual\\n        whenNotPaused\\n        onlyWhitelistedStakes\\n        returns (bool, string memory, uint256)\\n    {\\n        if (\\n            claimRewardStartTimestamp == 0 ||\\n            block.timestamp < claimRewardStartTimestamp\\n        ) return (false, \\\"Claim period has not started\\\", 0);\\n        uint256 stakedSupply = totalStakedSupply;\\n        updatePool();\\n        Staker storage _staker = staker[_stakerAddress];\\n        // Update remaining balance to claim\\n        if (pendingReward(_stakerAddress) > 0) {\\n            uint256 reward = stakeReward(_stakerAddress);\\n            stakedSupply += reward;\\n            rewardTokenQuantity -= reward;\\n        }\\n\\n        uint256 tokensEnableToTransfer = _staker.balanceWithRewards -\\n            _staker.claimedBalance;\\n\\n        if (tokensEnableToTransfer == 0) {\\n            return (false, \\\"No tokens to release\\\", tokensEnableToTransfer);\\n        }\\n\\n        _staker.claimedBalance += tokensEnableToTransfer;\\n        rewardToken.transfer(_msgSender(), tokensEnableToTransfer);\\n\\n        _staker.staked = 0;\\n        stakedSupply -= tokensEnableToTransfer;\\n        totalStakedSupply = stakedSupply;\\n\\n        _staker.rewardDebt = getAmountByWallet(_stakerAddress)\\n            .mul(accRewardTokenPerShare)\\n            .div(1e18);\\n\\n        emit MoveToStake(_stakerAddress, _msgSender(), tokensEnableToTransfer);\\n\\n        return (\\n            true,\\n            \\\"Tokens transferred successfully\\\",\\n            tokensEnableToTransfer\\n        );\\n    }\\n\\n    /**\\n     * @dev Retrieves the staked amount for a specific staker.\\n     *\\n     * This function returns the staked amount for a specific staker based on their account address.\\n     *\\n     * @param wallet The address of the staker.\\n     * @return uint256 The staked amount.\\n     */\\n    function getAmountByWallet(address wallet) private view returns (uint256) {\\n        Staker storage _staker = staker[wallet];\\n        return _staker.balanceWithRewards.sub(_staker.claimedBalance);\\n    }\\n\\n    function claimReward() external virtual whenNotPaused {\\n        require(\\n            claimRewardStartTimestamp > 0 &&\\n                block.timestamp >= claimRewardStartTimestamp,\\n            \\\"MPROStake: Claim period has not started\\\"\\n        );\\n\\n        uint256 _pendingReward = pendingReward(_msgSender());\\n        require(_pendingReward > 0, \\\"MPROStake: No tokens to claim\\\");\\n        updatePool();\\n        Staker storage _staker = staker[_msgSender()];\\n        rewardTokenQuantity -= _pendingReward;\\n        rewardToken.transfer(_msgSender(), _pendingReward);\\n\\n        _staker.rewardDebt = getAmountByWallet(_msgSender())\\n            .mul(accRewardTokenPerShare)\\n            .div(1e18);\\n\\n        emit ClaimReward(_msgSender(), _pendingReward);\\n    }\\n\\n    /**\\n     * @dev Claims tokens for the sender.\\n     *\\n     * This function allows the sender to claim tokens. It verifies that the contract is not paused and there are tokens available for claim. It updates the staker's balance to claim if there are pending rewards. It then ensures that the remaining balance to claim is sufficient for the tokens to be claimed. If the conditions are met, the tokens are transferred to the sender.\\n     */\\n    function unstake() external virtual whenNotPaused {\\n        require(\\n            claimRewardStartTimestamp > 0 &&\\n                block.timestamp >= claimRewardStartTimestamp,\\n            \\\"MPROStake: Claim period has not started\\\"\\n        );\\n        uint256 stakedSupply = totalStakedSupply;\\n        updatePool();\\n        Staker storage _staker = staker[_msgSender()];\\n        // Update remaining balance to claim\\n        if (pendingReward(_msgSender()) > 0) {\\n            uint256 reward = stakeReward(_msgSender());\\n            stakedSupply += reward;\\n            rewardTokenQuantity -= reward;\\n        }\\n        uint256 tokensEnableForRelease = enableForRelease();\\n\\n        require(tokensEnableForRelease > 0, \\\"MPROStake: No tokens to claim\\\");\\n\\n        require(\\n            _staker.balanceWithRewards - _staker.claimedBalance >=\\n                tokensEnableForRelease,\\n            \\\"MPROStake: Not enough tokens to claim\\\"\\n        );\\n        _staker.claimedBalance += tokensEnableForRelease;\\n        rewardToken.transfer(_msgSender(), tokensEnableForRelease);\\n\\n        _staker.staked = 0;\\n        stakedSupply -= tokensEnableForRelease;\\n        totalStakedSupply = stakedSupply;\\n\\n        _staker.rewardDebt = getAmountByWallet(_msgSender())\\n            .mul(accRewardTokenPerShare)\\n            .div(1e18);\\n\\n        emit Unstake(_msgSender(), tokensEnableForRelease);\\n    }\\n\\n    /**\\n     * @dev Computes the amount of tokens available for release.\\n     *\\n     * This function calculates and returns the amount of tokens available for release for the sender. It checks if the current timestamp is greater than or equal to the claim reward start timestamp. If claim configuration is set to retrieve data about cycles, it calculates the current cycle, the percent to claim, and the claimable tokens based on the staker's balance to claim and claimed balance. If claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.\\n     *\\n     * @return uint256 The amount of tokens available for release.\\n     */\\n    function enableForRelease() public view returns (uint256) {\\n        if (block.timestamp >= claimRewardStartTimestamp) {\\n            Staker memory _staker = staker[_msgSender()];\\n            // Check if claim config is set to retrive data about cycles\\n            if (\\n                claimPeriodDuration > 0 && rewardUnlockPercentPerPeriod < 10000\\n            ) {\\n                // Calculate percent to claim\\n                uint256 percentToClaim = getCyclePercentToClaim(0);\\n\\n                // For instance balance to claim = 100, percent per period = 50, claimed balance = 0\\n                uint256 claimableTokens = _staker\\n                    .balanceWithRewards\\n                    .mul(percentToClaim)\\n                    .div(UNLOCK_PERCENT_DIVIDER);\\n\\n                if (\\n                    claimableTokens > _staker.balanceWithRewards // for example 60 // Balance to claim for example 60\\n                ) {\\n                    claimableTokens = _staker.balanceWithRewards;\\n                }\\n                return claimableTokens.sub(_staker.claimedBalance);\\n            }\\n            // When claim config is not set we allow to claim all tokens\\n            else {\\n                return getAmountByWallet(_msgSender());\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function compoundReward() external virtual whenNotPaused {\\n        uint256 _pendingReward = pendingReward(_msgSender());\\n        require(_pendingReward > 0, \\\"MPROStake: No rewards to compound\\\");\\n        updatePool();\\n        Staker storage _staker = staker[_msgSender()];\\n        uint256 reward = stakeReward(_msgSender());\\n        _staker.staked += reward;\\n        walletStakeUpdates[_msgSender()].push(\\n            StakeUpdate({\\n                _blockTimestamp: block.timestamp,\\n                _updatedAmount: reward\\n            })\\n        );\\n\\n        rewardTokenQuantity -= reward;\\n        totalStakedSupply += reward;\\n\\n        _staker.rewardDebt = getAmountByWallet(_msgSender())\\n            .mul(accRewardTokenPerShare)\\n            .div(1e18);\\n    }\\n\\n    /**\\n     * @dev Retrieves the next release allocation.\\n     *\\n     * This function calculates and returns the next release allocation based on the current timestamp and the claim reward start timestamp. If the current timestamp is greater than or equal to the claim reward start timestamp, it retrieves the staker's information and calculates the percent to claim based on the current cycle. It then calculates the claimable tokens based on the staker's balance with rewards and claimed balance. If the claimable tokens are greater than the balance with rewards, it sets the claimable tokens to the balance with rewards. If the claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.\\n     *\\n     * @return uint256 The next release allocation.\\n     */\\n    function nextReleaseAllocation() public view returns (uint256) {\\n        if (block.timestamp >= claimRewardStartTimestamp) {\\n            Staker memory _staker = staker[_msgSender()];\\n            // Check if claim config is set to retrive data about cycles\\n            if (\\n                claimPeriodDuration > 0 && rewardUnlockPercentPerPeriod < 10000\\n            ) {\\n                // Calculate percent to claim\\n                uint256 percentToClaim = getCyclePercentToClaim(1);\\n\\n                // For instance balance to claim = 100, percent per period = 50, claimed balance = 0\\n                uint256 claimableTokens = _staker\\n                    .balanceWithRewards\\n                    .sub(_staker.claimedBalance)\\n                    .mul(percentToClaim)\\n                    .div(UNLOCK_PERCENT_DIVIDER);\\n\\n                if (\\n                    claimableTokens > _staker.balanceWithRewards // for example 60 // Balance to claim for example 60\\n                ) {\\n                    claimableTokens = _staker.balanceWithRewards;\\n                }\\n                return claimableTokens.sub(_staker.claimedBalance);\\n                // When claim config is not set we allow to claim all tokens\\n            } else {\\n                return _staker.balanceWithRewards;\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the next release timestamp.\\n     *\\n     * This function calculates and returns the next release timestamp based on the current timestamp and the claim reward start timestamp. If the current timestamp is less than the claim reward start timestamp, it returns the claim reward start timestamp. Otherwise, it calculates the reward cycle and returns the next release timestamp.\\n     *\\n     * @return uint256 The next release timestamp.\\n     */\\n    function nextReleaseTimestamp() public view returns (uint256) {\\n        if (block.timestamp < claimRewardStartTimestamp) {\\n            return claimRewardStartTimestamp;\\n        } else {\\n            uint256 rewardCycle = 1;\\n            rewardCycle += block.timestamp.sub(claimRewardStartTimestamp).div(\\n                claimPeriodDuration\\n            );\\n            return\\n                claimRewardStartTimestamp.add(\\n                    rewardCycle.mul(claimPeriodDuration)\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the percent of tokens to claim for the current cycle.\\n     */\\n    function getCyclePercentToClaim(\\n        uint256 _cyclesToAdd\\n    ) private view returns (uint256) {\\n        if (block.timestamp >= claimRewardStartTimestamp) {\\n            uint256 currentCycle = (\\n                block.timestamp.sub(claimRewardStartTimestamp).div(\\n                    claimPeriodDuration\\n                )\\n                // We add 1 to the current cycle to get the next cycle\\n            ).add(_cyclesToAdd.add(1));\\n\\n            // Calculate percent to claim\\n            uint256 percentToClaim = rewardUnlockPercentPerPeriod.mul(\\n                currentCycle\\n            );\\n            return percentToClaim;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes dust tokens from the contract.\\n     *\\n     * This function allows the contract owner to transfer all remaining tokens (dust) from the contract to the owner's address.\\n     * @param _amount The amount to remove from the contract.\\n     */\\n    function removeDust(uint256 _amount) public onlyOwner {\\n        rewardToken.transfer(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws emergency reward tokens from the contract.\\n     */\\n    function emergencyRewardWithdrawal() public onlyOwner {\\n        updatePool();\\n        rewardToken.transferFrom(\\n            address(this),\\n            _msgSender(),\\n            rewardTokenQuantity\\n        );\\n        rewardTokenQuantity -= rewardTokenQuantity;\\n        accRewardTokenQuantity -= rewardTokenQuantity;\\n        uint256 remainingStakeTime = stakeEndTimestamp - block.timestamp;\\n        if (block.timestamp < stakeStartTimestamp) {\\n            remainingStakeTime = stakeEndTimestamp - stakeStartTimestamp;\\n        }\\n\\n        if (\\n            lastUpdateRewardTimestamp > 0 &&\\n            block.timestamp > stakeStartTimestamp\\n        ) {\\n            distributedReward += rewardPerSecond.mul(\\n                block.timestamp - lastUpdateRewardTimestamp\\n            );\\n        }\\n\\n        rewardPerSecond =\\n            (accRewardTokenQuantity - distributedReward) /\\n            remainingStakeTime;\\n\\n        if (block.timestamp > stakeStartTimestamp) {\\n            lastUpdateRewardTimestamp = block.timestamp;\\n        } else {\\n            lastUpdateRewardTimestamp = stakeStartTimestamp;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the stake configuration parameters.\\n     *\\n     * This function allows the contract owner to set the stake configuration parameters including the start and end timestamps for staking and declaration periods.\\n     *\\n     * @param _stakeStartTimestamp The start timestamp for the stake period.\\n     * @param _stakeEndTimestamp The end timestamp for the stake period.\\n     */\\n    function setStakeConfig(\\n        uint256 _stakeStartTimestamp,\\n        uint256 _stakeEndTimestamp\\n    ) public onlyOwner {\\n        require(\\n            _stakeStartTimestamp < _stakeEndTimestamp,\\n            \\\"MPROStake: Invalid stake configuration\\\"\\n        );\\n        require(\\n            _stakeStartTimestamp > block.timestamp &&\\n                _stakeEndTimestamp > block.timestamp,\\n            \\\"MPROStake: Invalid stake configuration - timestamps should be in the future\\\"\\n        );\\n\\n        // Check if the stake start timestamp is greater than the current timestamp\\n        if (stakeStartTimestamp == 0 || block.timestamp < stakeStartTimestamp) {\\n            stakeStartTimestamp = _stakeStartTimestamp;\\n            stakeEndTimestamp = _stakeEndTimestamp;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the claim reward configuration parameters.\\n     *\\n     * This function allows the contract owner to set the claim reward configuration parameters including the start timestamp for claiming rewards, the duration of each claim period, and the percent of rewards to unlock per period.\\n     *\\n     * @param _claimRewardStartTimestamp The start timestamp for claiming rewards.\\n     * @param _claimPeriodDuration The duration of each claim period is seconds.\\n     * @param _rewardUnlockPercentPerPeriod The percent of rewards to unlock per period. 10000 = 100%, 9000 = 90%, etc.\\n     */\\n    function setClaimRewardConfig(\\n        uint256 _claimRewardStartTimestamp,\\n        uint256 _claimPeriodDuration,\\n        uint256 _rewardUnlockPercentPerPeriod\\n    ) public onlyOwner {\\n        require(\\n            _claimRewardStartTimestamp > 0 &&\\n                _claimPeriodDuration > 0 &&\\n                _rewardUnlockPercentPerPeriod > 0 &&\\n                _rewardUnlockPercentPerPeriod <= 10000,\\n            \\\"MPROStake: Invalid claim reward configuration\\\"\\n        );\\n        claimRewardStartTimestamp = _claimRewardStartTimestamp;\\n        claimPeriodDuration = _claimPeriodDuration;\\n        rewardUnlockPercentPerPeriod = _rewardUnlockPercentPerPeriod;\\n    }\\n\\n    function setStakeWhitelisted(\\n        address _stakeAddress,\\n        bool _isWhitelisted\\n    ) public onlyOwner {\\n        isStakeWhitelisted[_stakeAddress] = _isWhitelisted;\\n    }\\n\\n    function setUpdaterWhitelisted(\\n        address _walletAddress,\\n        bool _isWhitelisted\\n    ) public onlyOwner {\\n        isUpdaterWhitelisted[_walletAddress] = _isWhitelisted;\\n    }\\n\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function pause() public onlyWhitelistedUpdaters {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyWhitelistedUpdaters {\\n        _unpause();\\n    }\\n\\n    function getStakeConfig()\\n        public\\n        view\\n        returns (StakeConfig memory stakeConfig)\\n    {\\n        return\\n            StakeConfig({\\n                stakeStartTimestamp: stakeStartTimestamp,\\n                stakeEndTimestamp: stakeEndTimestamp,\\n                rewardPerSecond: rewardPerSecond,\\n                rewardTokenQuantity: rewardTokenQuantity,\\n                totalStakedSupply: totalStakedSupply\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xe6d888673266200e1100a34d421fac4abeed526b6131be51783b06287ac4de78\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052612710600e553480156200001757600080fd5b5060405162002663380380620026638339810160408190526200003a91620000df565b620000453362000072565b6000805460ff60a01b191690556001600160a01b0382166080526200006a8162000072565b505062000117565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000da57600080fd5b919050565b60008060408385031215620000f357600080fd5b620000fe83620000c2565b91506200010e60208401620000c2565b90509250929050565b6080516124ff62000164600039600081816105c40152818161083501528181610b0a0152818161117e0152818161134e015281816115f70152818161177201526118df01526124ff6000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c80638f10369a1161015c578063d48b9cf6116100ce578063f2fde38b11610087578063f2fde38b14610599578063f40f0f52146105ac578063f7c618c1146105bf578063f8077fae146105e6578063f8fd39f2146105ef578063fe1d4ffc1461060257600080fd5b8063d48b9cf614610541578063dd69f04f1461054a578063e2936b9414610553578063e3161ddd1461055b578063e67719bd14610563578063ebd20d241461058657600080fd5b8063bd93ee5411610120578063bd93ee54146104d2578063bedffc2f146104f4578063c0779988146104fc578063c492baad1461050f578063cf8087a81461052f578063d1c515ea1461053857600080fd5b80638f10369a14610482578063a694fc3a1461048b578063b88a802f1461049e578063bc969d0f146104a6578063bcdc3cfc146104c957600080fd5b8063503d42f0116102005780636d09d69e116101b95780636d09d69e146103d75780636d971a10146103e0578063715018a6146103e857806382e4eda4146103f05780638456cb59146104555780638da5cb5b1461045d57600080fd5b8063503d42f014610359578063597df275146103625780635a7d04fb146103755780635c975abb1461038857806367f2c0df146103a65780636c2e3c15146103ce57600080fd5b806340f02ab61161025257806340f02ab6146102fb57806340f9427d14610303578063425c8abd1461030c578063497b46a21461031f5780634b841d24146103275780634da6a5561461033057600080fd5b80631827ab571461028f5780631a853e9d146102aa5780632def6620146102d65780633b028cff146102e05780633f4ba83a146102f3575b600080fd5b61029761064c565b6040519081526020015b60405180910390f35b6102976102b83660046121df565b6001600160a01b03166000908152600b602052604090206003015490565b6102de6106b0565b005b6102976102ee3660046121fa565b610960565b6102de6109a0565b6102976109ee565b61029760045481565b6102de61031a36600461221c565b610a05565b610297610cb2565b61029760025481565b61029761033e3660046121df565b6001600160a01b03166000908152600b602052604090205490565b610297600e5481565b6102de6103703660046121fa565b610d8b565b6102de610383366004612243565b610ea9565b600054600160a01b900460ff165b60405190151581526020016102a1565b6103b96103b436600461227a565b610edc565b604080519283526020830191909152016102a1565b610297600d5481565b61029760095481565b6102de610f18565b6102de611062565b61042d6103fe3660046121df565b600b60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016102a1565b6102de611074565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102a1565b61029760035481565b6102de61049936600461221c565b6110c0565b6102de611288565b6103966104b43660046121df565b60116020526000908152604090205460ff1681565b61029760055481565b6104e56104e03660046121df565b611445565b6040516102a1939291906122a4565b6102de61174f565b6102de61050a36600461221c565b6118cd565b61052261051d3660046121df565b611976565b6040516102a19190612304565b610297600f5481565b61029760015481565b61029760085481565b61029760075481565b6102976119ff565b6102de611aad565b6103966105713660046121df565b60106020526000908152604090205460ff1681565b6102de610594366004612353565b611b29565b6102de6105a73660046121df565b611bcb565b6102976105ba3660046121df565b611c41565b61046a7f000000000000000000000000000000000000000000000000000000000000000081565b61029760065481565b6102de6105fd366004612243565b611d2e565b61060a611d61565b6040516102a19190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6000600d5442101561065f5750600d5490565b600f54600d5460019161067d91610677904290611dc9565b90611ddc565b6106879082612395565b90506106aa6106a1600f5483611de890919063ffffffff16565b600d5490611df4565b91505090565b6106b8611e00565b6000600d541180156106cc5750600d544210155b6106f15760405162461bcd60e51b81526004016106e8906123a8565b60405180910390fd5b6005546106fc611aad565b336000818152600b602052604081209161071590611c41565b111561074d57600061072633611e4d565b90506107328184612395565b9250806004600082825461074691906123ef565b9091555050505b6000610757610cb2565b9050600081116107a95760405162461bcd60e51b815260206004820152601d60248201527f4d50524f5374616b653a204e6f20746f6b656e7320746f20636c61696d00000060448201526064016106e8565b80826002015483600101546107be91906123ef565b101561081a5760405162461bcd60e51b815260206004820152602560248201527f4d50524f5374616b653a204e6f7420656e6f75676820746f6b656e7320746f20604482015264636c61696d60d81b60648201526084016106e8565b8082600201600082825461082e9190612395565b90915550507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190612402565b50600082556108e381846123ef565b925082600581905550610913670de0b6b3a764000061067760075461090d6109083390565b611f34565b90611de8565b60048301557f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd33604080516001600160a01b039092168252602082018490520160405180910390a1505050565b6000600254821161097c576109758284611dc9565b905061099a565b600254831061098d5750600061099a565b6002546109759084611dc9565b92915050565b3360009081526011602052604090205460ff16806109c857506000546001600160a01b031633145b6109e45760405162461bcd60e51b81526004016106e89061241f565b6109ec611f5f565b565b6000600154600254610a0091906123ef565b905090565b3360009081526011602052604090205460ff1680610a2d57506000546001600160a01b031633145b610a495760405162461bcd60e51b81526004016106e89061241f565b6000600154118015610a5d57506000600254115b610aa95760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207374616b6520706572696f6420636f6e666967000000000060448201526064016106e8565b6002544210610af35760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481c195c9a5bd9081a185cc8195b99195960521b60448201526064016106e8565b610afb611aad565b6040516323b872dd60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90610b4b9033903090869060040161246c565b6020604051808303816000875af1158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190612402565b508060046000828254610ba19190612395565b925050819055508060086000828254610bba9190612395565b9091555050600254600090610bd09042906123ef565b9050600154421015610bef57600154600254610bec91906123ef565b90505b6000600954118015610c02575060015442115b15610c3857610c2160095442610c1891906123ef565b60035490611de8565b600a6000828254610c329190612395565b90915550505b80600a54600854610c4991906123ef565b610c539190612490565b600355600154421115610c695742600955610c70565b6001546009555b6003546040805184815260208101929092527fbcabeac7f89430597dc942c3264f28fd08010c3b2e19ecf95c6e690f9820b2a491015b60405180910390a15050565b6000600d544210610d8557336000908152600b6020908152604091829020825160a08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004909101546080820152600f5415801590610d1d5750612710600e54105b15610d7c576000610d2e6000611fb4565b90506000610d4f612710610677848660200151611de890919063ffffffff16565b90508260200151811115610d64575060208201515b6040830151610d74908290611dc9565b935050505090565b6106aa33611f34565b50600090565b610d93612016565b808210610df15760405162461bcd60e51b815260206004820152602660248201527f4d50524f5374616b653a20496e76616c6964207374616b6520636f6e666967756044820152653930ba34b7b760d11b60648201526084016106e8565b4282118015610dff57504281115b610e855760405162461bcd60e51b815260206004820152604b60248201527f4d50524f5374616b653a20496e76616c6964207374616b6520636f6e6669677560448201527f726174696f6e202d2074696d657374616d70732073686f756c6420626520696e60648201526a207468652066757475726560a81b608482015260a4016106e8565b6001541580610e95575060015442105b15610ea557600182905560028190555b5050565b610eb1612016565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b600c6020528160005260406000208181548110610ef857600080fd5b600091825260209091206002909102018054600190910154909250905082565b610f20611e00565b6000610f2b33611c41565b905060008111610f875760405162461bcd60e51b815260206004820152602160248201527f4d50524f5374616b653a204e6f207265776172647320746f20636f6d706f756e6044820152601960fa1b60648201526084016106e8565b610f8f611aad565b336000818152600b6020526040812091610fa890611e4d565b905080826000016000828254610fbe9190612395565b9091555050336000908152600c602090815260408083208151808301909252428252818301858152815460018082018455928652938520925160029094029092019283559051910155600480548392906110199084906123ef565b9250508190555080600560008282546110329190612395565b92505081905550611055670de0b6b3a764000061067760075461090d6109083390565b8260040181905550505050565b61106a612016565b6109ec6000612070565b3360009081526011602052604090205460ff168061109c57506000546001600160a01b031633145b6110b85760405162461bcd60e51b81526004016106e89061241f565b6109ec6120c0565b6110c8611aad565b336000818152600b60205260408120916110e190611e4d565b905060006110ef3385612103565b905061110d670de0b6b3a764000061067760075461090d6109083390565b6004840155336000908152600c602090815260409182902082518084019093524283529190810161113e8585612395565b90528154600180820184556000938452602093849020835160029093020191825591909201519101556040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906111b79033903090869060040161246c565b6020604051808303816000875af11580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190612402565b50816004600082825461120d91906123ef565b9091555061121d90508282612395565b6005600082825461122e9190612395565b909155507febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a9050336112608484612395565b604080516001600160a01b03909316835260208301919091520160405180910390a150505050565b611290611e00565b6000600d541180156112a45750600d544210155b6112c05760405162461bcd60e51b81526004016106e8906123a8565b60006112cb33611c41565b90506000811161131d5760405162461bcd60e51b815260206004820152601d60248201527f4d50524f5374616b653a204e6f20746f6b656e7320746f20636c61696d00000060448201526064016106e8565b611325611aad565b336000908152600b6020526040812060048054919284926113479084906123ef565b90915550507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af11580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed9190612402565b5061140a670de0b6b3a764000061067760075461090d6109083390565b600482015560408051338152602081018490527fba8de60c3403ec381d1d484652ea1980e3c3e56359195c92525bff4ce47ad98e9101610ca6565b600060606000611453611e00565b3360009081526010602052604090205460ff166114c75760405162461bcd60e51b815260206004820152602c60248201527f4d50524f5374616b653a205374616b6520636f6e7472616374206973206e6f7460448201526b081dda1a5d195b1a5cdd195960a21b60648201526084016106e8565b600d5415806114d75750600d5442105b1561151c57505060408051808201909152601c81527f436c61696d20706572696f6420686173206e6f7420737461727465640000000060208201526000915081611748565b600554611527611aad565b6001600160a01b0385166000908152600b602052604081209061154987611c41565b111561158157600061155a87611e4d565b90506115668184612395565b9250806004600082825461157a91906123ef565b9091555050505b60008160020154826001015461159791906123ef565b9050806000036115dc576040805180820190915260148152734e6f20746f6b656e7320746f2072656c6561736560601b60208201526000965094509250611748915050565b808260020160008282546115f09190612395565b90915550507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190612402565b50600082556116a581846123ef565b9250826005819055506116c9670de0b6b3a764000061067760075461090d8b611f34565b60048301557f92289ccb028959c434462ed4a5a307adf94518ad8d4a721d3e5bd3a1c8e3ac7d8733836040516117019392919061246c565b60405180910390a160408051808201909152601f81527f546f6b656e73207472616e73666572726564207375636365737366756c6c79006020820152600196509450925050505b9193909250565b611757612016565b61175f611aad565b600480546040516323b872dd60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316926323b872dd926117b09230923392910161246c565b6020604051808303816000875af11580156117cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f39190612402565b506004805490600061180583806123ef565b90915550506004546008805460009061181f9084906123ef565b90915550506002546000906118359042906123ef565b90506001544210156118545760015460025461185191906123ef565b90505b6000600954118015611867575060015442115b156118945761187d60095442610c1891906123ef565b600a600082825461188e9190612395565b90915550505b80600a546008546118a591906123ef565b6118af9190612490565b6003556001544211156118c3574260095550565b6001546009555b50565b6118d5612016565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611952573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190612402565b6001600160a01b0381166000908152600c60209081526040808320805482518185028101850190935280835260609492939192909184015b828210156119f4578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906119ae565b505050509050919050565b6000600d544210610d8557336000908152600b6020908152604091829020825160a08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004909101546080820152600f5415801590611a6a5750612710600e54105b15611aa4576000611a7b6001611fb4565b90506000610d4f6127106106778461090d87604001518860200151611dc990919063ffffffff16565b60200151919050565b6006544211611ab857565b600554600003611ac85742600655565b6000611ad660065442610960565b90506000611aef60035483611de890919063ffffffff16565b9050611b1e611b15600554610677670de0b6b3a764000085611de890919063ffffffff16565b60075490611df4565b600755505042600655565b611b31612016565b600083118015611b415750600082115b8015611b4d5750600081115b8015611b5b57506127108111155b611bbd5760405162461bcd60e51b815260206004820152602d60248201527f4d50524f5374616b653a20496e76616c696420636c61696d207265776172642060448201526c31b7b73334b3bab930ba34b7b760991b60648201526084016106e8565b600d92909255600f55600e55565b611bd3612016565b6001600160a01b038116611c385760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e8565b6118ca81612070565b6001600160a01b0381166000908152600b60209081526040808320815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083015260040154608082015260075460065442118015611ca8575060055415155b15611cff576000611cbb60065442610960565b90506000611cd460035483611de890919063ffffffff16565b9050611cfa611b15600554610677670de0b6b3a764000085611de890919063ffffffff16565b925050505b611d268260800151611d20670de0b6b3a76400006106778561090d8a611f34565b90611dc9565b949350505050565b611d36612016565b6001600160a01b03919091166000908152601160205260409020805460ff1916911515919091179055565b611d936040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060a001604052806001548152602001600254815260200160035481526020016004548152602001600554815250905090565b6000611dd582846123ef565b9392505050565b6000611dd58284612490565b6000611dd582846124b2565b6000611dd58284612395565b600054600160a01b900460ff16156109ec5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106e8565b6001600160a01b0381166000908152600b6020526040812060048101546007548391611e8e91611d2090670de0b6b3a7640000906106779061090d8a611f34565b90508015611ecb5780826003016000828254611eaa9190612395565b9250508190555080826001016000828254611ec59190612395565b90915550505b611ee6670de0b6b3a764000061067760075461090d88611f34565b6004830155604080516001600160a01b0386168152602081018390527ffdb40631688a7579284e2f66bc5fd4fefeb5ff42e76828e3b307bdc4af2715bf910160405180910390a19392505050565b6001600160a01b0381166000908152600b6020526040812060028101546001820154611dd591611dc9565b611f67612178565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000600d544210612009576000611ff0611fcf846001611df4565b611fea600f54610677600d5442611dc990919063ffffffff16565b90611df4565b90506000611d2682600e54611de890919063ffffffff16565b506000919050565b919050565b6000546001600160a01b031633146109ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106e8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6120c8611e00565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f973390565b6001600160a01b0382166000908152600b60205260408120805483908290849061212e908490612395565b92505081905550828160010160008282546121499190612395565b9250508190555061216b670de0b6b3a764000061067760075461090d88611f34565b6004919091015550919050565b600054600160a01b900460ff166109ec5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106e8565b80356001600160a01b038116811461201157600080fd5b6000602082840312156121f157600080fd5b611dd5826121c8565b6000806040838503121561220d57600080fd5b50508035926020909101359150565b60006020828403121561222e57600080fd5b5035919050565b80151581146118ca57600080fd5b6000806040838503121561225657600080fd5b61225f836121c8565b9150602083013561226f81612235565b809150509250929050565b6000806040838503121561228d57600080fd5b612296836121c8565b946020939093013593505050565b83151581526000602060606020840152845180606085015260005b818110156122db578681018301518582016080015282016122bf565b506000608082860101526080601f19601f83011685010192505050826040830152949350505050565b602080825282518282018190526000919060409081850190868401855b8281101561234657815180518552860151868501529284019290850190600101612321565b5091979650505050505050565b60008060006060848603121561236857600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561099a5761099a61237f565b60208082526027908201527f4d50524f5374616b653a20436c61696d20706572696f6420686173206e6f74206040820152661cdd185c9d195960ca1b606082015260800190565b8181038181111561099a5761099a61237f565b60006020828403121561241457600080fd5b8151611dd581612235565b6020808252602d908201527f4d50524f5374616b653a2041646472657373206973206e6f742077686974656c60408201526c34b9ba32b2103ab83230ba32b960991b606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000826124ad57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761099a5761099a61237f56fea26469706673582212204a975f18a7790473d9bdee812214ae33709d9bf685834cfb3ae66d4a6741219964736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061028a5760003560e01c80638f10369a1161015c578063d48b9cf6116100ce578063f2fde38b11610087578063f2fde38b14610599578063f40f0f52146105ac578063f7c618c1146105bf578063f8077fae146105e6578063f8fd39f2146105ef578063fe1d4ffc1461060257600080fd5b8063d48b9cf614610541578063dd69f04f1461054a578063e2936b9414610553578063e3161ddd1461055b578063e67719bd14610563578063ebd20d241461058657600080fd5b8063bd93ee5411610120578063bd93ee54146104d2578063bedffc2f146104f4578063c0779988146104fc578063c492baad1461050f578063cf8087a81461052f578063d1c515ea1461053857600080fd5b80638f10369a14610482578063a694fc3a1461048b578063b88a802f1461049e578063bc969d0f146104a6578063bcdc3cfc146104c957600080fd5b8063503d42f0116102005780636d09d69e116101b95780636d09d69e146103d75780636d971a10146103e0578063715018a6146103e857806382e4eda4146103f05780638456cb59146104555780638da5cb5b1461045d57600080fd5b8063503d42f014610359578063597df275146103625780635a7d04fb146103755780635c975abb1461038857806367f2c0df146103a65780636c2e3c15146103ce57600080fd5b806340f02ab61161025257806340f02ab6146102fb57806340f9427d14610303578063425c8abd1461030c578063497b46a21461031f5780634b841d24146103275780634da6a5561461033057600080fd5b80631827ab571461028f5780631a853e9d146102aa5780632def6620146102d65780633b028cff146102e05780633f4ba83a146102f3575b600080fd5b61029761064c565b6040519081526020015b60405180910390f35b6102976102b83660046121df565b6001600160a01b03166000908152600b602052604090206003015490565b6102de6106b0565b005b6102976102ee3660046121fa565b610960565b6102de6109a0565b6102976109ee565b61029760045481565b6102de61031a36600461221c565b610a05565b610297610cb2565b61029760025481565b61029761033e3660046121df565b6001600160a01b03166000908152600b602052604090205490565b610297600e5481565b6102de6103703660046121fa565b610d8b565b6102de610383366004612243565b610ea9565b600054600160a01b900460ff165b60405190151581526020016102a1565b6103b96103b436600461227a565b610edc565b604080519283526020830191909152016102a1565b610297600d5481565b61029760095481565b6102de610f18565b6102de611062565b61042d6103fe3660046121df565b600b60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016102a1565b6102de611074565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016102a1565b61029760035481565b6102de61049936600461221c565b6110c0565b6102de611288565b6103966104b43660046121df565b60116020526000908152604090205460ff1681565b61029760055481565b6104e56104e03660046121df565b611445565b6040516102a1939291906122a4565b6102de61174f565b6102de61050a36600461221c565b6118cd565b61052261051d3660046121df565b611976565b6040516102a19190612304565b610297600f5481565b61029760015481565b61029760085481565b61029760075481565b6102976119ff565b6102de611aad565b6103966105713660046121df565b60106020526000908152604090205460ff1681565b6102de610594366004612353565b611b29565b6102de6105a73660046121df565b611bcb565b6102976105ba3660046121df565b611c41565b61046a7f000000000000000000000000000000000000000000000000000000000000000081565b61029760065481565b6102de6105fd366004612243565b611d2e565b61060a611d61565b6040516102a19190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b6000600d5442101561065f5750600d5490565b600f54600d5460019161067d91610677904290611dc9565b90611ddc565b6106879082612395565b90506106aa6106a1600f5483611de890919063ffffffff16565b600d5490611df4565b91505090565b6106b8611e00565b6000600d541180156106cc5750600d544210155b6106f15760405162461bcd60e51b81526004016106e8906123a8565b60405180910390fd5b6005546106fc611aad565b336000818152600b602052604081209161071590611c41565b111561074d57600061072633611e4d565b90506107328184612395565b9250806004600082825461074691906123ef565b9091555050505b6000610757610cb2565b9050600081116107a95760405162461bcd60e51b815260206004820152601d60248201527f4d50524f5374616b653a204e6f20746f6b656e7320746f20636c61696d00000060448201526064016106e8565b80826002015483600101546107be91906123ef565b101561081a5760405162461bcd60e51b815260206004820152602560248201527f4d50524f5374616b653a204e6f7420656e6f75676820746f6b656e7320746f20604482015264636c61696d60d81b60648201526084016106e8565b8082600201600082825461082e9190612395565b90915550507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af11580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190612402565b50600082556108e381846123ef565b925082600581905550610913670de0b6b3a764000061067760075461090d6109083390565b611f34565b90611de8565b60048301557f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd33604080516001600160a01b039092168252602082018490520160405180910390a1505050565b6000600254821161097c576109758284611dc9565b905061099a565b600254831061098d5750600061099a565b6002546109759084611dc9565b92915050565b3360009081526011602052604090205460ff16806109c857506000546001600160a01b031633145b6109e45760405162461bcd60e51b81526004016106e89061241f565b6109ec611f5f565b565b6000600154600254610a0091906123ef565b905090565b3360009081526011602052604090205460ff1680610a2d57506000546001600160a01b031633145b610a495760405162461bcd60e51b81526004016106e89061241f565b6000600154118015610a5d57506000600254115b610aa95760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207374616b6520706572696f6420636f6e666967000000000060448201526064016106e8565b6002544210610af35760405162461bcd60e51b815260206004820152601660248201527514dd185ad9481c195c9a5bd9081a185cc8195b99195960521b60448201526064016106e8565b610afb611aad565b6040516323b872dd60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90610b4b9033903090869060040161246c565b6020604051808303816000875af1158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190612402565b508060046000828254610ba19190612395565b925050819055508060086000828254610bba9190612395565b9091555050600254600090610bd09042906123ef565b9050600154421015610bef57600154600254610bec91906123ef565b90505b6000600954118015610c02575060015442115b15610c3857610c2160095442610c1891906123ef565b60035490611de8565b600a6000828254610c329190612395565b90915550505b80600a54600854610c4991906123ef565b610c539190612490565b600355600154421115610c695742600955610c70565b6001546009555b6003546040805184815260208101929092527fbcabeac7f89430597dc942c3264f28fd08010c3b2e19ecf95c6e690f9820b2a491015b60405180910390a15050565b6000600d544210610d8557336000908152600b6020908152604091829020825160a08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004909101546080820152600f5415801590610d1d5750612710600e54105b15610d7c576000610d2e6000611fb4565b90506000610d4f612710610677848660200151611de890919063ffffffff16565b90508260200151811115610d64575060208201515b6040830151610d74908290611dc9565b935050505090565b6106aa33611f34565b50600090565b610d93612016565b808210610df15760405162461bcd60e51b815260206004820152602660248201527f4d50524f5374616b653a20496e76616c6964207374616b6520636f6e666967756044820152653930ba34b7b760d11b60648201526084016106e8565b4282118015610dff57504281115b610e855760405162461bcd60e51b815260206004820152604b60248201527f4d50524f5374616b653a20496e76616c6964207374616b6520636f6e6669677560448201527f726174696f6e202d2074696d657374616d70732073686f756c6420626520696e60648201526a207468652066757475726560a81b608482015260a4016106e8565b6001541580610e95575060015442105b15610ea557600182905560028190555b5050565b610eb1612016565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b600c6020528160005260406000208181548110610ef857600080fd5b600091825260209091206002909102018054600190910154909250905082565b610f20611e00565b6000610f2b33611c41565b905060008111610f875760405162461bcd60e51b815260206004820152602160248201527f4d50524f5374616b653a204e6f207265776172647320746f20636f6d706f756e6044820152601960fa1b60648201526084016106e8565b610f8f611aad565b336000818152600b6020526040812091610fa890611e4d565b905080826000016000828254610fbe9190612395565b9091555050336000908152600c602090815260408083208151808301909252428252818301858152815460018082018455928652938520925160029094029092019283559051910155600480548392906110199084906123ef565b9250508190555080600560008282546110329190612395565b92505081905550611055670de0b6b3a764000061067760075461090d6109083390565b8260040181905550505050565b61106a612016565b6109ec6000612070565b3360009081526011602052604090205460ff168061109c57506000546001600160a01b031633145b6110b85760405162461bcd60e51b81526004016106e89061241f565b6109ec6120c0565b6110c8611aad565b336000818152600b60205260408120916110e190611e4d565b905060006110ef3385612103565b905061110d670de0b6b3a764000061067760075461090d6109083390565b6004840155336000908152600c602090815260409182902082518084019093524283529190810161113e8585612395565b90528154600180820184556000938452602093849020835160029093020191825591909201519101556040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906111b79033903090869060040161246c565b6020604051808303816000875af11580156111d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fa9190612402565b50816004600082825461120d91906123ef565b9091555061121d90508282612395565b6005600082825461122e9190612395565b909155507febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a9050336112608484612395565b604080516001600160a01b03909316835260208301919091520160405180910390a150505050565b611290611e00565b6000600d541180156112a45750600d544210155b6112c05760405162461bcd60e51b81526004016106e8906123a8565b60006112cb33611c41565b90506000811161131d5760405162461bcd60e51b815260206004820152601d60248201527f4d50524f5374616b653a204e6f20746f6b656e7320746f20636c61696d00000060448201526064016106e8565b611325611aad565b336000908152600b6020526040812060048054919284926113479084906123ef565b90915550507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af11580156113c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ed9190612402565b5061140a670de0b6b3a764000061067760075461090d6109083390565b600482015560408051338152602081018490527fba8de60c3403ec381d1d484652ea1980e3c3e56359195c92525bff4ce47ad98e9101610ca6565b600060606000611453611e00565b3360009081526010602052604090205460ff166114c75760405162461bcd60e51b815260206004820152602c60248201527f4d50524f5374616b653a205374616b6520636f6e7472616374206973206e6f7460448201526b081dda1a5d195b1a5cdd195960a21b60648201526084016106e8565b600d5415806114d75750600d5442105b1561151c57505060408051808201909152601c81527f436c61696d20706572696f6420686173206e6f7420737461727465640000000060208201526000915081611748565b600554611527611aad565b6001600160a01b0385166000908152600b602052604081209061154987611c41565b111561158157600061155a87611e4d565b90506115668184612395565b9250806004600082825461157a91906123ef565b9091555050505b60008160020154826001015461159791906123ef565b9050806000036115dc576040805180820190915260148152734e6f20746f6b656e7320746f2072656c6561736560601b60208201526000965094509250611748915050565b808260020160008282546115f09190612395565b90915550507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190612402565b50600082556116a581846123ef565b9250826005819055506116c9670de0b6b3a764000061067760075461090d8b611f34565b60048301557f92289ccb028959c434462ed4a5a307adf94518ad8d4a721d3e5bd3a1c8e3ac7d8733836040516117019392919061246c565b60405180910390a160408051808201909152601f81527f546f6b656e73207472616e73666572726564207375636365737366756c6c79006020820152600196509450925050505b9193909250565b611757612016565b61175f611aad565b600480546040516323b872dd60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316926323b872dd926117b09230923392910161246c565b6020604051808303816000875af11580156117cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f39190612402565b506004805490600061180583806123ef565b90915550506004546008805460009061181f9084906123ef565b90915550506002546000906118359042906123ef565b90506001544210156118545760015460025461185191906123ef565b90505b6000600954118015611867575060015442115b156118945761187d60095442610c1891906123ef565b600a600082825461188e9190612395565b90915550505b80600a546008546118a591906123ef565b6118af9190612490565b6003556001544211156118c3574260095550565b6001546009555b50565b6118d5612016565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611952573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190612402565b6001600160a01b0381166000908152600c60209081526040808320805482518185028101850190935280835260609492939192909184015b828210156119f4578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906119ae565b505050509050919050565b6000600d544210610d8557336000908152600b6020908152604091829020825160a08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004909101546080820152600f5415801590611a6a5750612710600e54105b15611aa4576000611a7b6001611fb4565b90506000610d4f6127106106778461090d87604001518860200151611dc990919063ffffffff16565b60200151919050565b6006544211611ab857565b600554600003611ac85742600655565b6000611ad660065442610960565b90506000611aef60035483611de890919063ffffffff16565b9050611b1e611b15600554610677670de0b6b3a764000085611de890919063ffffffff16565b60075490611df4565b600755505042600655565b611b31612016565b600083118015611b415750600082115b8015611b4d5750600081115b8015611b5b57506127108111155b611bbd5760405162461bcd60e51b815260206004820152602d60248201527f4d50524f5374616b653a20496e76616c696420636c61696d207265776172642060448201526c31b7b73334b3bab930ba34b7b760991b60648201526084016106e8565b600d92909255600f55600e55565b611bd3612016565b6001600160a01b038116611c385760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e8565b6118ca81612070565b6001600160a01b0381166000908152600b60209081526040808320815160a081018352815481526001820154938101939093526002810154918301919091526003810154606083015260040154608082015260075460065442118015611ca8575060055415155b15611cff576000611cbb60065442610960565b90506000611cd460035483611de890919063ffffffff16565b9050611cfa611b15600554610677670de0b6b3a764000085611de890919063ffffffff16565b925050505b611d268260800151611d20670de0b6b3a76400006106778561090d8a611f34565b90611dc9565b949350505050565b611d36612016565b6001600160a01b03919091166000908152601160205260409020805460ff1916911515919091179055565b611d936040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060a001604052806001548152602001600254815260200160035481526020016004548152602001600554815250905090565b6000611dd582846123ef565b9392505050565b6000611dd58284612490565b6000611dd582846124b2565b6000611dd58284612395565b600054600160a01b900460ff16156109ec5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106e8565b6001600160a01b0381166000908152600b6020526040812060048101546007548391611e8e91611d2090670de0b6b3a7640000906106779061090d8a611f34565b90508015611ecb5780826003016000828254611eaa9190612395565b9250508190555080826001016000828254611ec59190612395565b90915550505b611ee6670de0b6b3a764000061067760075461090d88611f34565b6004830155604080516001600160a01b0386168152602081018390527ffdb40631688a7579284e2f66bc5fd4fefeb5ff42e76828e3b307bdc4af2715bf910160405180910390a19392505050565b6001600160a01b0381166000908152600b6020526040812060028101546001820154611dd591611dc9565b611f67612178565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000600d544210612009576000611ff0611fcf846001611df4565b611fea600f54610677600d5442611dc990919063ffffffff16565b90611df4565b90506000611d2682600e54611de890919063ffffffff16565b506000919050565b919050565b6000546001600160a01b031633146109ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106e8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6120c8611e00565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f973390565b6001600160a01b0382166000908152600b60205260408120805483908290849061212e908490612395565b92505081905550828160010160008282546121499190612395565b9250508190555061216b670de0b6b3a764000061067760075461090d88611f34565b6004919091015550919050565b600054600160a01b900460ff166109ec5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106e8565b80356001600160a01b038116811461201157600080fd5b6000602082840312156121f157600080fd5b611dd5826121c8565b6000806040838503121561220d57600080fd5b50508035926020909101359150565b60006020828403121561222e57600080fd5b5035919050565b80151581146118ca57600080fd5b6000806040838503121561225657600080fd5b61225f836121c8565b9150602083013561226f81612235565b809150509250929050565b6000806040838503121561228d57600080fd5b612296836121c8565b946020939093013593505050565b83151581526000602060606020840152845180606085015260005b818110156122db578681018301518582016080015282016122bf565b506000608082860101526080601f19601f83011685010192505050826040830152949350505050565b602080825282518282018190526000919060409081850190868401855b8281101561234657815180518552860151868501529284019290850190600101612321565b5091979650505050505050565b60008060006060848603121561236857600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561099a5761099a61237f565b60208082526027908201527f4d50524f5374616b653a20436c61696d20706572696f6420686173206e6f74206040820152661cdd185c9d195960ca1b606082015260800190565b8181038181111561099a5761099a61237f565b60006020828403121561241457600080fd5b8151611dd581612235565b6020808252602d908201527f4d50524f5374616b653a2041646472657373206973206e6f742077686974656c60408201526c34b9ba32b2103ab83230ba32b960991b606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000826124ad57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761099a5761099a61237f56fea26469706673582212204a975f18a7790473d9bdee812214ae33709d9bf685834cfb3ae66d4a6741219964736f6c63430008160033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes the MPROAutoStake contract. This function initializes the MPROAutoStake contract with the specified reward token address and the new owner address. It sets the reward token and transfers the ownership to the new owner.",
        "params": {
          "_newOwner": "The address of the new owner.",
          "_rewardTokenAddress": "The address of the reward token."
        }
      },
      "emergencyRewardWithdrawal()": {
        "details": "Withdraws emergency reward tokens from the contract."
      },
      "enableForRelease()": {
        "details": "Computes the amount of tokens available for release. This function calculates and returns the amount of tokens available for release for the sender. It checks if the current timestamp is greater than or equal to the claim reward start timestamp. If claim configuration is set to retrieve data about cycles, it calculates the current cycle, the percent to claim, and the claimable tokens based on the staker's balance to claim and claimed balance. If claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.",
        "returns": {
          "_0": "uint256 The amount of tokens available for release."
        }
      },
      "getEarnedAmount(address)": {
        "details": "Retrieves the earned reward amount for a specific staker. This function returns the earned reward amount for a specific staker based on their account address.",
        "params": {
          "_account": "The address of the staker."
        },
        "returns": {
          "_0": "uint256 The earned reward amount."
        }
      },
      "getMultiplierForTimestamps(uint256,uint256)": {
        "details": "Retrieves the multiplier for timestamps. This function calculates and returns the multiplier for timestamps based on the start and end timestamps of the stake period. If the end timestamp is less than or equal to the specified timestamp, the function returns the difference between the two timestamps. If the start timestamp is greater than or equal to the specified timestamp, the function returns zero. Otherwise, it returns the difference between the end timestamp and the specified timestamp.",
        "params": {
          "_from": "The start timestamp.",
          "_to": "The end timestamp."
        },
        "returns": {
          "_0": "uint256 The multiplier for timestamps."
        }
      },
      "getStakedAmount(address)": {
        "details": "Retrieves the staked amount for a specific staker. This function returns the staked amount for a specific staker based on their account address.",
        "params": {
          "_account": "The address of the staker."
        },
        "returns": {
          "_0": "uint256 The staked amount."
        }
      },
      "getWalletStakeUpdates(address)": {
        "details": "Retrieves the claimed balance for a specific staker. This function returns the claimed balance for a specific staker based on their account address.",
        "params": {
          "_account": "The address of the staker."
        },
        "returns": {
          "_0": "uint256 The claimed balance."
        }
      },
      "moveToStake(address)": {
        "details": "Moves tokens to another stake contract. This function allows the sender to move tokens to another stake contract. It verifies that the contract is not paused, and the claim reward period has started. It calculates the amount of tokens available for release using the `enableForRelease` function and ensures that it is greater than zero. The tokens available for release are then added to the staker's claimed balance, and the stake contract specified by `_stakeAddress` is called to transfer the tokens.",
        "params": {
          "_stakerAddress": "The address of the staker."
        }
      },
      "nextReleaseAllocation()": {
        "details": "Retrieves the next release allocation. This function calculates and returns the next release allocation based on the current timestamp and the claim reward start timestamp. If the current timestamp is greater than or equal to the claim reward start timestamp, it retrieves the staker's information and calculates the percent to claim based on the current cycle. It then calculates the claimable tokens based on the staker's balance with rewards and claimed balance. If the claimable tokens are greater than the balance with rewards, it sets the claimable tokens to the balance with rewards. If the claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.",
        "returns": {
          "_0": "uint256 The next release allocation."
        }
      },
      "nextReleaseTimestamp()": {
        "details": "Retrieves the next release timestamp. This function calculates and returns the next release timestamp based on the current timestamp and the claim reward start timestamp. If the current timestamp is less than the claim reward start timestamp, it returns the claim reward start timestamp. Otherwise, it calculates the reward cycle and returns the next release timestamp.",
        "returns": {
          "_0": "uint256 The next release timestamp."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingReward(address)": {
        "details": "Retrieves the pending reward for a specific staker. This function calculates and returns the pending reward for a specific staker based on their balance to claim, the reward per token from the last updated timestamp, and the current balance. If the staker's last updated timestamp is zero, indicating no previous updates, the function returns zero. Otherwise, it computes the pending reward per token and returns the result.",
        "params": {
          "_account": "The address of the staker."
        },
        "returns": {
          "_0": "uint256 The pending reward amount."
        }
      },
      "removeDust(uint256)": {
        "details": "Removes dust tokens from the contract. This function allows the contract owner to transfer all remaining tokens (dust) from the contract to the owner's address.",
        "params": {
          "_amount": "The amount to remove from the contract."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setClaimRewardConfig(uint256,uint256,uint256)": {
        "details": "Sets the claim reward configuration parameters. This function allows the contract owner to set the claim reward configuration parameters including the start timestamp for claiming rewards, the duration of each claim period, and the percent of rewards to unlock per period.",
        "params": {
          "_claimPeriodDuration": "The duration of each claim period is seconds.",
          "_claimRewardStartTimestamp": "The start timestamp for claiming rewards.",
          "_rewardUnlockPercentPerPeriod": "The percent of rewards to unlock per period. 10000 = 100%, 9000 = 90%, etc."
        }
      },
      "setStakeConfig(uint256,uint256)": {
        "details": "Sets the stake configuration parameters. This function allows the contract owner to set the stake configuration parameters including the start and end timestamps for staking and declaration periods.",
        "params": {
          "_stakeEndTimestamp": "The end timestamp for the stake period.",
          "_stakeStartTimestamp": "The start timestamp for the stake period."
        }
      },
      "stakeDuration()": {
        "details": "Returns the duration of the stake period. This function computes and returns the duration of the stake period by subtracting the start timestamp from the end timestamp.",
        "returns": {
          "_0": "uint256 The duration of the stake period."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake()": {
        "details": "Claims tokens for the sender. This function allows the sender to claim tokens. It verifies that the contract is not paused and there are tokens available for claim. It updates the staker's balance to claim if there are pending rewards. It then ensures that the remaining balance to claim is sufficient for the tokens to be claimed. If the conditions are met, the tokens are transferred to the sender."
      },
      "updatePool()": {
        "details": "Updates the pool. This function updates the pool by calculating the multiplier for timestamps and the reward token reward. It then updates the accumulated reward per share based on the reward token reward and the total staked supply. If the current timestamp is less than or equal to the last reward timestamp, the function returns without updating the pool. If the total staked supply is zero, the function returns without updating the pool. Otherwise, it calculates the multiplier for timestamps and the reward token reward, updates the accumulated reward per share, and sets the last reward timestamp to the current timestamp."
      },
      "updateReward(uint256)": {
        "details": "Updates the reward tokens within the contract. This function is used by the contract owner to update the reward tokens within the contract. It verifies the validity of the stake period, transfers the specified amount of reward tokens to the contract address, increases the reward token quantity by the transferred amount, and updates the reward rate based on the new reward token quantity and stake duration.",
        "params": {
          "_amount": "The amount of reward tokens to be added."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1274,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "stakeStartTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1276,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "stakeEndTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1278,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "rewardPerSecond",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1280,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "rewardTokenQuantity",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1282,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "totalStakedSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1284,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1286,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "accRewardTokenPerShare",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1288,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "accRewardTokenQuantity",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1290,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "lastUpdateRewardTimestamp",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1292,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "distributedReward",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1319,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "staker",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(Staker)1303_storage)"
      },
      {
        "astId": 1330,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "walletStakeUpdates",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_struct(StakeUpdate)1324_storage)dyn_storage)"
      },
      {
        "astId": 1332,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "claimRewardStartTimestamp",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1335,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "rewardUnlockPercentPerPeriod",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1337,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "claimPeriodDuration",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1341,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "isStakeWhitelisted",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1345,
        "contract": "contracts/MPROStake.sol:MPROStake",
        "label": "isUpdaterWhitelisted",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(StakeUpdate)1324_storage)dyn_storage": {
        "base": "t_struct(StakeUpdate)1324_storage",
        "encoding": "dynamic_array",
        "label": "struct MPROStake.StakeUpdate[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(StakeUpdate)1324_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MPROStake.StakeUpdate[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakeUpdate)1324_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Staker)1303_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MPROStake.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)1303_storage"
      },
      "t_struct(StakeUpdate)1324_storage": {
        "encoding": "inplace",
        "label": "struct MPROStake.StakeUpdate",
        "members": [
          {
            "astId": 1321,
            "contract": "contracts/MPROStake.sol:MPROStake",
            "label": "_blockTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1323,
            "contract": "contracts/MPROStake.sol:MPROStake",
            "label": "_updatedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Staker)1303_storage": {
        "encoding": "inplace",
        "label": "struct MPROStake.Staker",
        "members": [
          {
            "astId": 1294,
            "contract": "contracts/MPROStake.sol:MPROStake",
            "label": "staked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1296,
            "contract": "contracts/MPROStake.sol:MPROStake",
            "label": "balanceWithRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1298,
            "contract": "contracts/MPROStake.sol:MPROStake",
            "label": "claimedBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1300,
            "contract": "contracts/MPROStake.sol:MPROStake",
            "label": "reward",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1302,
            "contract": "contracts/MPROStake.sol:MPROStake",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}