{
  "address": "0xB852b50F2396E2d59f6fB9BcD5E530bb0Bc04Adb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redutionTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_reductionAmount",
          "type": "uint256"
        }
      ],
      "name": "AddDistributionReduction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Distributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_burnRate",
          "type": "uint256"
        }
      ],
      "name": "SetBurnRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "SetDistribiutionStartTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_roleManagerAddress",
          "type": "address"
        }
      ],
      "name": "SetDistributorTimeAdministratorRole",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_roleManagerAddress",
          "type": "address"
        }
      ],
      "name": "SetDistributorTimeAdministratorRoleManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_mproTokenAddress",
          "type": "address"
        }
      ],
      "name": "SetJAKANTToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTIONS_ADMINISTRATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "JAKANT_MASTER_DISTRIBUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_redutionTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reductionAmount",
          "type": "uint256"
        }
      ],
      "name": "addDistributionReduction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_msgSender",
          "type": "address"
        }
      ],
      "name": "approveAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_blocklist",
          "type": "bool"
        }
      ],
      "name": "blocklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amount",
          "type": "uint256[]"
        }
      ],
      "name": "distributeBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributionReductions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reductionTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daylyDistribution",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getBurnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributionReductions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reductionTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daylyDistribution",
              "type": "uint256"
            }
          ],
          "internalType": "struct JAKANTMasterDistributor.DistributionReduction[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialDaylyDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isBlocklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isDistributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isLister",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "mintAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_burnRate",
          "type": "uint256"
        }
      ],
      "name": "setBurnRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setDistributionStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleManagerAddress",
          "type": "address"
        }
      ],
      "name": "setDistributorTimeAdministratorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roleManagerAddress",
          "type": "address"
        }
      ],
      "name": "setDistributorTimeAdministratorRoleManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mproTokenAddress",
          "type": "address"
        }
      ],
      "name": "setJAKANTToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_msgSender",
          "type": "address"
        }
      ],
      "name": "transferAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whitelist",
          "type": "bool"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fd6bcc6ebe9c3e874192aeba9402079e56da4f60030e6a4154345754a02236d",
  "receipt": {
    "to": null,
    "from": "0x8B7C5D0F05Dc6A5Af60292A6061aE960b8a47274",
    "contractAddress": "0xB852b50F2396E2d59f6fB9BcD5E530bb0Bc04Adb",
    "transactionIndex": 91,
    "gasUsed": "2232588",
    "logsBloom": "0x
    "blockHash": "0xbb8d3a7fff17db8338393f070634beee94f3807cc1885eef561a2cabe2701c2e",
    "transactionHash": "0x6fd6bcc6ebe9c3e874192aeba9402079e56da4f60030e6a4154345754a02236d",
    "logs": [
      {
        "transactionIndex": 91,
        "blockNumber": 10462710,
        "transactionHash": "0x6fd6bcc6ebe9c3e874192aeba9402079e56da4f60030e6a4154345754a02236d",
        "address": "0xB852b50F2396E2d59f6fB9BcD5E530bb0Bc04Adb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b7c5d0f05dc6a5af60292a6061ae960b8a47274"
        ],
        "data": "0x",
        "logIndex": 183,
        "blockHash": "0xbb8d3a7fff17db8338393f070634beee94f3807cc1885eef561a2cabe2701c2e"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 10462710,
        "transactionHash": "0x6fd6bcc6ebe9c3e874192aeba9402079e56da4f60030e6a4154345754a02236d",
        "address": "0xB852b50F2396E2d59f6fB9BcD5E530bb0Bc04Adb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000008b7c5d0f05dc6a5af60292a6061ae960b8a47274",
          "0x0000000000000000000000008b7c5d0f05dc6a5af60292a6061ae960b8a47274"
        ],
        "data": "0x",
        "logIndex": 184,
        "blockHash": "0xbb8d3a7fff17db8338393f070634beee94f3807cc1885eef561a2cabe2701c2e"
      }
    ],
    "blockNumber": 10462710,
    "cumulativeGasUsed": "15000028",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8B7C5D0F05Dc6A5Af60292A6061aE960b8a47274"
  ],
  "numDeployments": 1,
  "solcInputHash": "83c3985bc9a3a1725a144f525ab813a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redutionTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reductionAmount\",\"type\":\"uint256\"}],\"name\":\"AddDistributionReduction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"SetBurnRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"SetDistribiutionStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roleManagerAddress\",\"type\":\"address\"}],\"name\":\"SetDistributorTimeAdministratorRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_roleManagerAddress\",\"type\":\"address\"}],\"name\":\"SetDistributorTimeAdministratorRoleManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_mproTokenAddress\",\"type\":\"address\"}],\"name\":\"SetJAKANTToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTIONS_ADMINISTRATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JAKANT_MASTER_DISTRIBUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redutionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reductionAmount\",\"type\":\"uint256\"}],\"name\":\"addDistributionReduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"}],\"name\":\"approveAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blocklist\",\"type\":\"bool\"}],\"name\":\"blocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"distributeBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionReductions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reductionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daylyDistribution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionReductions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reductionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daylyDistribution\",\"type\":\"uint256\"}],\"internalType\":\"struct JAKANTMasterDistributor.DistributionReduction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDaylyDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlocklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isLister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"setBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setDistributionStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleManagerAddress\",\"type\":\"address\"}],\"name\":\"setDistributorTimeAdministratorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleManagerAddress\",\"type\":\"address\"}],\"name\":\"setDistributorTimeAdministratorRoleManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mproTokenAddress\",\"type\":\"address\"}],\"name\":\"setJAKANTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The JAKANTMasterDistributor contract manages token distribution and related operations. It is responsible for distributing tokens to eligible recipients based on specified rules and configurations. This contract utilizes the AccessControl feature for role-based access control. This contract extends the Context and AccessControl contracts to leverage their functionality. Role-based access control allows specific roles to perform authorized actions within the contract, ensuring proper governance and security.\",\"events\":{\"Distributed(address,uint256)\":{\"details\":\"Modifier to check and enable distribution reduction configurations. This modifier is used to validate and enable distribution reduction configurations. It checks that the provided `_reductionTimestamp` and `_reductionAmount` meet certain criteria to ensure that reductions are allowed. The criteria include: - `_reductionTimestamp` must be greater than the timestamp of the last reduction. - `_reductionTimestamp` must be greater than or equal to the current timestamp plus 30 days. - `_reductionAmount` must be greater than or equal to half of the previous daily distribution. If all criteria are met, the modifier allows the decorated function or operation to proceed. Otherwise, it reverts with specific error messages.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addDistributionReduction(uint256,uint256)\":{\"details\":\"Adds a new distribution reduction to the contract. This external function allows an account with the DISTRIBUTIONS_ADMINISTRATOR_ROLE to add a new distribution reduction. A distribution reduction is a record that signifies a change in the distribution amount of tokens from a specific timestamp. The function includes a modifier `reductionEnabled` which likely contains logic to validate the input parameters `_redutionTimestamp` and `_reductionAmount`. It ensures that the reduction parameters meet certain criteria before allowing the addition of the new reduction. Once validated, the function appends a new `DistributionReduction` struct to the `distributionReductions` array. This struct includes the timestamp from which the reduction should take effect (`_redutionTimestamp`) and the new amount to be distributed from that timestamp (`_reductionAmount`).\",\"params\":{\"_reductionAmount\":\"The new amount to be distributed from the specified timestamp.\",\"_redutionTimestamp\":\"The timestamp from which the new distribution amount should apply.\"}},\"approveAllowed(address,address)\":{\"details\":\"Public view function to check if token approval is allowed. This function is used to enforce restrictions on token approvals based on blocklist criteria. It checks whether the spender or the caller of the function (message sender) are on a blocklist. If either of these addresses are blocklisted, the function reverts the transaction, preventing the approval operation. This check is crucial in scenarios where blocklisted addresses should not be permitted to interact with the token, including being approved to spend tokens on behalf of others. By incorporating this function into the approval process, the contract adds an additional layer of security and regulatory compliance. Being a `view` function, `approveAllowed` does not alter the state of the blockchain but reads from it to ensure compliance with the blocklist rules before any approval is granted.\",\"params\":{\"_msgSender\":\"The address initiating the approval request. Requirements: - Neither the spender (_spender) nor the initiator of the approval (_msgSender) can be   on the blocklist. If any of them are blocklisted, the function reverts with an error message.\",\"_spender\":\"The address being granted permission to spend tokens.\"}},\"blocklist(address,bool)\":{\"details\":\"External function to blocklist or unblocklist an account. This function allows an address with the `LISTER_ROLE` to either blocklist or remove an account from the contract's blocklist. Blocklisting an account may restrict it from performing certain operations or participating in specific aspects of the contract, as defined by the contract's logic. The function takes two parameters: - `_account`: The address to be either blocklisted or unblocklisted. - `_blocklist`: A boolean indicating whether to blocklist (`true`) or unblocklist (`false`)   the account. Before modifying the blocklist status, the function checks if the specified `_account` address holds any other roles within the contract (owner, lister, pauser, distributor). If the account has any of these roles, the function reverts to prevent the blocklisting of accounts with roles. Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only authorized entities can modify the blocklist.\",\"params\":{\"_account\":\"The address to be blocklisted or unblocklisted.\",\"_blocklist\":\"A boolean indicating whether to blocklist or unblocklist the account. Requirements: - The `_account` address must not be the zero address (`address(0)`).   This prevents accidentally modifying the zero address, which may have special significance. - The `_account` address must not have any other roles (owner, lister, pauser, distributor).   Accounts with these roles cannot be blocklisted.\"}},\"constructor\":{\"details\":\"Constructor for the contract. Initializes the contract by setting the distribution start timestamp, the distribution deadline, and assigning the OWNER_ROLE to the provided owner address. The distribution start timestamp is set to 14 days from the current block time, providing a preparation period before the distribution begins. The distribution deadline is set to 30 days from the current block time, creating a finite period for the distribution process. The OWNER_ROLE is crucial for contract administration and oversight, allowing the owner to manage the contract's key operations.\",\"params\":{\"_owner\":\"The address that will be assigned the OWNER_ROLE, granting administrative control over the contract.\"}},\"distribute(address,uint256)\":{\"details\":\"Distributes a specified amount of tokens to a given address. This function allows tokens to be minted and distributed to a specified address. It can only be called by an account with the JAKANT_MASTER_DISTRIBUTOR_ROLE. The function performs several checks before proceeding with the distribution: - It ensures that the amount to be distributed is greater than 0. - It verifies that the current timestamp is greater than or equal to the distributionStartTimestamp,   ensuring that the distribution period has started. - It checks that the total amount of tokens to be distributed (including the current distribution)   does not exceed the quantity available for distribution as determined by   getAvailableForDistributionTokenQuantity. If all checks pass, the function increments the distributedTokens state variable by the amount to be distributed and calls the mint function on the mproToken contract to mint the tokens to the specified address.\",\"params\":{\"_amount\":\"The amount of tokens to be distributed.\",\"_to\":\"The address to which the tokens will be distributed.\"}},\"distributeBulk(address[],uint256[])\":{\"details\":\"Distributes tokens to multiple addresses in bulk. This function allows for the bulk distribution of tokens to a list of addresses, each receiving a specified amount. It is designed to efficiently handle multiple distributions in a single transaction. The function can only be invoked by an account with the JAKANT_MASTER_DISTRIBUTOR_ROLE. The function performs the following checks and operations: - It ensures that the length of the `_to` address array matches the length of the `_amount` array,   ensuring each address has a corresponding amount to be distributed. - It then iterates over these arrays, calling the `distribute` function for each address-amount pair.   The `distribute` function is responsible for the actual minting and transferring of tokens,   as well as performing necessary checks such as ensuring the distribution period has started and   that the total distributed amount does not exceed the available quantity. Note: This function relies on the `distribute` function for individual distributions and inherits its checks and limitations. Each distribution in the loop is treated as a separate transaction in terms of checks and effects.\",\"params\":{\"_amount\":\"An array of token amounts to be distributed to the respective addresses.\",\"_to\":\"An array of addresses to which tokens will be distributed.\"}},\"getAllTokenDistribution()\":{\"details\":\"Calculates the total token distribution based on the initial daily distribution, the elapsed time, and any distribution reductions that have been set. The function first checks if the current timestamp is past the distribution start timestamp. If not, it returns 0, indicating that distribution has not started yet. If the distribution has started, it calculates the total distribution by taking into account the initial daily distribution and adjusting it based on any reductions that have occurred since the start of the distribution. The function iterates through each distribution reduction, checks if the current timestamp is greater than the reduction timestamp, and, if so, calculates the distribution for the time period since the last reduction. It updates the total distribution accordingly. The total distribution also includes the distribution for the period from the start timestamp until the first reduction or the current time, whichever comes first.\",\"returns\":{\"_0\":\"The total token distribution up to the current block timestamp.\"}},\"getBurnAmount(address,uint256)\":{\"details\":\"Calculates the amount to be burned based on the burn rate. This function calculates the amount of tokens that should be burned from a given transaction amount, based on the current burn rate. The burn rate is applied unless the sender's address is whitelisted, in which case no tokens are burned. The function performs the following operations: - It checks if the sender (`_from`) is whitelisted using the `mproRoleManager.isWhitelisted`   function. If the sender is whitelisted, the function returns 0, indicating no burn is applied. - If the sender is not whitelisted, the function calculates the burn amount by applying the   burn rate to the transaction amount (`_amount`). The burn rate is represented as a percentage   scaled by a factor of 10000 (e.g., a burn rate of 10% is represented as 1000). The calculated   burn amount is then returned. This mechanism allows for a dynamic burn policy where certain addresses can be exempted from burning, potentially for promotional or operational purposes.\",\"params\":{\"_amount\":\"The amount of tokens being transferred, from which the burn amount will be calculated.\",\"_from\":\"The address from which the tokens are being transferred.\"},\"returns\":{\"_0\":\"The calculated amount of tokens to be burned.\"}},\"getDistributionReductions()\":{\"details\":\"External view function to retrieve the list of distribution reductions. This function provides access to the array of `distributionReductions`, which contains records of all the reductions applied to the token distribution over time. Each record in the array is a `DistributionReduction` struct, detailing the timestamp when the reduction takes effect and the new daily distribution amount after the reduction. The function does not take any parameters and returns the entire array of `distributionReductions`. This can be particularly useful for front-end interfaces or other contract interactions that require visibility into the history and schedule of distribution reductions.\",\"returns\":{\"_0\":\"An array of `DistributionReduction` structs, representing the history of distribution reductions.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Public function to grant a specific role to an account. This function allows the contract owner to grant a specific role to the `_account` address. Roles are used to define permissions and responsibilities within the contract, and granting a role confers those associated privileges to the specified account. The function takes two parameters: - `_role`: The bytes32 identifier of the role to be granted. - `_account`: The address to which the role is to be granted. As a safeguard, the function enforces several preconditions before granting the role: - Ensures that the `_account` address is not blocklisted, maintaining the security and integrity   of the contract by preventing potentially malicious entities from gaining privileged access. - Checks that the `_account` address is not the zero address (`address(0)`), avoiding unintentional   role assignments to an address that may have special significance or represent \\\"no address\\\". - Verifies that the role has not already been burned, ensuring that only active, valid roles are   assignable. - Confirms that the role has not already been granted, upholding the principle of unique role assignments. This function can only be called by the contract owner, ensuring that role management is kept under tight control and preventing unauthorized role assignments.\",\"params\":{\"_account\":\"The address to which the role is to be granted. Requirements: - The contract caller must be the contract owner. - The `_account` must not be blocklisted or the zero address. - The `_role` must not be burned or already granted.\",\"_role\":\"The bytes32 identifier of the role to be granted.\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isBlocklisted(address)\":{\"details\":\"Public view function to check if an account is blocklisted. This function allows anyone to determine if a specific account is included in the contract's blocklist. An account that is blocklisted may be restricted from performing certain operations or participating in specific aspects of the contract, as defined by the contract's logic. The function checks the `blocklisted` mapping to see if the provided `_account` address is marked as blocklisted, returning a boolean value indicating the blocklist status. Being a `view` function, it only reads the blocklist status from the contract's state and does not modify the contract. This function is typically used in access control mechanisms where actions are conditional based on whether an account is blocklisted.\",\"params\":{\"_account\":\"The address to be checked for blocklist status.\"},\"returns\":{\"_0\":\"`true` if the account is blocklisted, `false` otherwise.\"}},\"isDistributor(address)\":{\"details\":\"Public view function to check if an address has the JAKANTMasterDistributor role. This function provides a straightforward method to verify if a specific address has been granted the JAKANTMasterDistributor role within the contract. The JAKANTMasterDistributor role is typically associated with permissions to manage and execute token distributions, making it a critical role for the operational aspects of the contract. The function takes a single parameter: - `_address`: The address of the account to check for the JAKANTMasterDistributor role. It returns a boolean value indicating whether the specified address has the JAKANTMasterDistributor role. This is particularly useful for confirming role assignments and managing access to distribution-related functions or sections of a dApp interface.\",\"params\":{\"_address\":\"The address of the account to check for the JAKANTMasterDistributor role.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the specified address has the JAKANTMasterDistributor role.\"}},\"isLister(address)\":{\"details\":\"Public view function to check if an account has the LISTER_ROLE. This function provides a convenient way to verify if a specific account has been granted the LISTER_ROLE within the contract. The LISTER_ROLE is typically associated with permissions to list items or manage lists within the contract's ecosystem. The function takes a single parameter: - `_account`: The address of the account to check for the LISTER_ROLE. It returns a boolean value indicating whether the specified account has the LISTER_ROLE. This can be particularly useful for front-end interfaces or other contract interactions that require a quick check of an account's roles or permissions.\",\"params\":{\"_account\":\"The address of the account to check for the LISTER_ROLE.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the specified account has the LISTER_ROLE.\"}},\"mintAllowed(address)\":{\"details\":\"External view function to check if minting is allowed for a given address. This function checks whether the provided `_minter` address is authorized to mint new tokens. In the current implementation, minting is restricted to the contract itself, signifying that minting operations are controlled internally and not open to external entities directly. The function takes a single parameter: - `_minter`: The address to be checked for minting permissions. It returns true if the `_minter` address is the same as the address of this contract, indicating that minting is allowed. Otherwise, it reverts the transaction with the message \\\"Distributor only\\\", enforcing the rule that only the contract itself can initiate minting operations.\",\"params\":{\"_minter\":\"The address to be checked for minting permissions.\"},\"returns\":{\"_0\":\"A boolean value indicating whether minting is allowed for the specified `_minter` address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Public function for an account to renounce a specific role it possesses. This function allows an account to voluntarily renounce a role it holds, effectively removing the associated permissions and responsibilities. It's a self-initiated action, meaning an account can only renounce roles that it possesses for itself, enhancing the security by preventing external entities from forcibly removing roles. The function takes two parameters: - `_role`: The bytes32 identifier of the role to be renounced. - `_account`: The address of the account renouncing the role. To ensure security and prevent   unintended renunciations, the function checks that `_account` is the same as `_msgSender()`. Before allowing the role to be renounced, the function performs the following check: - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent   accidental modifications of the zero address, which may have special significance. Upon successfully renouncing the role, the function updates the `assignedRoles` mapping and calls the internal `_revokeRole` function to formally remove the role.\",\"params\":{\"_account\":\"The address of the account renouncing the role. Requirements: - The `_account` address must not be the zero address (`address(0)`). - The `_account` must be the same as `_msgSender()`, ensuring that accounts can only renounce   roles for themselves.\",\"_role\":\"The bytes32 identifier of the role to be renounced.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Public function to revoke a specific role from an account. This function allows the contract owner to remove a previously granted role from the `_account` address. Roles are crucial for defining permissions and responsibilities within the contract, and revoking a role removes those associated privileges from the specified account. The function takes two parameters: - `_role`: The bytes32 identifier of the role to be revoked. - `_account`: The address from which the role is to be removed. Before revoking the role, the function performs the following checks: - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent accidental   modifications of the zero address, which may have special significance. - Ensures that the `_account` currently has the role to be revoked, providing a safeguard against   unnecessary or mistaken revocations. Access to this function is restricted to addresses with the `OWNER_ROLE`, ensuring that only contract owners or administrators can revoke roles. Upon successful revocation of the role, the function updates the `assignedRoles` mapping and calls the internal `_revokeRole` function.\",\"params\":{\"_account\":\"The address from which the role is to be removed. Requirements: - The `_account` address must not be the zero address (`address(0)`). - The `_account` must currently have the role that is being revoked.\",\"_role\":\"The bytes32 identifier of the role to be revoked.\"}},\"setBurnRate(uint256)\":{\"details\":\"Sets the burn rate for the contract. This external function allows an account with the OWNER_ROLE to set the burn rate, which is the percentage of the tokens that will be burned during certain operations. The burn rate is expressed as a percentage with a precision of up to three decimal places. For example, a burn rate of 1000 represents a 10% burn rate (1000 / 100 = 10%). A constraint is enforced to ensure that the burn rate does not exceed 10% (represented as 1000 in the contract). This safeguard prevents setting an excessively high burn rate that could adversely impact the token economy or operations of the contract. It's critical to input the correct value for the burn rate as it directly affects the token dynamics. Only authorized accounts with the OWNER_ROLE can perform this operation, ensuring that the burn rate is controlled and updated responsibly.\",\"params\":{\"_burnRate\":\"The new burn rate to be set, scaled by a factor of 100. For example, to set a                 burn rate of 1%, `_burnFee` should be 10.\"}},\"setDistributionStartTime(uint256)\":{\"details\":\"Sets a new distribution start time. This function allows the contract owner to set a new start time for the token distribution process. It ensures that the new start time is in the future, has not yet been surpassed, and is before the predefined distribution start timestamp deadline. This function can only be called if the distribution has not yet started (i.e., no tokens have been distributed). The function includes checks to ensure: 1. The distribution has not yet started (`distributedTokens` must be 0). 2. The new start time (`_startTime`) is in the future (greater than the current `block.timestamp`). 3. The new start time does not exceed the predefined deadline (`distributionStartTimestampDeadLine`). If all conditions are met, the function updates the `distributionStartTimestamp` and emits a `SetDistribiutionStartTime` event with the new start time.\",\"params\":{\"_startTime\":\"The new start time for token distribution.\"}},\"setDistributorTimeAdministratorRole(address)\":{\"details\":\"Assigns the DISTRIBUTIONS_ADMINISTRATOR_ROLE to a specified address. This function allows an account with the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to delegate the responsibilities of distribution time administration to a specific account. This role is crucial for managing the distribution schedule and ensuring the proper administration of the distribution process. The function includes checks to ensure: 1. The caller has the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role, allowing them to manage this role. 2. The DISTRIBUTIONS_ADMINISTRATOR_ROLE has not been burned (permanently deactivated). 3. The DISTRIBUTIONS_ADMINISTRATOR_ROLE has not already been granted to another account. If the role is available and active, the function grants the DISTRIBUTIONS_ADMINISTRATOR_ROLE to the specified address, marks the role as assigned in the `assignedRoles` mapping, and emits a `SetDistributorTimeAdministratorRole` event with the address of the new role administrator.\",\"params\":{\"_roleManagerAddress\":\"The address to be assigned the DISTRIBUTIONS_ADMINISTRATOR_ROLE.\"}},\"setDistributorTimeAdministratorRoleManager(address)\":{\"details\":\"Assigns the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to a specified address. This function allows the contract owner to delegate the management of distribution time administrators to a specific account. This is crucial for decentralized management and control over the distribution process. The function includes checks to ensure: 1. The role has not been burned (permanently deactivated). 2. The role has not already been granted to another account. If the role is available and active, the function grants the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to the specified address, marks the role as assigned in the `assignedRoles` mapping, and emits a `SetDistributorTimeAdministratorRoleManager` event with the address of the new role manager.\",\"params\":{\"_roleManagerAddress\":\"The address to be assigned the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role.\"}},\"setJAKANTToken(address)\":{\"details\":\"Sets the address of the MPRO token contract. This function allows the contract owner to set or update the address of the MPRO token contract to be used in the distribution. It includes a check to ensure that the MPRO token address is not already set, preventing accidental overwriting of the token address. This is a critical function as it establishes the link to the MPRO token that will be distributed by this contract. The function can only be successfully called once, as the MPRO token address is intended to be immutable once set to prevent unauthorized changes. If the token address has not been set before, the function updates the `mproToken` state variable and emits a `SetJAKANTToken` event with the new MPRO token address.\",\"params\":{\"_mproTokenAddress\":\"The address of the MPRO token contract to be set.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAllowed(address,address,address)\":{\"details\":\"Public view function to check if a token transfer is allowed. This function is used to enforce restrictions on token transfers based on blocklist criteria. It checks whether any of the involved parties in a token transfer (the sender, receiver, and the caller of the function) are on a blocklist. If any of these addresses are blocklisted, the function reverts the transaction, preventing the transfer. Being a `view` function, it does not modify the state of the blockchain but reads from it. This function can be integrated into the token transfer process to add an additional layer of security and compliance, ensuring that tokens cannot be transferred by or to blocklisted addresses.\",\"params\":{\"_from\":\"The address attempting to send tokens.\",\"_msgSender\":\"The address initiating the transfer request. Requirements: - None of the involved addresses (_from, _to, and _msgSender) can be on the blocklist.   If any are blocklisted, the function reverts with an error message.\",\"_to\":\"The address intended to receive the tokens.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelist(address,bool)\":{\"details\":\"External function to whitelist or unwhitelist an account. This function allows an address with the `LISTER_ROLE` to either whitelist or remove an account from the contract's whitelist. Whitelisting typically grants certain privileges or exemptions to the whitelisted account, while removing an account from the whitelist revokes these privileges. The function takes two parameters: - `_account`: The address to be either whitelisted or removed from the whitelist. - `_whitelist`: A boolean indicating whether to whitelist (`true`) or unwhitelist (`false`)   the account. The function sets the whitelisting status of the specified account by updating the `whitelisted` mapping accordingly. Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only authorized entities can modify the whitelist.\",\"params\":{\"_account\":\"The address to be whitelisted or unwhitelisted.\",\"_whitelist\":\"A boolean indicating whether to whitelist or unwhitelist the account. Requirements: - The `_account` address must not be the zero address (`address(0)`).   This prevents accidentally modifying the zero address, which may have special significance.\"}}},\"stateVariables\":{\"SECONDS_PER_DAY\":{\"details\":\"Constant representing the number of seconds in a day. This constant defines the number of seconds in a day, which is used for time calculations within the contract. It is set to the standard value of 86,400 seconds per day.\"},\"blocklisted\":{\"details\":\"Internal mapping to manage blocklisted addresses. This mapping associates addresses (keys) with boolean values to maintain a list of addresses that are considered \\\"blocklisted\\\" within the contract's logic. If an address is included in this mapping with a `true` value, it indicates that the address is blocklisted and may be subject to certain restrictions or limitations imposed by the contract. The mapping is typically used in access control mechanisms and other parts of the contract's logic to determine the behavior or privileges associated with addresses based on their blocklist status.\"},\"burnRate\":{\"details\":\"Public variable representing the burn rate for tokens. This variable determines the burn rate for tokens within the contract, expressed as a percentage. A burn rate of 1000 corresponds to 10%, where a portion of tokens is burned during certain operations. A burn rate of 10000 would represent 100%. The value of this variable can be adjusted to control the rate at which tokens are burned during specific actions, impacting the total token supply over time.\"},\"distributedTokens\":{\"details\":\"Private variable to keep track of the total tokens distributed. This variable is used to maintain a count of the total tokens that have been distributed within the contract. It starts at zero and is updated whenever tokens are distributed to recipients. It serves as a record of the cumulative tokens distributed and is often used to enforce distribution limits or to check the available tokens for distribution.\"},\"distributionReductions\":{\"details\":\"Public array to store distribution reduction configurations. This dynamic array stores instances of the `DistributionReduction` struct, representing configurations for reducing the daily token distribution over time. Each element of the array specifies a different reduction configuration, and the array can grow as more configurations are added. These configurations determine when and how the daily distribution amount of tokens changes over time, allowing for flexibility in managing token distribution within the contract.\"},\"distributionStartTimestamp\":{\"details\":\"Timestamp indicating when token distribution starts. This private state variable stores the Unix timestamp (in seconds) that marks the beginning of the token distribution period. The value is set during the contract initialization and can be updated by specific functions within the contract, depending on the contract's logic. The distributionStartTimestamp is used in various functions to determine whether the distribution period has begun. This allows for conditional logic based on the time, such as enabling token distributions only after this timestamp is reached. Being a private variable, it can only be accessed and modified by functions within this contract, providing a controlled and secure way to manage the start of the distribution phase.\"},\"distributionStartTimestampDeadLine\":{\"details\":\"Private immutable variable representing the deadline for the distribution start timestamp. This variable is used to store an immutable timestamp that defines the deadline for the distribution start timestamp within the contract. It is typically set during contract initialization and remains constant throughout the contract's lifetime. The distribution start timestamp deadline indicates the latest permissible timestamp for starting the distribution of tokens. After this deadline, distribution start timestamps beyond this value will not be accepted.\"},\"initialDaylyDistribution\":{\"details\":\"Private constant representing the initial daily distribution of tokens. This constant defines the initial daily distribution of tokens within the contract. It represents a fixed amount of tokens that are distributed daily as part of a distribution mechanism. The value is expressed in the contract's token decimals, and it remains constant throughout the contract's lifetime.\"},\"whitelisted\":{\"details\":\"Internal mapping to manage whitelisted addresses. This mapping associates addresses (keys) with boolean values to maintain a list of addresses that are considered \\\"whitelisted\\\" within the contract's logic. If an address is included in this mapping with a `true` value, it indicates that the address is whitelisted and may have special privileges or exemptions within the contract. The mapping is typically used in access control mechanisms and other parts of the contract's logic to determine the behavior or privileges associated with addresses based on their whitelist status.\"}},\"title\":\"MPRO Master Distributor Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MPROMasterDistributor.sol\":\"JAKANTMasterDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/MPROMasterDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IJAKANTToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n}\\n\\n/**\\n * @title MPRO Master Distributor Contract\\n * @dev The JAKANTMasterDistributor contract manages token distribution and related operations.\\n * It is responsible for distributing tokens to eligible recipients based on specified rules and\\n * configurations. This contract utilizes the AccessControl feature for role-based access control.\\n *\\n * This contract extends the Context and AccessControl contracts to leverage their functionality.\\n * Role-based access control allows specific roles to perform authorized actions within the contract,\\n * ensuring proper governance and security.\\n */\\ncontract JAKANTMasterDistributor is Context, AccessControl, Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Struct representing a distribution reduction configuration.\\n     *\\n     * This struct defines a configuration for reducing the daily token distribution over time. It\\n     * consists of two fields:\\n     * - `reductionTimestamp`: The timestamp at which the reduction in distribution should take effect.\\n     * - `daylyDistribution`: The daily distribution amount of tokens after the reduction.\\n     *\\n     * Instances of this struct are typically used in an array to specify different reduction\\n     * configurations over time. The reduction timestamp marks when the daily distribution amount\\n     * should change.\\n     */\\n    struct DistributionReduction {\\n        uint256 reductionTimestamp;\\n        uint256 daylyDistribution;\\n    }\\n\\n    /**\\n     * @dev Constant representing the number of seconds in a day.\\n     *\\n     * This constant defines the number of seconds in a day, which is used for time calculations\\n     * within the contract. It is set to the standard value of 86,400 seconds per day.\\n     */\\n    uint256 constant SECONDS_PER_DAY = 600;\\n\\n    bytes32 public constant JAKANT_MASTER_DISTRIBUTOR_ROLE =\\n        keccak256(\\\"JAKANT_MASTER_DISTRIBUTOR_ROLE\\\");\\n    bytes32 public constant DISTRIBUTIONS_ADMINISTRATOR_ROLE =\\n        keccak256(\\\"DISTRIBUTIONS_ADMINISTRATOR_ROLE\\\");\\n    bytes32 public constant DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER =\\n        keccak256(\\\"DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER\\\");\\n    bytes32 public constant LISTER_ROLE = keccak256(\\\"LISTER_ROLE\\\");\\n\\n    IJAKANTToken private mproToken;\\n\\n    mapping(bytes32 => bool) private assignedRoles;\\n\\n    /**\\n     * @dev Internal mapping to manage blocklisted addresses.\\n     *\\n     * This mapping associates addresses (keys) with boolean values to maintain a list of addresses\\n     * that are considered \\\"blocklisted\\\" within the contract's logic. If an address is included in\\n     * this mapping with a `true` value, it indicates that the address is blocklisted and may be\\n     * subject to certain restrictions or limitations imposed by the contract.\\n     *\\n     * The mapping is typically used in access control mechanisms and other parts of the contract's\\n     * logic to determine the behavior or privileges associated with addresses based on their\\n     * blocklist status.\\n     */\\n    mapping(address => bool) internal blocklisted;\\n\\n    /**\\n     * @dev Internal mapping to manage whitelisted addresses.\\n     *\\n     * This mapping associates addresses (keys) with boolean values to maintain a list of addresses\\n     * that are considered \\\"whitelisted\\\" within the contract's logic. If an address is included in\\n     * this mapping with a `true` value, it indicates that the address is whitelisted and may have\\n     * special privileges or exemptions within the contract.\\n     *\\n     * The mapping is typically used in access control mechanisms and other parts of the contract's\\n     * logic to determine the behavior or privileges associated with addresses based on their\\n     * whitelist status.\\n     */\\n    mapping(address => bool) internal whitelisted;\\n\\n    /**\\n     * @dev Timestamp indicating when token distribution starts.\\n     *\\n     * This private state variable stores the Unix timestamp (in seconds) that marks the beginning\\n     * of the token distribution period. The value is set during the contract initialization and\\n     * can be updated by specific functions within the contract, depending on the contract's logic.\\n     *\\n     * The distributionStartTimestamp is used in various functions to determine whether the\\n     * distribution period has begun. This allows for conditional logic based on the time, such as\\n     * enabling token distributions only after this timestamp is reached.\\n     *\\n     * Being a private variable, it can only be accessed and modified by functions within this\\n     * contract, providing a controlled and secure way to manage the start of the distribution phase.\\n     */\\n    uint256 public distributionStartTimestamp;\\n\\n    /**\\n     * @dev Private immutable variable representing the deadline for the distribution start timestamp.\\n     *\\n     * This variable is used to store an immutable timestamp that defines the deadline for the\\n     * distribution start timestamp within the contract. It is typically set during contract\\n     * initialization and remains constant throughout the contract's lifetime.\\n     *\\n     * The distribution start timestamp deadline indicates the latest permissible timestamp for\\n     * starting the distribution of tokens. After this deadline, distribution start timestamps\\n     * beyond this value will not be accepted.\\n     */\\n    uint256 private immutable distributionStartTimestampDeadLine;\\n\\n    /**\\n     * @dev Private variable to keep track of the total tokens distributed.\\n     *\\n     * This variable is used to maintain a count of the total tokens that have been distributed\\n     * within the contract. It starts at zero and is updated whenever tokens are distributed to\\n     * recipients.\\n     *\\n     * It serves as a record of the cumulative tokens distributed and is often used to enforce\\n     * distribution limits or to check the available tokens for distribution.\\n     */\\n    uint256 public distributedTokens = 0;\\n\\n    /**\\n     * @dev Private constant representing the initial daily distribution of tokens.\\n     *\\n     * This constant defines the initial daily distribution of tokens within the contract. It\\n     * represents a fixed amount of tokens that are distributed daily as part of a distribution\\n     * mechanism.\\n     *\\n     * The value is expressed in the contract's token decimals, and it remains constant throughout\\n     * the contract's lifetime.\\n     */\\n    uint256 public constant initialDaylyDistribution = 250_000 * 10 ** 18;\\n\\n    /**\\n     * @dev Public array to store distribution reduction configurations.\\n     *\\n     * This dynamic array stores instances of the `DistributionReduction` struct, representing\\n     * configurations for reducing the daily token distribution over time. Each element of the array\\n     * specifies a different reduction configuration, and the array can grow as more configurations\\n     * are added.\\n     *\\n     * These configurations determine when and how the daily distribution amount of tokens changes\\n     * over time, allowing for flexibility in managing token distribution within the contract.\\n     */\\n    DistributionReduction[] public distributionReductions;\\n\\n    /**\\n     * @dev Public variable representing the burn rate for tokens.\\n     *\\n     * This variable determines the burn rate for tokens within the contract, expressed as a\\n     * percentage. A burn rate of 1000 corresponds to 10%, where a portion of tokens is burned\\n     * during certain operations. A burn rate of 10000 would represent 100%.\\n     *\\n     * The value of this variable can be adjusted to control the rate at which tokens are burned\\n     * during specific actions, impacting the total token supply over time.\\n     */\\n    uint256 public burnRate = 1000; // 10000 = 100%\\n\\n    /**\\n     * @dev Modifier to check and enable distribution reduction configurations.\\n     *\\n     * This modifier is used to validate and enable distribution reduction configurations. It checks\\n     * that the provided `_reductionTimestamp` and `_reductionAmount` meet certain criteria to ensure\\n     * that reductions are allowed. The criteria include:\\n     *\\n     * - `_reductionTimestamp` must be greater than the timestamp of the last reduction.\\n     * - `_reductionTimestamp` must be greater than or equal to the current timestamp plus 30 days.\\n     * - `_reductionAmount` must be greater than or equal to half of the previous daily distribution.\\n     *\\n     * If all criteria are met, the modifier allows the decorated function or operation to proceed.\\n     * Otherwise, it reverts with specific error messages.\\n     */\\n\\n    event Distributed(address indexed _to, uint256 amount);\\n    event SetDistribiutionStartTime(uint256 _startTime);\\n    event AddDistributionReduction(\\n        uint256 _redutionTimestamp,\\n        uint256 _reductionAmount\\n    );\\n    event SetJAKANTToken(address _mproTokenAddress);\\n    event SetBurnRate(uint256 _burnRate);\\n    event SetDistributorTimeAdministratorRoleManager(\\n        address _roleManagerAddress\\n    );\\n    event SetDistributorTimeAdministratorRole(address _roleManagerAddress);\\n\\n    /**\\n     * @dev Modifier that enforces rules for reduction in distribution. It ensures that a new distribution\\n     * reduction can only be set after a certain period from the last reduction, and the new reduction amount\\n     * must be within specific limits compared to the last reduction amount.\\n     *\\n     * The modifier checks against the last entry in the `distributionReductions` array (if it exists) to\\n     * enforce the following:\\n     * 1. The new reduction timestamp must be at least 183 days after the last reduction's timestamp.\\n     * 2. The new daily distribution amount must not be more than half of the last reduction's daily distribution.\\n     * 3. The new daily distribution amount must not be more than the last reduction's daily distribution multiplied by 2.\\n     *\\n     * This ensures a controlled and limited reduction of distribution over time.\\n     *\\n     * @param _reductionTimestamp The timestamp when the new reduction is intended to start.\\n     * @param _reductionAmount The new daily distribution amount after the reduction.\\n     */\\n    modifier reductionEnabled(\\n        uint256 _reductionTimestamp,\\n        uint256 _reductionAmount\\n    ) {\\n        DistributionReduction memory lastReduction;\\n\\n        if (distributionReductions.length > 0) {\\n            lastReduction = distributionReductions[\\n                distributionReductions.length - 1\\n            ];\\n        } else {\\n            lastReduction = DistributionReduction(\\n                distributionStartTimestamp,\\n                initialDaylyDistribution\\n            );\\n        }\\n\\n        require(\\n            _reductionTimestamp >=\\n                lastReduction.reductionTimestamp + 10 minutes,\\n            \\\"JAKANTMasterDistributor: New redution start time cannot be lower than 10 minutes after last redution timestamp\\\"\\n        );\\n        require(\\n            _reductionAmount >= lastReduction.daylyDistribution.div(2),\\n            \\\"JAKANTMasterDistributor: New reduction amount cannot be greater than half of the last reduction amount\\\"\\n        );\\n        require(\\n            _reductionAmount <= lastReduction.daylyDistribution.mul(2),\\n            \\\"MPROMasterDistributor: New reduction amount cannot be greater than the last reduction amount multiplied by 2\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to ensure that the provided address is not blocklisted.\\n     *\\n     * This modifier is used to validate that the `_account` address passed as an argument is not\\n     * blocklisted within the contract. Addresses that are blocklisted may have certain restrictions\\n     * or limitations imposed on them by the contract, and this modifier helps prevent blocklisted\\n     * addresses from participating in specific operations.\\n     *\\n     * If the `_account` address is blocklisted, the contract will revert with the message \\\"Action on blocklisted account\\\"\\n     * If the address is not blocklisted, the modified function or operation is executed as intended.\\n     */\\n    modifier notBlocklisted(address _account) {\\n        require(\\n            !blocklisted[_account],\\n            \\\"JAKANTMasterDistributor: Action on blocklisted account\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to ensure that the provided address is not the zero address.\\n     *\\n     * This modifier is used to validate that the `_account` address passed as an argument is not\\n     * equal to the zero address (`address(0)`). Preventing the zero address from being used in\\n     * certain contexts can help avoid unexpected behavior, as the zero address often has special\\n     * significance.\\n     *\\n     * If the `_account` address is the zero address, the contract will revert with the error code \\\"Action on address zero\\\"\\n     * If the address is valid (not zero), the modified function or operation is executed.\\n     */\\n    modifier notZeroAddress(address _account) {\\n        require(\\n            _account != address(0),\\n            \\\"JAKANTMasterDistributor: Action on address zero\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that ensures a role has not already been assigned to an account. This modifier checks\\n     * the status of a role in the `assignedRoles` mapping. If the role has already been granted (i.e., the\\n     * corresponding value in the mapping is `true`), the function call is reverted with an error message.\\n     * This is used to prevent roles from being granted to more than one account, ensuring unique assignment\\n     * of responsibilities or permissions within the contract.\\n     *\\n     * @param _role The bytes32 identifier of the role to check.\\n     */\\n    modifier notGranted(bytes32 _role) {\\n        require(\\n            !assignedRoles[_role],\\n            \\\"JAKANTMasterDistributor: Role already granted to another account\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks if a role has not been marked as burned. A role is considered burned if\\n     * it has been explicitly revoked and cannot be reassigned. This is typically done by assigning the role\\n     * to the zero address. The modifier uses the `hasRole` function to check the status of the role.\\n     * If the role is found to be assigned to the zero address, indicating that it has been burned, the\\n     * function call is reverted with an error message. This prevents operations on roles that are meant to\\n     * be permanently inactive or revoked.\\n     *\\n     * @param _role The bytes32 identifier of the role to check.\\n     */\\n    modifier notBurned(bytes32 _role) {\\n        require(\\n            !hasRole(_role, address(0)),\\n            \\\"JAKANTMasterDistributor: Role is already burned\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor for the contract. Initializes the contract by setting the distribution start timestamp,\\n     * the distribution deadline, and assigning the OWNER_ROLE to the provided owner address. The distribution\\n     * start timestamp is set to 14 days from the current block time, providing a preparation period before the\\n     * distribution begins. The distribution deadline is set to 30 days from the current block time, creating a\\n     * finite period for the distribution process. The OWNER_ROLE is crucial for contract administration and\\n     * oversight, allowing the owner to manage the contract's key operations.\\n     *\\n     * @param _owner The address that will be assigned the OWNER_ROLE, granting administrative control over the contract.\\n     */\\n    constructor(address _owner) {\\n        // Set the distribution start timestamp to 14 days from the current block time.\\n        // This delay allows for a preparation period before the distribution begins.\\n        distributionStartTimestamp = block.timestamp + 1 days;\\n        // Set the deadline for the distribution period to 30 days from the current block time.\\n        // This sets a finite period for the distribution process, ensuring a clear end date.\\n        distributionStartTimestampDeadLine = block.timestamp + 10 days;\\n        // Assign the OWNER_ROLE to the provided owner address. This role typically includes\\n        // elevated privileges and is crucial for contract administration and oversight.\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @dev Calculates the total token distribution based on the initial daily distribution, the elapsed time,\\n     * and any distribution reductions that have been set. The function first checks if the current timestamp\\n     * is past the distribution start timestamp. If not, it returns 0, indicating that distribution has not\\n     * started yet. If the distribution has started, it calculates the total distribution by taking into\\n     * account the initial daily distribution and adjusting it based on any reductions that have occurred\\n     * since the start of the distribution.\\n     *\\n     * The function iterates through each distribution reduction, checks if the current timestamp is greater\\n     * than the reduction timestamp, and, if so, calculates the distribution for the time period since the last\\n     * reduction. It updates the total distribution accordingly. The total distribution also includes the\\n     * distribution for the period from the start timestamp until the first reduction or the current time,\\n     * whichever comes first.\\n     *\\n     * @return The total token distribution up to the current block timestamp.\\n     */\\n    function getAllTokenDistribution() public view returns (uint256) {\\n        if (block.timestamp < distributionStartTimestamp) {\\n            return 0;\\n        }\\n\\n        uint256 totalDistribution = initialDaylyDistribution;\\n        // Time periods since last distribution\\n        uint256 timeElapsed = block.timestamp - distributionStartTimestamp;\\n        uint256 daysElapsed = timeElapsed / SECONDS_PER_DAY;\\n\\n        uint256 reductionEndTimestamp = block.timestamp;\\n\\n        if (distributionReductions.length == 0) {\\n            return totalDistribution + daysElapsed * initialDaylyDistribution;\\n        }\\n\\n        for (\\n            uint256 index = distributionReductions.length - 1;\\n            index >= 0;\\n            index--\\n        ) {\\n            DistributionReduction\\n                memory distributionReduction = distributionReductions[index];\\n\\n            // Check if the current timestamp is greater than the reduction timestamp\\n            if (block.timestamp >= distributionReduction.reductionTimestamp) {\\n                // Calculate the number of days in the current period\\n                uint256 daysInCurrentPeriod = (reductionEndTimestamp -\\n                    distributionReduction.reductionTimestamp) / SECONDS_PER_DAY;\\n                totalDistribution +=\\n                    distributionReduction.daylyDistribution +\\n                    (daysInCurrentPeriod *\\n                        distributionReduction.daylyDistribution);\\n                // Update timestamp for previous period\\n                reductionEndTimestamp = distributionReduction\\n                    .reductionTimestamp;\\n                // Update daysElapsed for previous period\\n                daysElapsed -= daysInCurrentPeriod;\\n                // Check if we have reached the start of the distribution reduction\\n                if (index == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        totalDistribution += daysElapsed * initialDaylyDistribution;\\n\\n        return totalDistribution;\\n    }\\n\\n    /**\\n     * @dev Calculates the quantity of tokens that are available for distribution at the current time.\\n     * It determines this quantity by subtracting the total number of tokens already distributed\\n     * (`distributedTokens`) from the total number of tokens that should have been distributed up to the\\n     * current point in time (`getAllTokenDistribution`). This function provides insight into the remaining\\n     * token balance that is available for distribution, ensuring that the distribution does not exceed\\n     * the planned amount at any given point.\\n     *\\n     * Note that this is a private function and can only be called within the contract itself. This function\\n     * is typically used internally to manage and track the distribution process accurately.\\n     *\\n     * @return The quantity of tokens that are currently available for distribution.\\n     */\\n    function getAvailableForDistributionTokenQuantity()\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return getAllTokenDistribution().sub(distributedTokens);\\n    }\\n\\n    /**\\n     * @dev Distributes a specified amount of tokens to a given address.\\n     *\\n     * This function allows tokens to be minted and distributed to a specified address.\\n     * It can only be called by an account with the JAKANT_MASTER_DISTRIBUTOR_ROLE.\\n     * The function performs several checks before proceeding with the distribution:\\n     * - It ensures that the amount to be distributed is greater than 0.\\n     * - It verifies that the current timestamp is greater than or equal to the distributionStartTimestamp,\\n     *   ensuring that the distribution period has started.\\n     * - It checks that the total amount of tokens to be distributed (including the current distribution)\\n     *   does not exceed the quantity available for distribution as determined by\\n     *   getAvailableForDistributionTokenQuantity.\\n     *\\n     * If all checks pass, the function increments the distributedTokens state variable by the amount\\n     * to be distributed and calls the mint function on the mproToken contract to mint the tokens\\n     * to the specified address.\\n     *\\n     * @param _to The address to which the tokens will be distributed.\\n     * @param _amount The amount of tokens to be distributed.\\n     */\\n    function distribute(\\n        address _to,\\n        uint256 _amount\\n    ) public onlyRole(JAKANT_MASTER_DISTRIBUTOR_ROLE) {\\n        require(_amount > 0, \\\"amount must be greater than 0\\\");\\n        require(\\n            block.timestamp >= distributionStartTimestamp,\\n            \\\"JAKANTMasterDistributor: Minting is not enabled yet\\\"\\n        );\\n        require(\\n            _amount <= getAvailableForDistributionTokenQuantity(),\\n            \\\"JAKANTMasterDistributor: Minting limit exceeded\\\"\\n        );\\n        distributedTokens += _amount;\\n        mproToken.mint(_to, _amount);\\n\\n        emit Distributed(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Distributes tokens to multiple addresses in bulk.\\n     *\\n     * This function allows for the bulk distribution of tokens to a list of addresses, each receiving\\n     * a specified amount. It is designed to efficiently handle multiple distributions in a single transaction.\\n     * The function can only be invoked by an account with the JAKANT_MASTER_DISTRIBUTOR_ROLE.\\n     *\\n     * The function performs the following checks and operations:\\n     * - It ensures that the length of the `_to` address array matches the length of the `_amount` array,\\n     *   ensuring each address has a corresponding amount to be distributed.\\n     * - It then iterates over these arrays, calling the `distribute` function for each address-amount pair.\\n     *   The `distribute` function is responsible for the actual minting and transferring of tokens,\\n     *   as well as performing necessary checks such as ensuring the distribution period has started and\\n     *   that the total distributed amount does not exceed the available quantity.\\n     *\\n     * Note: This function relies on the `distribute` function for individual distributions and inherits\\n     * its checks and limitations. Each distribution in the loop is treated as a separate transaction in\\n     * terms of checks and effects.\\n     *\\n     * @param _to An array of addresses to which tokens will be distributed.\\n     * @param _amount An array of token amounts to be distributed to the respective addresses.\\n     */\\n    function distributeBulk(\\n        address[] memory _to,\\n        uint256[] memory _amount\\n    ) public onlyRole(JAKANT_MASTER_DISTRIBUTOR_ROLE) {\\n        require(\\n            _to.length == _amount.length,\\n            \\\"to and amount arrays must have the same length\\\"\\n        );\\n        for (uint256 i = 0; i < _to.length; i++) {\\n            distribute(_to[i], _amount[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets a new distribution start time.\\n     *\\n     * This function allows the contract owner to set a new start time\\n     * for the token distribution process. It ensures that the new start time is in the future, has not yet been\\n     * surpassed, and is before the predefined distribution start timestamp deadline. This function can only be\\n     * called if the distribution has not yet started (i.e., no tokens have been distributed).\\n     *\\n     * The function includes checks to ensure:\\n     * 1. The distribution has not yet started (`distributedTokens` must be 0).\\n     * 2. The new start time (`_startTime`) is in the future (greater than the current `block.timestamp`).\\n     * 3. The new start time does not exceed the predefined deadline (`distributionStartTimestampDeadLine`).\\n     *\\n     * If all conditions are met, the function updates the `distributionStartTimestamp` and emits a\\n     * `SetDistribiutionStartTime` event with the new start time.\\n     *\\n     * @param _startTime The new start time for token distribution.\\n     */\\n    function setDistributionStartTime(uint256 _startTime) external onlyOwner {\\n        require(\\n            distributedTokens == 0,\\n            \\\"JAKANTMasterDistributor: Distribution start time cannot be changed after distribution has started\\\"\\n        );\\n        require(\\n            _startTime > block.timestamp,\\n            \\\"JAKANTMasterDistributor: Distribution start time cannot be lower than current time\\\"\\n        );\\n        require(\\n            _startTime <= distributionStartTimestampDeadLine,\\n            \\\"JAKANTMasterDistributor: Distribution start time must be less than distributionStartTimeDeadline\\\"\\n        );\\n\\n        distributionStartTimestamp = _startTime;\\n\\n        emit SetDistribiutionStartTime(_startTime);\\n    }\\n\\n    /**\\n     * @dev Adds a new distribution reduction to the contract.\\n     *\\n     * This external function allows an account with the DISTRIBUTIONS_ADMINISTRATOR_ROLE to add a\\n     * new distribution reduction. A distribution reduction is a record that signifies a change in the\\n     * distribution amount of tokens from a specific timestamp.\\n     *\\n     * The function includes a modifier `reductionEnabled` which likely contains logic to validate the\\n     * input parameters `_redutionTimestamp` and `_reductionAmount`. It ensures that the reduction\\n     * parameters meet certain criteria before allowing the addition of the new reduction.\\n     *\\n     * Once validated, the function appends a new `DistributionReduction` struct to the\\n     * `distributionReductions` array. This struct includes the timestamp from which the reduction\\n     * should take effect (`_redutionTimestamp`) and the new amount to be distributed from that\\n     * timestamp (`_reductionAmount`).\\n     *\\n     * @param _redutionTimestamp The timestamp from which the new distribution amount should apply.\\n     * @param _reductionAmount The new amount to be distributed from the specified timestamp.\\n     */\\n    function addDistributionReduction(\\n        uint256 _redutionTimestamp,\\n        uint256 _reductionAmount\\n    )\\n        external\\n        onlyRole(DISTRIBUTIONS_ADMINISTRATOR_ROLE)\\n        reductionEnabled(_redutionTimestamp, _reductionAmount)\\n    {\\n        distributionReductions.push(\\n            DistributionReduction(_redutionTimestamp, _reductionAmount)\\n        );\\n\\n        emit AddDistributionReduction(_redutionTimestamp, _reductionAmount);\\n    }\\n\\n    /**\\n     * @dev Sets the address of the MPRO token contract. This function allows the contract owner to set or\\n     * update the address of the MPRO token contract to be used in the distribution. It includes a check to ensure\\n     * that the MPRO token address is not already set, preventing accidental overwriting of the token address.\\n     *\\n     * This is a critical function as it establishes the link to the MPRO token that will be distributed by this\\n     * contract. The function can only be successfully called once, as the MPRO token address is intended to be\\n     * immutable once set to prevent unauthorized changes.\\n     *\\n     * If the token address has not been set before, the function updates the `mproToken` state variable and emits\\n     * a `SetJAKANTToken` event with the new MPRO token address.\\n     *\\n     * @param _mproTokenAddress The address of the MPRO token contract to be set.\\n     */\\n    function setJAKANTToken(address _mproTokenAddress) external onlyOwner {\\n        require(\\n            mproToken == IJAKANTToken(address(0)),\\n            \\\"JAKANTMasterDistributor: MPRO token is already set\\\"\\n        );\\n        mproToken = IJAKANTToken(_mproTokenAddress);\\n        emit SetJAKANTToken(_mproTokenAddress);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount to be burned based on the burn rate.\\n     *\\n     * This function calculates the amount of tokens that should be burned from a given transaction\\n     * amount, based on the current burn rate. The burn rate is applied unless the sender's address\\n     * is whitelisted, in which case no tokens are burned.\\n     *\\n     * The function performs the following operations:\\n     * - It checks if the sender (`_from`) is whitelisted using the `mproRoleManager.isWhitelisted`\\n     *   function. If the sender is whitelisted, the function returns 0, indicating no burn is applied.\\n     * - If the sender is not whitelisted, the function calculates the burn amount by applying the\\n     *   burn rate to the transaction amount (`_amount`). The burn rate is represented as a percentage\\n     *   scaled by a factor of 10000 (e.g., a burn rate of 10% is represented as 1000). The calculated\\n     *   burn amount is then returned.\\n     *\\n     * This mechanism allows for a dynamic burn policy where certain addresses can be exempted from\\n     * burning, potentially for promotional or operational purposes.\\n     *\\n     * @param _from The address from which the tokens are being transferred.\\n     * @param _amount The amount of tokens being transferred, from which the burn amount will be calculated.\\n     * @return The calculated amount of tokens to be burned.\\n     */\\n    function getBurnAmount(\\n        address _from,\\n        uint256 _amount\\n    ) external view returns (uint256) {\\n        // If the sender is whitelisted, no burn fee is applied\\n        if (isWhitelisted(_from)) {\\n            return 0;\\n        }\\n        return _amount.mul(burnRate).div(10000);\\n    }\\n\\n    /**\\n     * @dev Sets the burn rate for the contract.\\n     *\\n     * This external function allows an account with the OWNER_ROLE to set the burn rate,\\n     * which is the percentage of the tokens that will be burned during certain operations.\\n     * The burn rate is expressed as a percentage with a precision of up to three decimal places.\\n     * For example, a burn rate of 1000 represents a 10% burn rate (1000 / 100 = 10%).\\n     *\\n     * A constraint is enforced to ensure that the burn rate does not exceed 10% (represented as 1000\\n     * in the contract). This safeguard prevents setting an excessively high burn rate that could\\n     * adversely impact the token economy or operations of the contract.\\n     *\\n     * It's critical to input the correct value for the burn rate as it directly affects the token\\n     * dynamics. Only authorized accounts with the OWNER_ROLE can perform this operation, ensuring\\n     * that the burn rate is controlled and updated responsibly.\\n     *\\n     * @param _burnRate The new burn rate to be set, scaled by a factor of 100. For example, to set a\\n     *                 burn rate of 1%, `_burnFee` should be 10.\\n     */\\n    function setBurnRate(uint256 _burnRate) external onlyOwner {\\n        require(\\n            _burnRate <= 1000,\\n            \\\"JAKANTMasterDistributor: Burn rate cannot be greater than or equal to 10%\\\"\\n        );\\n        burnRate = _burnRate;\\n        emit SetBurnRate(_burnRate);\\n    }\\n\\n    /**\\n     * @dev Assigns the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to a specified address. This function\\n     * allows the contract owner to delegate the management of distribution time administrators to a specific\\n     * account. This is crucial for decentralized management and control over the distribution process.\\n     *\\n     * The function includes checks to ensure:\\n     * 1. The role has not been burned (permanently deactivated).\\n     * 2. The role has not already been granted to another account.\\n     *\\n     * If the role is available and active, the function grants the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role\\n     * to the specified address, marks the role as assigned in the `assignedRoles` mapping, and emits a\\n     * `SetDistributorTimeAdministratorRoleManager` event with the address of the new role manager.\\n     *\\n     * @param _roleManagerAddress The address to be assigned the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role.\\n     */\\n    function setDistributorTimeAdministratorRoleManager(\\n        address _roleManagerAddress\\n    )\\n        external\\n        onlyOwner\\n        notBurned(DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER)\\n        notGranted(DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER)\\n    {\\n        _grantRole(\\n            DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER,\\n            _roleManagerAddress\\n        );\\n        assignedRoles[DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER] = true;\\n        emit SetDistributorTimeAdministratorRoleManager(_roleManagerAddress);\\n    }\\n\\n    /**\\n     * @dev Assigns the DISTRIBUTIONS_ADMINISTRATOR_ROLE to a specified address. This function allows an account\\n     * with the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to delegate the responsibilities of distribution\\n     * time administration to a specific account. This role is crucial for managing the distribution schedule\\n     * and ensuring the proper administration of the distribution process.\\n     *\\n     * The function includes checks to ensure:\\n     * 1. The caller has the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role, allowing them to manage this role.\\n     * 2. The DISTRIBUTIONS_ADMINISTRATOR_ROLE has not been burned (permanently deactivated).\\n     * 3. The DISTRIBUTIONS_ADMINISTRATOR_ROLE has not already been granted to another account.\\n     *\\n     * If the role is available and active, the function grants the DISTRIBUTIONS_ADMINISTRATOR_ROLE to the\\n     * specified address, marks the role as assigned in the `assignedRoles` mapping, and emits a\\n     * `SetDistributorTimeAdministratorRole` event with the address of the new role administrator.\\n     *\\n     * @param _roleManagerAddress The address to be assigned the DISTRIBUTIONS_ADMINISTRATOR_ROLE.\\n     */\\n    function setDistributorTimeAdministratorRole(\\n        address _roleManagerAddress\\n    )\\n        external\\n        onlyRole(DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER)\\n        notBurned(DISTRIBUTIONS_ADMINISTRATOR_ROLE)\\n        notGranted(DISTRIBUTIONS_ADMINISTRATOR_ROLE)\\n    {\\n        _grantRole(DISTRIBUTIONS_ADMINISTRATOR_ROLE, _roleManagerAddress);\\n        assignedRoles[DISTRIBUTIONS_ADMINISTRATOR_ROLE] = true;\\n        emit SetDistributorTimeAdministratorRole(_roleManagerAddress);\\n    }\\n\\n    /**\\n     * @dev Public function to grant a specific role to an account.\\n     *\\n     * This function allows the contract owner to grant a specific role to the `_account` address. Roles\\n     * are used to define permissions and responsibilities within the contract, and granting a role confers\\n     * those associated privileges to the specified account.\\n     *\\n     * The function takes two parameters:\\n     * - `_role`: The bytes32 identifier of the role to be granted.\\n     * - `_account`: The address to which the role is to be granted.\\n     *\\n     * As a safeguard, the function enforces several preconditions before granting the role:\\n     * - Ensures that the `_account` address is not blocklisted, maintaining the security and integrity\\n     *   of the contract by preventing potentially malicious entities from gaining privileged access.\\n     * - Checks that the `_account` address is not the zero address (`address(0)`), avoiding unintentional\\n     *   role assignments to an address that may have special significance or represent \\\"no address\\\".\\n     * - Verifies that the role has not already been burned, ensuring that only active, valid roles are\\n     *   assignable.\\n     * - Confirms that the role has not already been granted, upholding the principle of unique role assignments.\\n     *\\n     * This function can only be called by the contract owner, ensuring that role management is kept under\\n     * tight control and preventing unauthorized role assignments.\\n     *\\n     * @param _role The bytes32 identifier of the role to be granted.\\n     * @param _account The address to which the role is to be granted.\\n     *\\n     * Requirements:\\n     * - The contract caller must be the contract owner.\\n     * - The `_account` must not be blocklisted or the zero address.\\n     * - The `_role` must not be burned or already granted.\\n     */\\n    function grantRole(\\n        bytes32 _role,\\n        address _account\\n    )\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n        notBlocklisted(_account)\\n        notZeroAddress(_account)\\n        notBurned(_role)\\n        notGranted(_role)\\n    {\\n        assignedRoles[_role] = true;\\n        _grantRole(_role, _account);\\n    }\\n\\n    /**\\n     * @dev Public function to revoke a specific role from an account.\\n     *\\n     * This function allows the contract owner to remove a previously granted role from the `_account` address.\\n     * Roles are crucial for defining permissions and responsibilities within the contract, and revoking a role\\n     * removes those associated privileges from the specified account.\\n     *\\n     * The function takes two parameters:\\n     * - `_role`: The bytes32 identifier of the role to be revoked.\\n     * - `_account`: The address from which the role is to be removed.\\n     *\\n     * Before revoking the role, the function performs the following checks:\\n     * - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent accidental\\n     *   modifications of the zero address, which may have special significance.\\n     * - Ensures that the `_account` currently has the role to be revoked, providing a safeguard against\\n     *   unnecessary or mistaken revocations.\\n     *\\n     * Access to this function is restricted to addresses with the `OWNER_ROLE`, ensuring that only contract\\n     * owners or administrators can revoke roles. Upon successful revocation of the role, the function updates\\n     * the `assignedRoles` mapping and calls the internal `_revokeRole` function.\\n     *\\n     * @param _role The bytes32 identifier of the role to be revoked.\\n     * @param _account The address from which the role is to be removed.\\n     *\\n     * Requirements:\\n     * - The `_account` address must not be the zero address (`address(0)`).\\n     * - The `_account` must currently have the role that is being revoked.\\n     */\\n    function revokeRole(\\n        bytes32 _role,\\n        address _account\\n    ) public override onlyOwner notZeroAddress(_account) {\\n        require(\\n            hasRole(_role, _account),\\n            \\\"JAKANTMasterDistributor: Account does not have role\\\"\\n        );\\n        assignedRoles[_role] = false;\\n        _revokeRole(_role, _account);\\n    }\\n\\n    /**\\n     * @dev Public function for an account to renounce a specific role it possesses.\\n     *\\n     * This function allows an account to voluntarily renounce a role it holds, effectively removing the\\n     * associated permissions and responsibilities. It's a self-initiated action, meaning an account can\\n     * only renounce roles that it possesses for itself, enhancing the security by preventing external\\n     * entities from forcibly removing roles.\\n     *\\n     * The function takes two parameters:\\n     * - `_role`: The bytes32 identifier of the role to be renounced.\\n     * - `_account`: The address of the account renouncing the role. To ensure security and prevent\\n     *   unintended renunciations, the function checks that `_account` is the same as `_msgSender()`.\\n     *\\n     * Before allowing the role to be renounced, the function performs the following check:\\n     * - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent\\n     *   accidental modifications of the zero address, which may have special significance.\\n     *\\n     * Upon successfully renouncing the role, the function updates the `assignedRoles` mapping and\\n     * calls the internal `_revokeRole` function to formally remove the role.\\n     *\\n     * @param _role The bytes32 identifier of the role to be renounced.\\n     * @param _account The address of the account renouncing the role.\\n     *\\n     * Requirements:\\n     * - The `_account` address must not be the zero address (`address(0)`).\\n     * - The `_account` must be the same as `_msgSender()`, ensuring that accounts can only renounce\\n     *   roles for themselves.\\n     */\\n    function renounceRole(\\n        bytes32 _role,\\n        address _account\\n    ) public override notZeroAddress(_account) {\\n        require(\\n            _account == _msgSender(),\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n        require(\\n            hasRole(_role, _account),\\n            \\\"JAKANTMasterDistributor: Account does not have role\\\"\\n        );\\n        assignedRoles[_role] = false;\\n        _revokeRole(_role, _account);\\n    }\\n\\n    /**\\n     * @dev External function to blocklist or unblocklist an account.\\n     *\\n     * This function allows an address with the `LISTER_ROLE` to either blocklist or remove an account\\n     * from the contract's blocklist. Blocklisting an account may restrict it from performing certain\\n     * operations or participating in specific aspects of the contract, as defined by the contract's\\n     * logic.\\n     *\\n     * The function takes two parameters:\\n     * - `_account`: The address to be either blocklisted or unblocklisted.\\n     * - `_blocklist`: A boolean indicating whether to blocklist (`true`) or unblocklist (`false`)\\n     *   the account.\\n     *\\n     * Before modifying the blocklist status, the function checks if the specified `_account` address\\n     * holds any other roles within the contract (owner, lister, pauser, distributor). If the account\\n     * has any of these roles, the function reverts to prevent the blocklisting of accounts with\\n     * roles.\\n     *\\n     * Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only\\n     * authorized entities can modify the blocklist.\\n     *\\n     * @param _account The address to be blocklisted or unblocklisted.\\n     * @param _blocklist A boolean indicating whether to blocklist or unblocklist the account.\\n     *\\n     * Requirements:\\n     * - The `_account` address must not be the zero address (`address(0)`).\\n     *   This prevents accidentally modifying the zero address, which may have special significance.\\n     * - The `_account` address must not have any other roles (owner, lister, pauser, distributor).\\n     *   Accounts with these roles cannot be blocklisted.\\n     */\\n\\n    function blocklist(\\n        address _account,\\n        bool _blocklist\\n    ) external onlyRole(LISTER_ROLE) notZeroAddress(_account) {\\n        if (\\n            this.owner() == _account ||\\n            isLister(_account) ||\\n            isDistributor(_account)\\n        ) {\\n            revert(\\n                \\\"JAKANTMasterDistributor: Account has a role and cannot be blocklisted\\\"\\n            );\\n        }\\n        blocklisted[_account] = _blocklist;\\n    }\\n\\n    /**\\n     * @dev External function to whitelist or unwhitelist an account.\\n     *\\n     * This function allows an address with the `LISTER_ROLE` to either whitelist or remove an account\\n     * from the contract's whitelist. Whitelisting typically grants certain privileges or exemptions\\n     * to the whitelisted account, while removing an account from the whitelist revokes these\\n     * privileges.\\n     *\\n     * The function takes two parameters:\\n     * - `_account`: The address to be either whitelisted or removed from the whitelist.\\n     * - `_whitelist`: A boolean indicating whether to whitelist (`true`) or unwhitelist (`false`)\\n     *   the account.\\n     *\\n     * The function sets the whitelisting status of the specified account by updating the `whitelisted`\\n     * mapping accordingly.\\n     *\\n     * Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only\\n     * authorized entities can modify the whitelist.\\n     *\\n     * @param _account The address to be whitelisted or unwhitelisted.\\n     * @param _whitelist A boolean indicating whether to whitelist or unwhitelist the account.\\n     *\\n     * Requirements:\\n     * - The `_account` address must not be the zero address (`address(0)`).\\n     *   This prevents accidentally modifying the zero address, which may have special significance.\\n     */\\n\\n    function whitelist(\\n        address _account,\\n        bool _whitelist\\n    ) external onlyRole(LISTER_ROLE) notZeroAddress(_account) {\\n        whitelisted[_account] = _whitelist;\\n    }\\n\\n    /**\\n     * @dev Public view function to check if an account has the LISTER_ROLE.\\n     *\\n     * This function provides a convenient way to verify if a specific account has been granted the LISTER_ROLE\\n     * within the contract. The LISTER_ROLE is typically associated with permissions to list items or manage\\n     * lists within the contract's ecosystem.\\n     *\\n     * The function takes a single parameter:\\n     * - `_account`: The address of the account to check for the LISTER_ROLE.\\n     *\\n     * It returns a boolean value indicating whether the specified account has the LISTER_ROLE. This can be\\n     * particularly useful for front-end interfaces or other contract interactions that require a quick check\\n     * of an account's roles or permissions.\\n     *\\n     * @param _account The address of the account to check for the LISTER_ROLE.\\n     * @return A boolean value indicating whether the specified account has the LISTER_ROLE.\\n     */\\n    function isLister(address _account) public view returns (bool) {\\n        return hasRole(LISTER_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Public view function to check if an address has the JAKANTMasterDistributor role.\\n     *\\n     * This function provides a straightforward method to verify if a specific address has been granted the\\n     * JAKANTMasterDistributor role within the contract. The JAKANTMasterDistributor role is typically associated\\n     * with permissions to manage and execute token distributions, making it a critical role for the\\n     * operational aspects of the contract.\\n     *\\n     * The function takes a single parameter:\\n     * - `_address`: The address of the account to check for the JAKANTMasterDistributor role.\\n     *\\n     * It returns a boolean value indicating whether the specified address has the JAKANTMasterDistributor role.\\n     * This is particularly useful for confirming role assignments and managing access to distribution-related\\n     * functions or sections of a dApp interface.\\n     *\\n     * @param _address The address of the account to check for the JAKANTMasterDistributor role.\\n     * @return A boolean value indicating whether the specified address has the JAKANTMasterDistributor role.\\n     */\\n    function isDistributor(address _address) public view returns (bool) {\\n        return hasRole(JAKANT_MASTER_DISTRIBUTOR_ROLE, _address);\\n    }\\n\\n    /**\\n     * @dev Public view function to check if an account is blocklisted.\\n     *\\n     * This function allows anyone to determine if a specific account is included in the contract's\\n     * blocklist. An account that is blocklisted may be restricted from performing certain operations\\n     * or participating in specific aspects of the contract, as defined by the contract's logic.\\n     *\\n     * The function checks the `blocklisted` mapping to see if the provided `_account` address is\\n     * marked as blocklisted, returning a boolean value indicating the blocklist status.\\n     *\\n     * Being a `view` function, it only reads the blocklist status from the contract's state and\\n     * does not modify the contract. This function is typically used in access control mechanisms\\n     * where actions are conditional based on whether an account is blocklisted.\\n     *\\n     * @param _account The address to be checked for blocklist status.\\n     * @return `true` if the account is blocklisted, `false` otherwise.\\n     */\\n\\n    function isBlocklisted(address _account) public view returns (bool) {\\n        return blocklisted[_account];\\n    }\\n\\n    /**\\n     * @dev External view function to check if an account is whitelisted.\\n     *\\n     * This function is accessible externally and is used to determine if a specific account is\\n     * included in the whitelist of the contract. Whitelisted accounts often have certain privileges\\n     * or are exempt from various restrictions that apply to other users.\\n     *\\n     * The function's logic is as follows:\\n     * - If the provided `_account` address is the zero address (`address(0)`), the function\\n     *   returns `true`. This implies a default allowance or special treatment for the zero address\\n     *   in certain contexts.\\n     * - For any other address, it checks the `whitelisted` mapping to see if the address is\\n     *   marked as whitelisted, returning a boolean value that indicates the status.\\n     *\\n     * Being a `view` function, it does not modify the state of the contract but simply reads and\\n     * returns the whitelisting status. It is typically used in access control checks, where\\n     * different actions or permissions are granted based on the user's whitelist status.\\n     *\\n     * @param _account The address to be checked for its whitelisted status.\\n     * @return `true` if the account is whitelisted, `false` otherwise.\\n     */\\n\\n    function isWhitelisted(address _account) private view returns (bool) {\\n        if (_account == address(0)) {\\n            return true;\\n        }\\n        return whitelisted[_account];\\n    }\\n\\n    /**\\n     * @dev External view function to check if minting is allowed for a given address.\\n     *\\n     * This function checks whether the provided `_minter` address is authorized to mint new tokens.\\n     * In the current implementation, minting is restricted to the contract itself, signifying that\\n     * minting operations are controlled internally and not open to external entities directly.\\n     *\\n     * The function takes a single parameter:\\n     * - `_minter`: The address to be checked for minting permissions.\\n     *\\n     * It returns true if the `_minter` address is the same as the address of this contract,\\n     * indicating that minting is allowed. Otherwise, it reverts the transaction with the message\\n     * \\\"Distributor only\\\", enforcing the rule that only the contract itself can initiate minting operations.\\n     *\\n     * @param _minter The address to be checked for minting permissions.\\n     * @return A boolean value indicating whether minting is allowed for the specified `_minter` address.\\n     */\\n    function mintAllowed(address _minter) external view returns (bool) {\\n        require(\\n            _minter == address(this),\\n            \\\"JAKANTMasterDistributor: Distributor only\\\"\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Public view function to check if a token transfer is allowed.\\n     *\\n     * This function is used to enforce restrictions on token transfers based on blocklist criteria.\\n     * It checks whether any of the involved parties in a token transfer (the sender, receiver, and\\n     * the caller of the function) are on a blocklist. If any of these addresses are blocklisted, the\\n     * function reverts the transaction, preventing the transfer.\\n     *\\n     * Being a `view` function, it does not modify the state of the blockchain but reads from it.\\n     * This function can be integrated into the token transfer process to add an additional layer of\\n     * security and compliance, ensuring that tokens cannot be transferred by or to blocklisted\\n     * addresses.\\n     *\\n     * @param _from The address attempting to send tokens.\\n     * @param _to The address intended to receive the tokens.\\n     * @param _msgSender The address initiating the transfer request.\\n     *\\n     * Requirements:\\n     * - None of the involved addresses (_from, _to, and _msgSender) can be on the blocklist.\\n     *   If any are blocklisted, the function reverts with an error message.\\n     */\\n\\n    function transferAllowed(\\n        address _from,\\n        address _to,\\n        address _msgSender\\n    ) external view returns (bool) {\\n        require(\\n            !isBlocklisted(_from) &&\\n                !isBlocklisted(_to) &&\\n                !isBlocklisted(_msgSender),\\n            \\\"JAKANTMasterDistributor: Action on blocklisted account\\\"\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Public view function to check if token approval is allowed.\\n     *\\n     * This function is used to enforce restrictions on token approvals based on blocklist criteria.\\n     * It checks whether the spender or the caller of the function (message sender) are on a\\n     * blocklist. If either of these addresses are blocklisted, the function reverts the transaction,\\n     * preventing the approval operation.\\n     *\\n     * This check is crucial in scenarios where blocklisted addresses should not be permitted to\\n     * interact with the token, including being approved to spend tokens on behalf of others. By\\n     * incorporating this function into the approval process, the contract adds an additional layer\\n     * of security and regulatory compliance.\\n     *\\n     * Being a `view` function, `approveAllowed` does not alter the state of the blockchain but\\n     * reads from it to ensure compliance with the blocklist rules before any approval is granted.\\n     *\\n     * @param _spender The address being granted permission to spend tokens.\\n     * @param _msgSender The address initiating the approval request.\\n     *\\n     * Requirements:\\n     * - Neither the spender (_spender) nor the initiator of the approval (_msgSender) can be\\n     *   on the blocklist. If any of them are blocklisted, the function reverts with an error message.\\n     */\\n\\n    function approveAllowed(\\n        address _spender,\\n        address _msgSender\\n    ) external view returns (bool) {\\n        require(\\n            !isBlocklisted(_spender) && !isBlocklisted(_msgSender),\\n            \\\"JAKANTMasterDistributor: Action on blocklisted account\\\"\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev External view function to retrieve the list of distribution reductions.\\n     *\\n     * This function provides access to the array of `distributionReductions`, which contains\\n     * records of all the reductions applied to the token distribution over time. Each record in\\n     * the array is a `DistributionReduction` struct, detailing the timestamp when the reduction\\n     * takes effect and the new daily distribution amount after the reduction.\\n     *\\n     * The function does not take any parameters and returns the entire array of\\n     * `distributionReductions`. This can be particularly useful for front-end interfaces or\\n     * other contract interactions that require visibility into the history and schedule of\\n     * distribution reductions.\\n     *\\n     * @return An array of `DistributionReduction` structs, representing the history of distribution reductions.\\n     */\\n    function getDistributionReductions()\\n        external\\n        view\\n        returns (DistributionReduction[] memory)\\n    {\\n        return distributionReductions;\\n    }\\n}\\n\",\"keccak256\":\"0xfec606e30406fdecd0a06f33835a720db1343f1576fbe88b59240267df3dc952\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260006007556103e86009553480156200001c57600080fd5b506040516200274c3803806200274c8339810160408190526200003f91620000d2565b6200004a3362000080565b62000059426201518062000104565b6006556200006b42620d2f0062000104565b608052620000798162000080565b506200012c565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215620000e557600080fd5b81516001600160a01b0381168114620000fd57600080fd5b9392505050565b808201808211156200012657634e487b7160e01b600052601160045260246000fd5b92915050565b6080516126046200014860003960006112ab01526126046000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c806393fc9e5f11610130578063cadcdd31116100b8578063eba1c66b1161007c578063eba1c66b146104c5578063f2fde38b146104d8578063f59c3708146104eb578063fb932108146104fe578063fc0e8c1b1461051157600080fd5b8063cadcdd3114610462578063d2b7077914610475578063d547741f14610488578063d68352df1461049b578063deb26b94146104b057600080fd5b8063ad33628f116100ff578063ad33628f1461040f578063b7c4a6bf14610420578063b962cbaf14610433578063bed9985014610446578063bf90fbc61461044f57600080fd5b806393fc9e5f146103d857806395cde8b4146103eb578063a217fddf146103fe578063a3df582a1461040657600080fd5b80634a205004116101be5780638e204c43116101825780638e204c43146103775780638f0751451461038a5780638f0c86fa1461039d57806391d14854146103b057806393bcc923146103c357600080fd5b80634a2050041461030e578063517f25a214610336578063586360ce1461034b578063715018a6146103545780638da5cb5b1461035c57600080fd5b80632117086f116102055780632117086f1461029f578063248a9ca3146102b25780632f2ff15d146102d557806336568abe146102e857806340c75ea9146102fb57600080fd5b806301ffc9a714610237578063079ddd6d1461025f5780631765b69114610274578063189d165e1461028a575b600080fd5b61024a610245366004611eb2565b610524565b60405190151581526020015b60405180910390f35b61026761055b565b6040516102569190611edc565b61027c6105ce565b604051908152602001610256565b61029d610298366004611f2b565b61074d565b005b61029d6102ad366004611f44565b610820565b61027c6102c0366004611f2b565b60009081526020819052604090206001015490565b61029d6102e3366004611f7b565b610bc5565b61029d6102f6366004611f7b565b610cb4565b61029d610309366004612081565b610de2565b61032161031c366004611f2b565b610ec2565b60408051928352602083019190915201610256565b61027c6000805160206125af83398151915281565b61027c60075481565b61029d610ef0565b6001546040516001600160a01b039091168152602001610256565b61024a610385366004612143565b610f04565b61029d610398366004612143565b610f22565b61024a6103ab366004612143565b611058565b61024a6103be366004611f7b565b61106e565b61027c60008051602061258f83398151915281565b61024a6103e6366004612160565b611097565b61024a6103f9366004612143565b6110ed565b61027c600081565b61027c60065481565b61027c6934f086f3b33b6840000081565b61027c61042e3660046121ab565b61114f565b61029d610441366004611f2b565b61118f565b61027c60095481565b61029d61045d366004612143565b611388565b61029d610470366004612143565b6114cf565b61024a6104833660046121d7565b611599565b61029d610496366004611f7b565b6115dc565b61027c60008051602061254f83398151915281565b61027c60008051602061252f83398151915281565b61029d6104d3366004612205565b61160b565b61029d6104e6366004612143565b61178c565b61029d6104f9366004612205565b611805565b61029d61050c3660046121ab565b611871565b61024a61051f366004612143565b611a7b565b60006001600160e01b03198216637965db0b60e01b148061055557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606008805480602002602001604051908101604052809291908181526020016000905b828210156105c55783829060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061057f565b50505050905090565b60006006544210156105e05750600090565b6006546934f086f3b33b68400000906000906105fc904261224e565b9050600061060c61025883612261565b60085490915042906000036106425761062f6934f086f3b33b6840000083612283565b610639908561229a565b94505050505090565b6008546000906106549060019061224e565b90505b60006008828154811061066c5761066c6122ad565b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050905080600001514210610712578051600090610258906106b9908661224e565b6106c39190612261565b90508160200151816106d59190612283565b82602001516106e4919061229a565b6106ee908861229a565b825190975093506106ff818661224e565b945082600003610710575050610725565b505b508061071d816122c3565b915050610657565b5061073a6934f086f3b33b6840000083612283565b610744908561229a565b95945050505050565b610755611a95565b6103e88111156107e45760405162461bcd60e51b815260206004820152604960248201527f4a414b414e544d61737465724469737472696275746f723a204275726e20726160448201527f74652063616e6e6f742062652067726561746572207468616e206f7220657175606482015268616c20746f2031302560b81b608482015260a4015b60405180910390fd5b60098190556040518181527f9184e9ae9554b2f814a8bdda1712d37b4b6ae7aac79868386ac664e57ce1dcf3906020015b60405180910390a150565b6000805160206125af83398151915261083881611aef565b8282610857604051806040016040528060008152602001600081525090565b600854156108b3576008805461086f9060019061224e565b8154811061087f5761087f6122ad565b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505090506108d4565b506040805180820190915260065481526934f086f3b33b6840000060208201525b80516108e29061025861229a565b8310156109945760405162461bcd60e51b815260206004820152606e60248201527f4a414b414e544d61737465724469737472696275746f723a204e65772072656460448201527f7574696f6e2073746172742074696d652063616e6e6f74206265206c6f77657260648201527f207468616e203130206d696e75746573206166746572206c617374207265647560848201526d074696f6e2074696d657374616d760941b60a482015260c4016107db565b60208101516109a4906002611af9565b821015610a4e5760405162461bcd60e51b815260206004820152606660248201527f4a414b414e544d61737465724469737472696275746f723a204e65772072656460448201527f756374696f6e20616d6f756e742063616e6e6f7420626520677265617465722060648201527f7468616e2068616c66206f6620746865206c61737420726564756374696f6e20608482015265185b5bdd5b9d60d21b60a482015260c4016107db565b6020810151610a5e906002611b05565b821115610b0e5760405162461bcd60e51b815260206004820152606c60248201527f4d50524f4d61737465724469737472696275746f723a204e657720726564756360448201527f74696f6e20616d6f756e742063616e6e6f74206265206772656174657220746860648201527f616e20746865206c61737420726564756374696f6e20616d6f756e74206d756c60848201526b3a34b83634b2b210313c901960a11b60a482015260c4016107db565b60408051808201825287815260208082018881526008805460018101825560009190915292517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3600290940293840155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee49092019190915581518881529081018790527f753d15e0c64e5ba659389066f8d03d486700c959348e556618057a587d066a79910160405180910390a1505050505050565b610bcd611a95565b6001600160a01b038116600090815260046020526040902054819060ff1615610c085760405162461bcd60e51b81526004016107db906122da565b816001600160a01b038116610c2f5760405162461bcd60e51b81526004016107db90612330565b83610c3b81600061106e565b15610c585760405162461bcd60e51b81526004016107db9061237f565b600085815260036020526040902054859060ff1615610c895760405162461bcd60e51b81526004016107db906123ce565b6000868152600360205260409020805460ff19166001179055610cac8686611b11565b505050505050565b806001600160a01b038116610cdb5760405162461bcd60e51b81526004016107db90612330565b6001600160a01b0382163314610d4b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107db565b610d55838361106e565b610dbd5760405162461bcd60e51b815260206004820152603360248201527f4a414b414e544d61737465724469737472696275746f723a204163636f756e7460448201527220646f6573206e6f74206861766520726f6c6560681b60648201526084016107db565b6000838152600360205260409020805460ff19169055610ddd8383611b96565b505050565b60008051602061254f833981519152610dfa81611aef565b8151835114610e625760405162461bcd60e51b815260206004820152602e60248201527f746f20616e6420616d6f756e7420617272617973206d7573742068617665207460448201526d0d0ca40e6c2daca40d8cadccee8d60931b60648201526084016107db565b60005b8351811015610ebc57610eaa848281518110610e8357610e836122ad565b6020026020010151848381518110610e9d57610e9d6122ad565b6020026020010151611871565b80610eb48161242c565b915050610e65565b50505050565b60088181548110610ed257600080fd5b60009182526020909120600290910201805460019091015490915082565b610ef8611a95565b610f026000611bfb565b565b6001600160a01b031660009081526004602052604090205460ff1690565b610f2a611a95565b60008051602061258f833981519152610f4481600061106e565b15610f615760405162461bcd60e51b81526004016107db9061237f565b60008051602061258f833981519152600081905260036020527ff9830402bbafcd668269671b0f591a9864fddce5aeead4a4a535deea5f7d4eea5460ff1615610fbc5760405162461bcd60e51b81526004016107db906123ce565b610fd460008051602061258f83398151915284611b11565b60008051602061258f833981519152600052600360209081527ff9830402bbafcd668269671b0f591a9864fddce5aeead4a4a535deea5f7d4eea805460ff191660011790556040516001600160a01b03851681527f1653e4398425e1efcb20d294dbbf89446912817a166b95f7629558baef459ecd910160405180910390a1505050565b600061055560008051602061254f833981519152835b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006110a284610f04565b1580156110b557506110b383610f04565b155b80156110c757506110c582610f04565b155b6110e35760405162461bcd60e51b81526004016107db906122da565b5060019392505050565b60006001600160a01b03821630146111475760405162461bcd60e51b8152602060048201526029602482015260008051602061256f83398151915260448201526875746f72206f6e6c7960b81b60648201526084016107db565b506001919050565b600061115a83611c4d565b1561116757506000610555565b61118861271061118260095485611b0590919063ffffffff16565b90611af9565b9392505050565b611197611a95565b6007541561122b5760405162461bcd60e51b8152602060048201526061602482015260008051602061256f83398151915260448201527f7574696f6e2073746172742074696d652063616e6e6f74206265206368616e6760648201527f656420616674657220646973747269627574696f6e20686173207374617274656084820152601960fa1b60a482015260c4016107db565b4281116112a95760405162461bcd60e51b8152602060048201526052602482015260008051602061256f83398151915260448201527f7574696f6e2073746172742074696d652063616e6e6f74206265206c6f776572606482015271207468616e2063757272656e742074696d6560701b608482015260a4016107db565b7f00000000000000000000000000000000000000000000000000000000000000008111156113535760405162461bcd60e51b8152602060048201526060602482015260008051602061256f83398151915260448201527f7574696f6e2073746172742074696d65206d757374206265206c65737320746860648201527f616e20646973747269627574696f6e537461727454696d65446561646c696e65608482015260a4016107db565b60068190556040518181527fc8e2be95c2a499f9692e142afc6b178470bd8e16d080e91497658c20e282484790602001610815565b60008051602061258f8339815191526113a081611aef565b6000805160206125af8339815191526113ba81600061106e565b156113d75760405162461bcd60e51b81526004016107db9061237f565b6000805160206125af833981519152600081905260036020527feaea521b0fa1c79f9189cdc6d8d5f17d784b28b30b94868dd16f50216f20ffd25460ff16156114325760405162461bcd60e51b81526004016107db906123ce565b61144a6000805160206125af83398151915285611b11565b6000805160206125af833981519152600052600360209081527feaea521b0fa1c79f9189cdc6d8d5f17d784b28b30b94868dd16f50216f20ffd2805460ff191660011790556040516001600160a01b03861681527fd79838a02a85292deb7f2e9e20a140c1313678e1c21a2117d99df07532150a7b910160405180910390a150505050565b6114d7611a95565b6002546001600160a01b03161561154b5760405162461bcd60e51b815260206004820152603260248201527f4a414b414e544d61737465724469737472696275746f723a204d50524f20746f6044820152711ad95b881a5cc8185b1c9958591e481cd95d60721b60648201526084016107db565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f59167548a4cb52fcd2ed1a5f6449dc7de57bd231856497fa316ed405ff95c09a90602001610815565b60006115a483610f04565b1580156115b757506115b582610f04565b155b6115d35760405162461bcd60e51b81526004016107db906122da565b50600192915050565b6115e4611a95565b806001600160a01b038116610d4b5760405162461bcd60e51b81526004016107db90612330565b60008051602061252f83398151915261162381611aef565b826001600160a01b03811661164a5760405162461bcd60e51b81526004016107db90612330565b836001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b69190612445565b6001600160a01b031614806116cf57506116cf84611a7b565b806116de57506116de84611058565b1561175f5760405162461bcd60e51b815260206004820152604560248201527f4a414b414e544d61737465724469737472696275746f723a204163636f756e7460448201527f20686173206120726f6c6520616e642063616e6e6f7420626520626c6f636b6c6064820152641a5cdd195960da1b608482015260a4016107db565b50506001600160a01b03919091166000908152600460205260409020805460ff1916911515919091179055565b611794611a95565b6001600160a01b0381166117f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107db565b61180281611bfb565b50565b60008051602061252f83398151915261181d81611aef565b826001600160a01b0381166118445760405162461bcd60e51b81526004016107db90612330565b50506001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b60008051602061254f83398151915261188981611aef565b600082116118d95760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016107db565b6006544210156119475760405162461bcd60e51b815260206004820152603360248201527f4a414b414e544d61737465724469737472696275746f723a204d696e74696e67604482015272081a5cc81b9bdd08195b98589b1959081e595d606a1b60648201526084016107db565b61194f611c84565b8211156119b65760405162461bcd60e51b815260206004820152602f60248201527f4a414b414e544d61737465724469737472696275746f723a204d696e74696e6760448201526e081b1a5b5a5d08195e18d959591959608a1b60648201526084016107db565b81600760008282546119c8919061229a565b90915550506002546040516340c10f1960e01b81526001600160a01b03858116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b50505050826001600160a01b03167fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af83604051611a6e91815260200190565b60405180910390a2505050565b600061055560008051602061252f8339815191528361106e565b6001546001600160a01b03163314610f025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107db565b6118028133611c9f565b60006111888284612261565b60006111888284612283565b611b1b828261106e565b611b92576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b513390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611ba0828261106e565b15611b92576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b038216611c6557506001919050565b506001600160a01b031660009081526005602052604090205460ff1690565b6000611c9a600754611c946105ce565b90611cf8565b905090565b611ca9828261106e565b611b9257611cb681611d04565b611cc1836020611d16565b604051602001611cd2929190612486565b60408051601f198184030181529082905262461bcd60e51b82526107db916004016124fb565b6000611188828461224e565b60606105556001600160a01b03831660145b60606000611d25836002612283565b611d3090600261229a565b67ffffffffffffffff811115611d4857611d48611fab565b6040519080825280601f01601f191660200182016040528015611d72576020820181803683370190505b509050600360fc1b81600081518110611d8d57611d8d6122ad565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611dbc57611dbc6122ad565b60200101906001600160f81b031916908160001a9053506000611de0846002612283565b611deb90600161229a565b90505b6001811115611e63576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e1f57611e1f6122ad565b1a60f81b828281518110611e3557611e356122ad565b60200101906001600160f81b031916908160001a90535060049490941c93611e5c816122c3565b9050611dee565b5083156111885760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107db565b600060208284031215611ec457600080fd5b81356001600160e01b03198116811461118857600080fd5b602080825282518282018190526000919060409081850190868401855b82811015611f1e57815180518552860151868501529284019290850190600101611ef9565b5091979650505050505050565b600060208284031215611f3d57600080fd5b5035919050565b60008060408385031215611f5757600080fd5b50508035926020909101359150565b6001600160a01b038116811461180257600080fd5b60008060408385031215611f8e57600080fd5b823591506020830135611fa081611f66565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fea57611fea611fab565b604052919050565b600067ffffffffffffffff82111561200c5761200c611fab565b5060051b60200190565b600082601f83011261202757600080fd5b8135602061203c61203783611ff2565b611fc1565b82815260059290921b8401810191818101908684111561205b57600080fd5b8286015b84811015612076578035835291830191830161205f565b509695505050505050565b6000806040838503121561209457600080fd5b823567ffffffffffffffff808211156120ac57600080fd5b818501915085601f8301126120c057600080fd5b813560206120d061203783611ff2565b82815260059290921b840181019181810190898411156120ef57600080fd5b948201945b8386101561211657853561210781611f66565b825294820194908201906120f4565b9650508601359250508082111561212c57600080fd5b5061213985828601612016565b9150509250929050565b60006020828403121561215557600080fd5b813561118881611f66565b60008060006060848603121561217557600080fd5b833561218081611f66565b9250602084013561219081611f66565b915060408401356121a081611f66565b809150509250925092565b600080604083850312156121be57600080fd5b82356121c981611f66565b946020939093013593505050565b600080604083850312156121ea57600080fd5b82356121f581611f66565b91506020830135611fa081611f66565b6000806040838503121561221857600080fd5b823561222381611f66565b915060208301358015158114611fa057600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561055557610555612238565b60008261227e57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761055557610555612238565b8082018082111561055557610555612238565b634e487b7160e01b600052603260045260246000fd5b6000816122d2576122d2612238565b506000190190565b60208082526036908201527f4a414b414e544d61737465724469737472696275746f723a20416374696f6e206040820152751bdb88189b1bd8dadb1a5cdd1959081858d8dbdd5b9d60521b606082015260800190565b6020808252602f908201527f4a414b414e544d61737465724469737472696275746f723a20416374696f6e2060408201526e6f6e2061646472657373207a65726f60881b606082015260800190565b6020808252602f908201527f4a414b414e544d61737465724469737472696275746f723a20526f6c6520697360408201526e08185b1c9958591e48189d5c9b9959608a1b606082015260800190565b602080825260409082018190527f4a414b414e544d61737465724469737472696275746f723a20526f6c6520616c908201527f7265616479206772616e74656420746f20616e6f74686572206163636f756e74606082015260800190565b60006001820161243e5761243e612238565b5060010190565b60006020828403121561245757600080fd5b815161118881611f66565b60005b8381101561247d578181015183820152602001612465565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516124be816017850160208801612462565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516124ef816028840160208801612462565b01602801949350505050565b602081526000825180602084015261251a816040850160208701612462565b601f01601f1916919091016040019291505056fef94103142c1baabe9ac2b5d1487bf783de9e69cfeea9a72f5c9c94afd7877b8cd96d53eb75014cde2646895909cf5231d58942a05e66e5edf0a7bf450b504df34a414b414e544d61737465724469737472696275746f723a20446973747269626ee0f19c3526ca65945666b9437299b6a1b226cdffcd62f34d1cbc222cb026825afa424c0b6204848cb71c5aa5f8da1afaf45d645ada516ab6c53bb3ff616cffa26469706673582212206b1410e2058b54b5d6d9d0c29decc81eaaf24d94c5ae26810d15a46d8ac5252464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806393fc9e5f11610130578063cadcdd31116100b8578063eba1c66b1161007c578063eba1c66b146104c5578063f2fde38b146104d8578063f59c3708146104eb578063fb932108146104fe578063fc0e8c1b1461051157600080fd5b8063cadcdd3114610462578063d2b7077914610475578063d547741f14610488578063d68352df1461049b578063deb26b94146104b057600080fd5b8063ad33628f116100ff578063ad33628f1461040f578063b7c4a6bf14610420578063b962cbaf14610433578063bed9985014610446578063bf90fbc61461044f57600080fd5b806393fc9e5f146103d857806395cde8b4146103eb578063a217fddf146103fe578063a3df582a1461040657600080fd5b80634a205004116101be5780638e204c43116101825780638e204c43146103775780638f0751451461038a5780638f0c86fa1461039d57806391d14854146103b057806393bcc923146103c357600080fd5b80634a2050041461030e578063517f25a214610336578063586360ce1461034b578063715018a6146103545780638da5cb5b1461035c57600080fd5b80632117086f116102055780632117086f1461029f578063248a9ca3146102b25780632f2ff15d146102d557806336568abe146102e857806340c75ea9146102fb57600080fd5b806301ffc9a714610237578063079ddd6d1461025f5780631765b69114610274578063189d165e1461028a575b600080fd5b61024a610245366004611eb2565b610524565b60405190151581526020015b60405180910390f35b61026761055b565b6040516102569190611edc565b61027c6105ce565b604051908152602001610256565b61029d610298366004611f2b565b61074d565b005b61029d6102ad366004611f44565b610820565b61027c6102c0366004611f2b565b60009081526020819052604090206001015490565b61029d6102e3366004611f7b565b610bc5565b61029d6102f6366004611f7b565b610cb4565b61029d610309366004612081565b610de2565b61032161031c366004611f2b565b610ec2565b60408051928352602083019190915201610256565b61027c6000805160206125af83398151915281565b61027c60075481565b61029d610ef0565b6001546040516001600160a01b039091168152602001610256565b61024a610385366004612143565b610f04565b61029d610398366004612143565b610f22565b61024a6103ab366004612143565b611058565b61024a6103be366004611f7b565b61106e565b61027c60008051602061258f83398151915281565b61024a6103e6366004612160565b611097565b61024a6103f9366004612143565b6110ed565b61027c600081565b61027c60065481565b61027c6934f086f3b33b6840000081565b61027c61042e3660046121ab565b61114f565b61029d610441366004611f2b565b61118f565b61027c60095481565b61029d61045d366004612143565b611388565b61029d610470366004612143565b6114cf565b61024a6104833660046121d7565b611599565b61029d610496366004611f7b565b6115dc565b61027c60008051602061254f83398151915281565b61027c60008051602061252f83398151915281565b61029d6104d3366004612205565b61160b565b61029d6104e6366004612143565b61178c565b61029d6104f9366004612205565b611805565b61029d61050c3660046121ab565b611871565b61024a61051f366004612143565b611a7b565b60006001600160e01b03198216637965db0b60e01b148061055557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606008805480602002602001604051908101604052809291908181526020016000905b828210156105c55783829060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061057f565b50505050905090565b60006006544210156105e05750600090565b6006546934f086f3b33b68400000906000906105fc904261224e565b9050600061060c61025883612261565b60085490915042906000036106425761062f6934f086f3b33b6840000083612283565b610639908561229a565b94505050505090565b6008546000906106549060019061224e565b90505b60006008828154811061066c5761066c6122ad565b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050905080600001514210610712578051600090610258906106b9908661224e565b6106c39190612261565b90508160200151816106d59190612283565b82602001516106e4919061229a565b6106ee908861229a565b825190975093506106ff818661224e565b945082600003610710575050610725565b505b508061071d816122c3565b915050610657565b5061073a6934f086f3b33b6840000083612283565b610744908561229a565b95945050505050565b610755611a95565b6103e88111156107e45760405162461bcd60e51b815260206004820152604960248201527f4a414b414e544d61737465724469737472696275746f723a204275726e20726160448201527f74652063616e6e6f742062652067726561746572207468616e206f7220657175606482015268616c20746f2031302560b81b608482015260a4015b60405180910390fd5b60098190556040518181527f9184e9ae9554b2f814a8bdda1712d37b4b6ae7aac79868386ac664e57ce1dcf3906020015b60405180910390a150565b6000805160206125af83398151915261083881611aef565b8282610857604051806040016040528060008152602001600081525090565b600854156108b3576008805461086f9060019061224e565b8154811061087f5761087f6122ad565b90600052602060002090600202016040518060400160405290816000820154815260200160018201548152505090506108d4565b506040805180820190915260065481526934f086f3b33b6840000060208201525b80516108e29061025861229a565b8310156109945760405162461bcd60e51b815260206004820152606e60248201527f4a414b414e544d61737465724469737472696275746f723a204e65772072656460448201527f7574696f6e2073746172742074696d652063616e6e6f74206265206c6f77657260648201527f207468616e203130206d696e75746573206166746572206c617374207265647560848201526d074696f6e2074696d657374616d760941b60a482015260c4016107db565b60208101516109a4906002611af9565b821015610a4e5760405162461bcd60e51b815260206004820152606660248201527f4a414b414e544d61737465724469737472696275746f723a204e65772072656460448201527f756374696f6e20616d6f756e742063616e6e6f7420626520677265617465722060648201527f7468616e2068616c66206f6620746865206c61737420726564756374696f6e20608482015265185b5bdd5b9d60d21b60a482015260c4016107db565b6020810151610a5e906002611b05565b821115610b0e5760405162461bcd60e51b815260206004820152606c60248201527f4d50524f4d61737465724469737472696275746f723a204e657720726564756360448201527f74696f6e20616d6f756e742063616e6e6f74206265206772656174657220746860648201527f616e20746865206c61737420726564756374696f6e20616d6f756e74206d756c60848201526b3a34b83634b2b210313c901960a11b60a482015260c4016107db565b60408051808201825287815260208082018881526008805460018101825560009190915292517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3600290940293840155517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee49092019190915581518881529081018790527f753d15e0c64e5ba659389066f8d03d486700c959348e556618057a587d066a79910160405180910390a1505050505050565b610bcd611a95565b6001600160a01b038116600090815260046020526040902054819060ff1615610c085760405162461bcd60e51b81526004016107db906122da565b816001600160a01b038116610c2f5760405162461bcd60e51b81526004016107db90612330565b83610c3b81600061106e565b15610c585760405162461bcd60e51b81526004016107db9061237f565b600085815260036020526040902054859060ff1615610c895760405162461bcd60e51b81526004016107db906123ce565b6000868152600360205260409020805460ff19166001179055610cac8686611b11565b505050505050565b806001600160a01b038116610cdb5760405162461bcd60e51b81526004016107db90612330565b6001600160a01b0382163314610d4b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107db565b610d55838361106e565b610dbd5760405162461bcd60e51b815260206004820152603360248201527f4a414b414e544d61737465724469737472696275746f723a204163636f756e7460448201527220646f6573206e6f74206861766520726f6c6560681b60648201526084016107db565b6000838152600360205260409020805460ff19169055610ddd8383611b96565b505050565b60008051602061254f833981519152610dfa81611aef565b8151835114610e625760405162461bcd60e51b815260206004820152602e60248201527f746f20616e6420616d6f756e7420617272617973206d7573742068617665207460448201526d0d0ca40e6c2daca40d8cadccee8d60931b60648201526084016107db565b60005b8351811015610ebc57610eaa848281518110610e8357610e836122ad565b6020026020010151848381518110610e9d57610e9d6122ad565b6020026020010151611871565b80610eb48161242c565b915050610e65565b50505050565b60088181548110610ed257600080fd5b60009182526020909120600290910201805460019091015490915082565b610ef8611a95565b610f026000611bfb565b565b6001600160a01b031660009081526004602052604090205460ff1690565b610f2a611a95565b60008051602061258f833981519152610f4481600061106e565b15610f615760405162461bcd60e51b81526004016107db9061237f565b60008051602061258f833981519152600081905260036020527ff9830402bbafcd668269671b0f591a9864fddce5aeead4a4a535deea5f7d4eea5460ff1615610fbc5760405162461bcd60e51b81526004016107db906123ce565b610fd460008051602061258f83398151915284611b11565b60008051602061258f833981519152600052600360209081527ff9830402bbafcd668269671b0f591a9864fddce5aeead4a4a535deea5f7d4eea805460ff191660011790556040516001600160a01b03851681527f1653e4398425e1efcb20d294dbbf89446912817a166b95f7629558baef459ecd910160405180910390a1505050565b600061055560008051602061254f833981519152835b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006110a284610f04565b1580156110b557506110b383610f04565b155b80156110c757506110c582610f04565b155b6110e35760405162461bcd60e51b81526004016107db906122da565b5060019392505050565b60006001600160a01b03821630146111475760405162461bcd60e51b8152602060048201526029602482015260008051602061256f83398151915260448201526875746f72206f6e6c7960b81b60648201526084016107db565b506001919050565b600061115a83611c4d565b1561116757506000610555565b61118861271061118260095485611b0590919063ffffffff16565b90611af9565b9392505050565b611197611a95565b6007541561122b5760405162461bcd60e51b8152602060048201526061602482015260008051602061256f83398151915260448201527f7574696f6e2073746172742074696d652063616e6e6f74206265206368616e6760648201527f656420616674657220646973747269627574696f6e20686173207374617274656084820152601960fa1b60a482015260c4016107db565b4281116112a95760405162461bcd60e51b8152602060048201526052602482015260008051602061256f83398151915260448201527f7574696f6e2073746172742074696d652063616e6e6f74206265206c6f776572606482015271207468616e2063757272656e742074696d6560701b608482015260a4016107db565b7f00000000000000000000000000000000000000000000000000000000000000008111156113535760405162461bcd60e51b8152602060048201526060602482015260008051602061256f83398151915260448201527f7574696f6e2073746172742074696d65206d757374206265206c65737320746860648201527f616e20646973747269627574696f6e537461727454696d65446561646c696e65608482015260a4016107db565b60068190556040518181527fc8e2be95c2a499f9692e142afc6b178470bd8e16d080e91497658c20e282484790602001610815565b60008051602061258f8339815191526113a081611aef565b6000805160206125af8339815191526113ba81600061106e565b156113d75760405162461bcd60e51b81526004016107db9061237f565b6000805160206125af833981519152600081905260036020527feaea521b0fa1c79f9189cdc6d8d5f17d784b28b30b94868dd16f50216f20ffd25460ff16156114325760405162461bcd60e51b81526004016107db906123ce565b61144a6000805160206125af83398151915285611b11565b6000805160206125af833981519152600052600360209081527feaea521b0fa1c79f9189cdc6d8d5f17d784b28b30b94868dd16f50216f20ffd2805460ff191660011790556040516001600160a01b03861681527fd79838a02a85292deb7f2e9e20a140c1313678e1c21a2117d99df07532150a7b910160405180910390a150505050565b6114d7611a95565b6002546001600160a01b03161561154b5760405162461bcd60e51b815260206004820152603260248201527f4a414b414e544d61737465724469737472696275746f723a204d50524f20746f6044820152711ad95b881a5cc8185b1c9958591e481cd95d60721b60648201526084016107db565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f59167548a4cb52fcd2ed1a5f6449dc7de57bd231856497fa316ed405ff95c09a90602001610815565b60006115a483610f04565b1580156115b757506115b582610f04565b155b6115d35760405162461bcd60e51b81526004016107db906122da565b50600192915050565b6115e4611a95565b806001600160a01b038116610d4b5760405162461bcd60e51b81526004016107db90612330565b60008051602061252f83398151915261162381611aef565b826001600160a01b03811661164a5760405162461bcd60e51b81526004016107db90612330565b836001600160a01b0316306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b69190612445565b6001600160a01b031614806116cf57506116cf84611a7b565b806116de57506116de84611058565b1561175f5760405162461bcd60e51b815260206004820152604560248201527f4a414b414e544d61737465724469737472696275746f723a204163636f756e7460448201527f20686173206120726f6c6520616e642063616e6e6f7420626520626c6f636b6c6064820152641a5cdd195960da1b608482015260a4016107db565b50506001600160a01b03919091166000908152600460205260409020805460ff1916911515919091179055565b611794611a95565b6001600160a01b0381166117f95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107db565b61180281611bfb565b50565b60008051602061252f83398151915261181d81611aef565b826001600160a01b0381166118445760405162461bcd60e51b81526004016107db90612330565b50506001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b60008051602061254f83398151915261188981611aef565b600082116118d95760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016107db565b6006544210156119475760405162461bcd60e51b815260206004820152603360248201527f4a414b414e544d61737465724469737472696275746f723a204d696e74696e67604482015272081a5cc81b9bdd08195b98589b1959081e595d606a1b60648201526084016107db565b61194f611c84565b8211156119b65760405162461bcd60e51b815260206004820152602f60248201527f4a414b414e544d61737465724469737472696275746f723a204d696e74696e6760448201526e081b1a5b5a5d08195e18d959591959608a1b60648201526084016107db565b81600760008282546119c8919061229a565b90915550506002546040516340c10f1960e01b81526001600160a01b03858116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b50505050826001600160a01b03167fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af83604051611a6e91815260200190565b60405180910390a2505050565b600061055560008051602061252f8339815191528361106e565b6001546001600160a01b03163314610f025760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107db565b6118028133611c9f565b60006111888284612261565b60006111888284612283565b611b1b828261106e565b611b92576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611b513390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611ba0828261106e565b15611b92576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b038216611c6557506001919050565b506001600160a01b031660009081526005602052604090205460ff1690565b6000611c9a600754611c946105ce565b90611cf8565b905090565b611ca9828261106e565b611b9257611cb681611d04565b611cc1836020611d16565b604051602001611cd2929190612486565b60408051601f198184030181529082905262461bcd60e51b82526107db916004016124fb565b6000611188828461224e565b60606105556001600160a01b03831660145b60606000611d25836002612283565b611d3090600261229a565b67ffffffffffffffff811115611d4857611d48611fab565b6040519080825280601f01601f191660200182016040528015611d72576020820181803683370190505b509050600360fc1b81600081518110611d8d57611d8d6122ad565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611dbc57611dbc6122ad565b60200101906001600160f81b031916908160001a9053506000611de0846002612283565b611deb90600161229a565b90505b6001811115611e63576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611e1f57611e1f6122ad565b1a60f81b828281518110611e3557611e356122ad565b60200101906001600160f81b031916908160001a90535060049490941c93611e5c816122c3565b9050611dee565b5083156111885760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107db565b600060208284031215611ec457600080fd5b81356001600160e01b03198116811461118857600080fd5b602080825282518282018190526000919060409081850190868401855b82811015611f1e57815180518552860151868501529284019290850190600101611ef9565b5091979650505050505050565b600060208284031215611f3d57600080fd5b5035919050565b60008060408385031215611f5757600080fd5b50508035926020909101359150565b6001600160a01b038116811461180257600080fd5b60008060408385031215611f8e57600080fd5b823591506020830135611fa081611f66565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fea57611fea611fab565b604052919050565b600067ffffffffffffffff82111561200c5761200c611fab565b5060051b60200190565b600082601f83011261202757600080fd5b8135602061203c61203783611ff2565b611fc1565b82815260059290921b8401810191818101908684111561205b57600080fd5b8286015b84811015612076578035835291830191830161205f565b509695505050505050565b6000806040838503121561209457600080fd5b823567ffffffffffffffff808211156120ac57600080fd5b818501915085601f8301126120c057600080fd5b813560206120d061203783611ff2565b82815260059290921b840181019181810190898411156120ef57600080fd5b948201945b8386101561211657853561210781611f66565b825294820194908201906120f4565b9650508601359250508082111561212c57600080fd5b5061213985828601612016565b9150509250929050565b60006020828403121561215557600080fd5b813561118881611f66565b60008060006060848603121561217557600080fd5b833561218081611f66565b9250602084013561219081611f66565b915060408401356121a081611f66565b809150509250925092565b600080604083850312156121be57600080fd5b82356121c981611f66565b946020939093013593505050565b600080604083850312156121ea57600080fd5b82356121f581611f66565b91506020830135611fa081611f66565b6000806040838503121561221857600080fd5b823561222381611f66565b915060208301358015158114611fa057600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561055557610555612238565b60008261227e57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761055557610555612238565b8082018082111561055557610555612238565b634e487b7160e01b600052603260045260246000fd5b6000816122d2576122d2612238565b506000190190565b60208082526036908201527f4a414b414e544d61737465724469737472696275746f723a20416374696f6e206040820152751bdb88189b1bd8dadb1a5cdd1959081858d8dbdd5b9d60521b606082015260800190565b6020808252602f908201527f4a414b414e544d61737465724469737472696275746f723a20416374696f6e2060408201526e6f6e2061646472657373207a65726f60881b606082015260800190565b6020808252602f908201527f4a414b414e544d61737465724469737472696275746f723a20526f6c6520697360408201526e08185b1c9958591e48189d5c9b9959608a1b606082015260800190565b602080825260409082018190527f4a414b414e544d61737465724469737472696275746f723a20526f6c6520616c908201527f7265616479206772616e74656420746f20616e6f74686572206163636f756e74606082015260800190565b60006001820161243e5761243e612238565b5060010190565b60006020828403121561245757600080fd5b815161118881611f66565b60005b8381101561247d578181015183820152602001612465565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516124be816017850160208801612462565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516124ef816028840160208801612462565b01602801949350505050565b602081526000825180602084015261251a816040850160208701612462565b601f01601f1916919091016040019291505056fef94103142c1baabe9ac2b5d1487bf783de9e69cfeea9a72f5c9c94afd7877b8cd96d53eb75014cde2646895909cf5231d58942a05e66e5edf0a7bf450b504df34a414b414e544d61737465724469737472696275746f723a20446973747269626ee0f19c3526ca65945666b9437299b6a1b226cdffcd62f34d1cbc222cb026825afa424c0b6204848cb71c5aa5f8da1afaf45d645ada516ab6c53bb3ff616cffa26469706673582212206b1410e2058b54b5d6d9d0c29decc81eaaf24d94c5ae26810d15a46d8ac5252464736f6c63430008140033",
  "devdoc": {
    "details": "The JAKANTMasterDistributor contract manages token distribution and related operations. It is responsible for distributing tokens to eligible recipients based on specified rules and configurations. This contract utilizes the AccessControl feature for role-based access control. This contract extends the Context and AccessControl contracts to leverage their functionality. Role-based access control allows specific roles to perform authorized actions within the contract, ensuring proper governance and security.",
    "events": {
      "Distributed(address,uint256)": {
        "details": "Modifier to check and enable distribution reduction configurations. This modifier is used to validate and enable distribution reduction configurations. It checks that the provided `_reductionTimestamp` and `_reductionAmount` meet certain criteria to ensure that reductions are allowed. The criteria include: - `_reductionTimestamp` must be greater than the timestamp of the last reduction. - `_reductionTimestamp` must be greater than or equal to the current timestamp plus 30 days. - `_reductionAmount` must be greater than or equal to half of the previous daily distribution. If all criteria are met, the modifier allows the decorated function or operation to proceed. Otherwise, it reverts with specific error messages."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addDistributionReduction(uint256,uint256)": {
        "details": "Adds a new distribution reduction to the contract. This external function allows an account with the DISTRIBUTIONS_ADMINISTRATOR_ROLE to add a new distribution reduction. A distribution reduction is a record that signifies a change in the distribution amount of tokens from a specific timestamp. The function includes a modifier `reductionEnabled` which likely contains logic to validate the input parameters `_redutionTimestamp` and `_reductionAmount`. It ensures that the reduction parameters meet certain criteria before allowing the addition of the new reduction. Once validated, the function appends a new `DistributionReduction` struct to the `distributionReductions` array. This struct includes the timestamp from which the reduction should take effect (`_redutionTimestamp`) and the new amount to be distributed from that timestamp (`_reductionAmount`).",
        "params": {
          "_reductionAmount": "The new amount to be distributed from the specified timestamp.",
          "_redutionTimestamp": "The timestamp from which the new distribution amount should apply."
        }
      },
      "approveAllowed(address,address)": {
        "details": "Public view function to check if token approval is allowed. This function is used to enforce restrictions on token approvals based on blocklist criteria. It checks whether the spender or the caller of the function (message sender) are on a blocklist. If either of these addresses are blocklisted, the function reverts the transaction, preventing the approval operation. This check is crucial in scenarios where blocklisted addresses should not be permitted to interact with the token, including being approved to spend tokens on behalf of others. By incorporating this function into the approval process, the contract adds an additional layer of security and regulatory compliance. Being a `view` function, `approveAllowed` does not alter the state of the blockchain but reads from it to ensure compliance with the blocklist rules before any approval is granted.",
        "params": {
          "_msgSender": "The address initiating the approval request. Requirements: - Neither the spender (_spender) nor the initiator of the approval (_msgSender) can be   on the blocklist. If any of them are blocklisted, the function reverts with an error message.",
          "_spender": "The address being granted permission to spend tokens."
        }
      },
      "blocklist(address,bool)": {
        "details": "External function to blocklist or unblocklist an account. This function allows an address with the `LISTER_ROLE` to either blocklist or remove an account from the contract's blocklist. Blocklisting an account may restrict it from performing certain operations or participating in specific aspects of the contract, as defined by the contract's logic. The function takes two parameters: - `_account`: The address to be either blocklisted or unblocklisted. - `_blocklist`: A boolean indicating whether to blocklist (`true`) or unblocklist (`false`)   the account. Before modifying the blocklist status, the function checks if the specified `_account` address holds any other roles within the contract (owner, lister, pauser, distributor). If the account has any of these roles, the function reverts to prevent the blocklisting of accounts with roles. Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only authorized entities can modify the blocklist.",
        "params": {
          "_account": "The address to be blocklisted or unblocklisted.",
          "_blocklist": "A boolean indicating whether to blocklist or unblocklist the account. Requirements: - The `_account` address must not be the zero address (`address(0)`).   This prevents accidentally modifying the zero address, which may have special significance. - The `_account` address must not have any other roles (owner, lister, pauser, distributor).   Accounts with these roles cannot be blocklisted."
        }
      },
      "constructor": {
        "details": "Constructor for the contract. Initializes the contract by setting the distribution start timestamp, the distribution deadline, and assigning the OWNER_ROLE to the provided owner address. The distribution start timestamp is set to 14 days from the current block time, providing a preparation period before the distribution begins. The distribution deadline is set to 30 days from the current block time, creating a finite period for the distribution process. The OWNER_ROLE is crucial for contract administration and oversight, allowing the owner to manage the contract's key operations.",
        "params": {
          "_owner": "The address that will be assigned the OWNER_ROLE, granting administrative control over the contract."
        }
      },
      "distribute(address,uint256)": {
        "details": "Distributes a specified amount of tokens to a given address. This function allows tokens to be minted and distributed to a specified address. It can only be called by an account with the JAKANT_MASTER_DISTRIBUTOR_ROLE. The function performs several checks before proceeding with the distribution: - It ensures that the amount to be distributed is greater than 0. - It verifies that the current timestamp is greater than or equal to the distributionStartTimestamp,   ensuring that the distribution period has started. - It checks that the total amount of tokens to be distributed (including the current distribution)   does not exceed the quantity available for distribution as determined by   getAvailableForDistributionTokenQuantity. If all checks pass, the function increments the distributedTokens state variable by the amount to be distributed and calls the mint function on the mproToken contract to mint the tokens to the specified address.",
        "params": {
          "_amount": "The amount of tokens to be distributed.",
          "_to": "The address to which the tokens will be distributed."
        }
      },
      "distributeBulk(address[],uint256[])": {
        "details": "Distributes tokens to multiple addresses in bulk. This function allows for the bulk distribution of tokens to a list of addresses, each receiving a specified amount. It is designed to efficiently handle multiple distributions in a single transaction. The function can only be invoked by an account with the JAKANT_MASTER_DISTRIBUTOR_ROLE. The function performs the following checks and operations: - It ensures that the length of the `_to` address array matches the length of the `_amount` array,   ensuring each address has a corresponding amount to be distributed. - It then iterates over these arrays, calling the `distribute` function for each address-amount pair.   The `distribute` function is responsible for the actual minting and transferring of tokens,   as well as performing necessary checks such as ensuring the distribution period has started and   that the total distributed amount does not exceed the available quantity. Note: This function relies on the `distribute` function for individual distributions and inherits its checks and limitations. Each distribution in the loop is treated as a separate transaction in terms of checks and effects.",
        "params": {
          "_amount": "An array of token amounts to be distributed to the respective addresses.",
          "_to": "An array of addresses to which tokens will be distributed."
        }
      },
      "getAllTokenDistribution()": {
        "details": "Calculates the total token distribution based on the initial daily distribution, the elapsed time, and any distribution reductions that have been set. The function first checks if the current timestamp is past the distribution start timestamp. If not, it returns 0, indicating that distribution has not started yet. If the distribution has started, it calculates the total distribution by taking into account the initial daily distribution and adjusting it based on any reductions that have occurred since the start of the distribution. The function iterates through each distribution reduction, checks if the current timestamp is greater than the reduction timestamp, and, if so, calculates the distribution for the time period since the last reduction. It updates the total distribution accordingly. The total distribution also includes the distribution for the period from the start timestamp until the first reduction or the current time, whichever comes first.",
        "returns": {
          "_0": "The total token distribution up to the current block timestamp."
        }
      },
      "getBurnAmount(address,uint256)": {
        "details": "Calculates the amount to be burned based on the burn rate. This function calculates the amount of tokens that should be burned from a given transaction amount, based on the current burn rate. The burn rate is applied unless the sender's address is whitelisted, in which case no tokens are burned. The function performs the following operations: - It checks if the sender (`_from`) is whitelisted using the `mproRoleManager.isWhitelisted`   function. If the sender is whitelisted, the function returns 0, indicating no burn is applied. - If the sender is not whitelisted, the function calculates the burn amount by applying the   burn rate to the transaction amount (`_amount`). The burn rate is represented as a percentage   scaled by a factor of 10000 (e.g., a burn rate of 10% is represented as 1000). The calculated   burn amount is then returned. This mechanism allows for a dynamic burn policy where certain addresses can be exempted from burning, potentially for promotional or operational purposes.",
        "params": {
          "_amount": "The amount of tokens being transferred, from which the burn amount will be calculated.",
          "_from": "The address from which the tokens are being transferred."
        },
        "returns": {
          "_0": "The calculated amount of tokens to be burned."
        }
      },
      "getDistributionReductions()": {
        "details": "External view function to retrieve the list of distribution reductions. This function provides access to the array of `distributionReductions`, which contains records of all the reductions applied to the token distribution over time. Each record in the array is a `DistributionReduction` struct, detailing the timestamp when the reduction takes effect and the new daily distribution amount after the reduction. The function does not take any parameters and returns the entire array of `distributionReductions`. This can be particularly useful for front-end interfaces or other contract interactions that require visibility into the history and schedule of distribution reductions.",
        "returns": {
          "_0": "An array of `DistributionReduction` structs, representing the history of distribution reductions."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Public function to grant a specific role to an account. This function allows the contract owner to grant a specific role to the `_account` address. Roles are used to define permissions and responsibilities within the contract, and granting a role confers those associated privileges to the specified account. The function takes two parameters: - `_role`: The bytes32 identifier of the role to be granted. - `_account`: The address to which the role is to be granted. As a safeguard, the function enforces several preconditions before granting the role: - Ensures that the `_account` address is not blocklisted, maintaining the security and integrity   of the contract by preventing potentially malicious entities from gaining privileged access. - Checks that the `_account` address is not the zero address (`address(0)`), avoiding unintentional   role assignments to an address that may have special significance or represent \"no address\". - Verifies that the role has not already been burned, ensuring that only active, valid roles are   assignable. - Confirms that the role has not already been granted, upholding the principle of unique role assignments. This function can only be called by the contract owner, ensuring that role management is kept under tight control and preventing unauthorized role assignments.",
        "params": {
          "_account": "The address to which the role is to be granted. Requirements: - The contract caller must be the contract owner. - The `_account` must not be blocklisted or the zero address. - The `_role` must not be burned or already granted.",
          "_role": "The bytes32 identifier of the role to be granted."
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isBlocklisted(address)": {
        "details": "Public view function to check if an account is blocklisted. This function allows anyone to determine if a specific account is included in the contract's blocklist. An account that is blocklisted may be restricted from performing certain operations or participating in specific aspects of the contract, as defined by the contract's logic. The function checks the `blocklisted` mapping to see if the provided `_account` address is marked as blocklisted, returning a boolean value indicating the blocklist status. Being a `view` function, it only reads the blocklist status from the contract's state and does not modify the contract. This function is typically used in access control mechanisms where actions are conditional based on whether an account is blocklisted.",
        "params": {
          "_account": "The address to be checked for blocklist status."
        },
        "returns": {
          "_0": "`true` if the account is blocklisted, `false` otherwise."
        }
      },
      "isDistributor(address)": {
        "details": "Public view function to check if an address has the JAKANTMasterDistributor role. This function provides a straightforward method to verify if a specific address has been granted the JAKANTMasterDistributor role within the contract. The JAKANTMasterDistributor role is typically associated with permissions to manage and execute token distributions, making it a critical role for the operational aspects of the contract. The function takes a single parameter: - `_address`: The address of the account to check for the JAKANTMasterDistributor role. It returns a boolean value indicating whether the specified address has the JAKANTMasterDistributor role. This is particularly useful for confirming role assignments and managing access to distribution-related functions or sections of a dApp interface.",
        "params": {
          "_address": "The address of the account to check for the JAKANTMasterDistributor role."
        },
        "returns": {
          "_0": "A boolean value indicating whether the specified address has the JAKANTMasterDistributor role."
        }
      },
      "isLister(address)": {
        "details": "Public view function to check if an account has the LISTER_ROLE. This function provides a convenient way to verify if a specific account has been granted the LISTER_ROLE within the contract. The LISTER_ROLE is typically associated with permissions to list items or manage lists within the contract's ecosystem. The function takes a single parameter: - `_account`: The address of the account to check for the LISTER_ROLE. It returns a boolean value indicating whether the specified account has the LISTER_ROLE. This can be particularly useful for front-end interfaces or other contract interactions that require a quick check of an account's roles or permissions.",
        "params": {
          "_account": "The address of the account to check for the LISTER_ROLE."
        },
        "returns": {
          "_0": "A boolean value indicating whether the specified account has the LISTER_ROLE."
        }
      },
      "mintAllowed(address)": {
        "details": "External view function to check if minting is allowed for a given address. This function checks whether the provided `_minter` address is authorized to mint new tokens. In the current implementation, minting is restricted to the contract itself, signifying that minting operations are controlled internally and not open to external entities directly. The function takes a single parameter: - `_minter`: The address to be checked for minting permissions. It returns true if the `_minter` address is the same as the address of this contract, indicating that minting is allowed. Otherwise, it reverts the transaction with the message \"Distributor only\", enforcing the rule that only the contract itself can initiate minting operations.",
        "params": {
          "_minter": "The address to be checked for minting permissions."
        },
        "returns": {
          "_0": "A boolean value indicating whether minting is allowed for the specified `_minter` address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Public function for an account to renounce a specific role it possesses. This function allows an account to voluntarily renounce a role it holds, effectively removing the associated permissions and responsibilities. It's a self-initiated action, meaning an account can only renounce roles that it possesses for itself, enhancing the security by preventing external entities from forcibly removing roles. The function takes two parameters: - `_role`: The bytes32 identifier of the role to be renounced. - `_account`: The address of the account renouncing the role. To ensure security and prevent   unintended renunciations, the function checks that `_account` is the same as `_msgSender()`. Before allowing the role to be renounced, the function performs the following check: - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent   accidental modifications of the zero address, which may have special significance. Upon successfully renouncing the role, the function updates the `assignedRoles` mapping and calls the internal `_revokeRole` function to formally remove the role.",
        "params": {
          "_account": "The address of the account renouncing the role. Requirements: - The `_account` address must not be the zero address (`address(0)`). - The `_account` must be the same as `_msgSender()`, ensuring that accounts can only renounce   roles for themselves.",
          "_role": "The bytes32 identifier of the role to be renounced."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Public function to revoke a specific role from an account. This function allows the contract owner to remove a previously granted role from the `_account` address. Roles are crucial for defining permissions and responsibilities within the contract, and revoking a role removes those associated privileges from the specified account. The function takes two parameters: - `_role`: The bytes32 identifier of the role to be revoked. - `_account`: The address from which the role is to be removed. Before revoking the role, the function performs the following checks: - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent accidental   modifications of the zero address, which may have special significance. - Ensures that the `_account` currently has the role to be revoked, providing a safeguard against   unnecessary or mistaken revocations. Access to this function is restricted to addresses with the `OWNER_ROLE`, ensuring that only contract owners or administrators can revoke roles. Upon successful revocation of the role, the function updates the `assignedRoles` mapping and calls the internal `_revokeRole` function.",
        "params": {
          "_account": "The address from which the role is to be removed. Requirements: - The `_account` address must not be the zero address (`address(0)`). - The `_account` must currently have the role that is being revoked.",
          "_role": "The bytes32 identifier of the role to be revoked."
        }
      },
      "setBurnRate(uint256)": {
        "details": "Sets the burn rate for the contract. This external function allows an account with the OWNER_ROLE to set the burn rate, which is the percentage of the tokens that will be burned during certain operations. The burn rate is expressed as a percentage with a precision of up to three decimal places. For example, a burn rate of 1000 represents a 10% burn rate (1000 / 100 = 10%). A constraint is enforced to ensure that the burn rate does not exceed 10% (represented as 1000 in the contract). This safeguard prevents setting an excessively high burn rate that could adversely impact the token economy or operations of the contract. It's critical to input the correct value for the burn rate as it directly affects the token dynamics. Only authorized accounts with the OWNER_ROLE can perform this operation, ensuring that the burn rate is controlled and updated responsibly.",
        "params": {
          "_burnRate": "The new burn rate to be set, scaled by a factor of 100. For example, to set a                 burn rate of 1%, `_burnFee` should be 10."
        }
      },
      "setDistributionStartTime(uint256)": {
        "details": "Sets a new distribution start time. This function allows the contract owner to set a new start time for the token distribution process. It ensures that the new start time is in the future, has not yet been surpassed, and is before the predefined distribution start timestamp deadline. This function can only be called if the distribution has not yet started (i.e., no tokens have been distributed). The function includes checks to ensure: 1. The distribution has not yet started (`distributedTokens` must be 0). 2. The new start time (`_startTime`) is in the future (greater than the current `block.timestamp`). 3. The new start time does not exceed the predefined deadline (`distributionStartTimestampDeadLine`). If all conditions are met, the function updates the `distributionStartTimestamp` and emits a `SetDistribiutionStartTime` event with the new start time.",
        "params": {
          "_startTime": "The new start time for token distribution."
        }
      },
      "setDistributorTimeAdministratorRole(address)": {
        "details": "Assigns the DISTRIBUTIONS_ADMINISTRATOR_ROLE to a specified address. This function allows an account with the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to delegate the responsibilities of distribution time administration to a specific account. This role is crucial for managing the distribution schedule and ensuring the proper administration of the distribution process. The function includes checks to ensure: 1. The caller has the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role, allowing them to manage this role. 2. The DISTRIBUTIONS_ADMINISTRATOR_ROLE has not been burned (permanently deactivated). 3. The DISTRIBUTIONS_ADMINISTRATOR_ROLE has not already been granted to another account. If the role is available and active, the function grants the DISTRIBUTIONS_ADMINISTRATOR_ROLE to the specified address, marks the role as assigned in the `assignedRoles` mapping, and emits a `SetDistributorTimeAdministratorRole` event with the address of the new role administrator.",
        "params": {
          "_roleManagerAddress": "The address to be assigned the DISTRIBUTIONS_ADMINISTRATOR_ROLE."
        }
      },
      "setDistributorTimeAdministratorRoleManager(address)": {
        "details": "Assigns the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to a specified address. This function allows the contract owner to delegate the management of distribution time administrators to a specific account. This is crucial for decentralized management and control over the distribution process. The function includes checks to ensure: 1. The role has not been burned (permanently deactivated). 2. The role has not already been granted to another account. If the role is available and active, the function grants the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to the specified address, marks the role as assigned in the `assignedRoles` mapping, and emits a `SetDistributorTimeAdministratorRoleManager` event with the address of the new role manager.",
        "params": {
          "_roleManagerAddress": "The address to be assigned the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role."
        }
      },
      "setJAKANTToken(address)": {
        "details": "Sets the address of the MPRO token contract. This function allows the contract owner to set or update the address of the MPRO token contract to be used in the distribution. It includes a check to ensure that the MPRO token address is not already set, preventing accidental overwriting of the token address. This is a critical function as it establishes the link to the MPRO token that will be distributed by this contract. The function can only be successfully called once, as the MPRO token address is intended to be immutable once set to prevent unauthorized changes. If the token address has not been set before, the function updates the `mproToken` state variable and emits a `SetJAKANTToken` event with the new MPRO token address.",
        "params": {
          "_mproTokenAddress": "The address of the MPRO token contract to be set."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAllowed(address,address,address)": {
        "details": "Public view function to check if a token transfer is allowed. This function is used to enforce restrictions on token transfers based on blocklist criteria. It checks whether any of the involved parties in a token transfer (the sender, receiver, and the caller of the function) are on a blocklist. If any of these addresses are blocklisted, the function reverts the transaction, preventing the transfer. Being a `view` function, it does not modify the state of the blockchain but reads from it. This function can be integrated into the token transfer process to add an additional layer of security and compliance, ensuring that tokens cannot be transferred by or to blocklisted addresses.",
        "params": {
          "_from": "The address attempting to send tokens.",
          "_msgSender": "The address initiating the transfer request. Requirements: - None of the involved addresses (_from, _to, and _msgSender) can be on the blocklist.   If any are blocklisted, the function reverts with an error message.",
          "_to": "The address intended to receive the tokens."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelist(address,bool)": {
        "details": "External function to whitelist or unwhitelist an account. This function allows an address with the `LISTER_ROLE` to either whitelist or remove an account from the contract's whitelist. Whitelisting typically grants certain privileges or exemptions to the whitelisted account, while removing an account from the whitelist revokes these privileges. The function takes two parameters: - `_account`: The address to be either whitelisted or removed from the whitelist. - `_whitelist`: A boolean indicating whether to whitelist (`true`) or unwhitelist (`false`)   the account. The function sets the whitelisting status of the specified account by updating the `whitelisted` mapping accordingly. Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only authorized entities can modify the whitelist.",
        "params": {
          "_account": "The address to be whitelisted or unwhitelisted.",
          "_whitelist": "A boolean indicating whether to whitelist or unwhitelist the account. Requirements: - The `_account` address must not be the zero address (`address(0)`).   This prevents accidentally modifying the zero address, which may have special significance."
        }
      }
    },
    "stateVariables": {
      "SECONDS_PER_DAY": {
        "details": "Constant representing the number of seconds in a day. This constant defines the number of seconds in a day, which is used for time calculations within the contract. It is set to the standard value of 86,400 seconds per day."
      },
      "blocklisted": {
        "details": "Internal mapping to manage blocklisted addresses. This mapping associates addresses (keys) with boolean values to maintain a list of addresses that are considered \"blocklisted\" within the contract's logic. If an address is included in this mapping with a `true` value, it indicates that the address is blocklisted and may be subject to certain restrictions or limitations imposed by the contract. The mapping is typically used in access control mechanisms and other parts of the contract's logic to determine the behavior or privileges associated with addresses based on their blocklist status."
      },
      "burnRate": {
        "details": "Public variable representing the burn rate for tokens. This variable determines the burn rate for tokens within the contract, expressed as a percentage. A burn rate of 1000 corresponds to 10%, where a portion of tokens is burned during certain operations. A burn rate of 10000 would represent 100%. The value of this variable can be adjusted to control the rate at which tokens are burned during specific actions, impacting the total token supply over time."
      },
      "distributedTokens": {
        "details": "Private variable to keep track of the total tokens distributed. This variable is used to maintain a count of the total tokens that have been distributed within the contract. It starts at zero and is updated whenever tokens are distributed to recipients. It serves as a record of the cumulative tokens distributed and is often used to enforce distribution limits or to check the available tokens for distribution."
      },
      "distributionReductions": {
        "details": "Public array to store distribution reduction configurations. This dynamic array stores instances of the `DistributionReduction` struct, representing configurations for reducing the daily token distribution over time. Each element of the array specifies a different reduction configuration, and the array can grow as more configurations are added. These configurations determine when and how the daily distribution amount of tokens changes over time, allowing for flexibility in managing token distribution within the contract."
      },
      "distributionStartTimestamp": {
        "details": "Timestamp indicating when token distribution starts. This private state variable stores the Unix timestamp (in seconds) that marks the beginning of the token distribution period. The value is set during the contract initialization and can be updated by specific functions within the contract, depending on the contract's logic. The distributionStartTimestamp is used in various functions to determine whether the distribution period has begun. This allows for conditional logic based on the time, such as enabling token distributions only after this timestamp is reached. Being a private variable, it can only be accessed and modified by functions within this contract, providing a controlled and secure way to manage the start of the distribution phase."
      },
      "distributionStartTimestampDeadLine": {
        "details": "Private immutable variable representing the deadline for the distribution start timestamp. This variable is used to store an immutable timestamp that defines the deadline for the distribution start timestamp within the contract. It is typically set during contract initialization and remains constant throughout the contract's lifetime. The distribution start timestamp deadline indicates the latest permissible timestamp for starting the distribution of tokens. After this deadline, distribution start timestamps beyond this value will not be accepted."
      },
      "initialDaylyDistribution": {
        "details": "Private constant representing the initial daily distribution of tokens. This constant defines the initial daily distribution of tokens within the contract. It represents a fixed amount of tokens that are distributed daily as part of a distribution mechanism. The value is expressed in the contract's token decimals, and it remains constant throughout the contract's lifetime."
      },
      "whitelisted": {
        "details": "Internal mapping to manage whitelisted addresses. This mapping associates addresses (keys) with boolean values to maintain a list of addresses that are considered \"whitelisted\" within the contract's logic. If an address is included in this mapping with a `true` value, it indicates that the address is whitelisted and may have special privileges or exemptions within the contract. The mapping is typically used in access control mechanisms and other parts of the contract's logic to determine the behavior or privileges associated with addresses based on their whitelist status."
      }
    },
    "title": "MPRO Master Distributor Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2872,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2867_storage)"
      },
      {
        "astId": 3244,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9963,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "mproToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IJAKANTToken)9920"
      },
      {
        "astId": 9967,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "assignedRoles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 9972,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "blocklisted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9977,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9980,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "distributionStartTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9987,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "distributedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10000,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "distributionReductions",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(DistributionReduction)9936_storage)dyn_storage"
      },
      {
        "astId": 10004,
        "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
        "label": "burnRate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DistributionReduction)9936_storage)dyn_storage": {
        "base": "t_struct(DistributionReduction)9936_storage",
        "encoding": "dynamic_array",
        "label": "struct JAKANTMasterDistributor.DistributionReduction[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IJAKANTToken)9920": {
        "encoding": "inplace",
        "label": "contract IJAKANTToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2867_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2867_storage"
      },
      "t_struct(DistributionReduction)9936_storage": {
        "encoding": "inplace",
        "label": "struct JAKANTMasterDistributor.DistributionReduction",
        "members": [
          {
            "astId": 9933,
            "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
            "label": "reductionTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9935,
            "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
            "label": "daylyDistribution",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)2867_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2864,
            "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2866,
            "contract": "contracts/MPROMasterDistributor.sol:JAKANTMasterDistributor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}