{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/CommunityReward.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n// TODO remove console\nimport \"hardhat/console.sol\";\n\ncontract CommunityReward is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 stakeToken; // Address of LP token contract.\n        uint256 lastRewardBlock; // Last block number that RewardToken distribution occurs.\n        uint256 accRewardTokenPerShare; // Accumulated RewardToken per share, times 1e18. See below.\n    }\n\n    // The StakeToken! (this can be also an CS-LP token)\n    IERC20 public immutable stakeToken;\n\n    // Token that will be used as a reward for Staking.\n    IERC20 public immutable rewardToken;\n\n    // Token reward created per block.\n    uint256 public immutable rewardPerBlock;\n\n    // Info of pool.\n    PoolInfo public poolInfo;\n    // Info of each user that stakes LP/Tokens.\n    mapping(address => UserInfo) public userInfo;\n    // The block number when StakeToken mining starts.\n    uint256 public immutable startBlock;\n    // The block number when StakeToken mining ends.\n    uint256 public immutable endBlock;\n\n    // Burn address\n    address public burnAddress;\n    // Treasury address\n    address public divPoolAddress;\n\n    // Referral fee that is fixed on 15%\n    uint256 public constant DIV_REFERRAL_FEE = 1500;\n\n    //Fees to burn and treasury\n    uint256 public immutable divPoolFee;\n    uint256 public immutable divBurnFee;\n\n    // Referral contract address\n    address public rewardReferral;\n\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event RewardWithdraw(address indexed user, uint256 amount);\n    event StopReward(address indexed user, uint256 _endBlock);\n    event RewardPaid(address indexed user, uint256 reward);\n    event ReferralPaid(\n        address indexed user,\n        address indexed userTo,\n        uint256 reward\n    );\n    event SetRewardReferralAddress(\n        address indexed sender,\n        address indexed referralAddress\n    );\n    event SetDevPoolAddress(\n        address indexed sender,\n        address indexed divPoolAddress\n    );\n    event SetBurnAddress(address indexed sender, address indexed burnAddress);\n\n    constructor(\n        IERC20 _stakeToken, //token which will be staked\n        IERC20 _rewardToken, //token which will be a reward for staking\n        address _burnAddress, //address for burn fee\n        address _divPoolAddress, //address for treasury fee\n        uint256 _rewardPerBlock, //number of token rewards per block\n        uint256 _startBlock, //when the pool will start\n        uint256 _endBlock, // when the pool will end\n        uint256 _divPoolFee, //fee to treasury on deposit\n        uint256 _divBurnFee //fee to burn tokens\n    ) {\n        require(\n            _divPoolFee.add(_divBurnFee) <= 500,\n            \"Total fee cannot be higher than 5%\"\n        );\n        stakeToken = _stakeToken;\n        rewardToken = _rewardToken;\n        burnAddress = _burnAddress;\n        divPoolAddress = _divPoolAddress;\n        rewardPerBlock = _rewardPerBlock;\n        startBlock = _startBlock;\n        endBlock = _endBlock;\n        divPoolFee = _divPoolFee;\n        divBurnFee = _divBurnFee;\n\n        // staking pool\n        poolInfo = PoolInfo({\n            stakeToken: _stakeToken,\n            lastRewardBlock: _startBlock,\n            accRewardTokenPerShare: 0\n        });\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplierForBlocks(\n        uint256 _from,\n        uint256 _to\n    ) public view returns (uint256) {\n        if (_to <= endBlock) {\n            return _to.sub(_from);\n        } else if (_from >= endBlock) {\n            return 0;\n        } else {\n            return endBlock.sub(_from);\n        }\n    }\n\n    // View function to see pending Reward on frontend.\n    function pendingReward(address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo;\n        UserInfo storage user = userInfo[_user];\n        uint256 accRewardTokenPerShare = pool.accRewardTokenPerShare;\n        uint256 stakeTokenSupply = pool.stakeToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && stakeTokenSupply != 0) {\n            uint256 multiplier = getMultiplierForBlocks(\n                pool.lastRewardBlock,\n                block.number\n            );\n            console.log(\n                user.amount,\n                user.rewardDebt,\n                \"multipliermultipliermultiplier\"\n            );\n            uint256 rewardTokenReward = multiplier.mul(rewardPerBlock);\n            accRewardTokenPerShare = accRewardTokenPerShare.add(\n                rewardTokenReward.mul(1e18).div(stakeTokenSupply)\n            );\n        }\n        return\n            user.amount.mul(accRewardTokenPerShare).div(1e18).sub(\n                user.rewardDebt\n            );\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool() public {\n        PoolInfo storage pool = poolInfo;\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 stakeTokenSupply = pool.stakeToken.balanceOf(address(this));\n        if (stakeTokenSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplierForBlocks(\n            pool.lastRewardBlock,\n            block.number\n        );\n\n        console.log(\n            multiplier,\n            pool.accRewardTokenPerShare,\n            \"pool.accRewardTokenPerSharepool.accRewardTokenPerSharepool.accRewardTokenPerShare\"\n        );\n        uint256 rewardTokenReward = multiplier.mul(rewardPerBlock);\n        pool.accRewardTokenPerShare = pool.accRewardTokenPerShare.add(\n            rewardTokenReward.mul(1e18).div(stakeTokenSupply)\n        );\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Stake StakeToken and Harvest rewardTokens to CommunityReward\n    function deposit(uint256 _amount, address referrer) public {\n        console.log(referrer, msg.sender);\n        PoolInfo storage pool = poolInfo;\n        UserInfo storage user = userInfo[msg.sender];\n        // anti -backdoor\n        require(\n            (block.number >= pool.lastRewardBlock || _amount == 0),\n            \"pool didnt start yet\"\n        );\n\n        updatePool();\n\n        if (user.amount > 0) {\n            uint256 pending = user\n                .amount\n                .mul(pool.accRewardTokenPerShare)\n                .div(1e18)\n                .sub(user.rewardDebt);\n            if (pending > 0) {\n                payRefFees(pending);\n                console.log(pending, \"pending\");\n                rewardToken.safeTransfer(address(msg.sender), pending);\n                emit RewardPaid(msg.sender, pending);\n            }\n        }\n\n        if (_amount > 0) {\n            pool.stakeToken.safeTransferFrom(\n                address(msg.sender),\n                address(this),\n                _amount\n            );\n            // if divPoolFee = 375 ==>  375 * 1/10000 = 3,75% fee\n            uint256 treasuryFee = _amount.mul(divPoolFee).div(10000);\n            pool.stakeToken.safeTransfer(divPoolAddress, treasuryFee);\n\n            // if divBurnFee = 125 ==>  125 * 1/10000 = 1,25% fee\n            uint256 burnFee = _amount.mul(divBurnFee).div(10000);\n            pool.stakeToken.safeTransfer(burnAddress, burnFee);\n\n            user.amount = user.amount.add(_amount).sub(treasuryFee).sub(\n                burnFee\n            );\n        }\n\n        user.rewardDebt = user.amount.mul(pool.accRewardTokenPerShare).div(\n            1e18\n        );\n\n        emit Deposit(msg.sender, _amount);\n    }\n\n    // Withdraw StakeToken tokens from farm.\n    function withdraw(uint256 _amount) external {\n        PoolInfo storage pool = poolInfo;\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool();\n        uint256 pending = user\n            .amount\n            .mul(pool.accRewardTokenPerShare)\n            .div(1e18)\n            .sub(user.rewardDebt);\n        if (pending > 0) {\n            payRefFees(pending);\n\n            rewardToken.safeTransfer(address(msg.sender), pending);\n            emit RewardPaid(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.stakeToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accRewardTokenPerShare).div(\n            1e18\n        );\n\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    // Pay referrals equal to the 15% of pending amount\n    function payRefFees(uint256 pending) internal {\n        // 15%\n        uint256 toReferral = pending.mul(DIV_REFERRAL_FEE).div(10000);\n\n        address referrer = address(0);\n\n        if (referrer != address(0)) {\n            // send commission to referrer\n            rewardToken.safeTransfer(referrer, toReferral);\n            emit ReferralPaid(msg.sender, referrer, toReferral);\n        }\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw() public {\n        PoolInfo storage pool = poolInfo;\n        UserInfo storage user = userInfo[msg.sender];\n        pool.stakeToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    /* Withdraw reward to the treasury.\n     Because of the referrals its hard to calculate exact reward tokens needed to be reserved for rewards.\n     For that reason owner will provide 115% of the value and can withdraw remaining tokens 10 days after farm is closed*/\n    function rewardWithdraw() public onlyOwner {\n        require(\n            endBlock <= block.number + 288000,\n            \"It too early to withdraw reward tokens\"\n        ); //10 days\n        uint256 balance = rewardToken.balanceOf(address(this));\n        rewardToken.safeTransfer(divPoolAddress, balance);\n        emit RewardWithdraw(msg.sender, balance);\n    }\n\n    // Set address of CSSReferral contract\n    function setRewardReferral(address _rewardReferral) external onlyOwner {\n        rewardReferral = _rewardReferral;\n        emit SetRewardReferralAddress(msg.sender, _rewardReferral);\n    }\n\n    // Update treasury address by the owner.\n    function setDivPoolAddress(address _divPoolAddress) public onlyOwner {\n        divPoolAddress = _divPoolAddress;\n        emit SetDevPoolAddress(msg.sender, _divPoolAddress);\n    }\n\n    // Update burn address by the owner.\n    function setBurnAddress(address _burnAddr) public onlyOwner {\n        burnAddress = _burnAddr;\n        emit SetBurnAddress(msg.sender, _burnAddr);\n    }\n}\n"
    },
    "contracts/MasterCSS.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n//  referral\ninterface CssReferral {\n    function setCssReferral(address farmer, address referrer) external;\n\n    function getCssReferral(address farmer) external view returns (address);\n}\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\n\n// MasterCSS is the master of CSS. He can make Css and he is a fair guy.\n//\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once CSS is sufficiently\n// distributed and the community can show to govern itself.\n//\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract MasterCSS is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of CSS\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accCssPerShare ) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accCssPerShare ` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. CSS to distribute per block.\n        uint256 lastRewardBlock; // Last block number that CSS distribution occurs.\n        uint256 accCssPerShare; // Accumulated CSS per share, times 1e12. See below.\n        uint256 fee;\n    }\n\n    // The CSS TOKEN!\n    IERC20 public st;\n\n    //steps in time to change cssPerBlock\n    uint256 public immutable timeFirstStep;\n    uint256 public immutable timeSecondStep;\n    uint256 public immutable timeThirdStep;\n    uint256 public immutable timeForthStep;\n    uint256 public immutable timeFifthStep;\n\n    // Dev address\n    address public devAddress;\n    // Treasury address\n    address public divPoolAddress;\n    // CSS tokens created per block.\n    uint256 public cssPerBlock;\n\n    // Multiplier that can be use to multiply all farm rewards (allocationPoints)\n    uint256 public bonusMultiplier = 1;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint;\n    // The block number when This   mining starts.\n    uint256 public startBlock;\n\n    // Mint fee that is fixed on 8%\n    uint256 public constant MINT_FEE = 800;\n\n    // Referral fee that is fixed on 15%\n    uint256 public constant DIV_REFERRAL_FEE = 1500;\n\n    //Fees to dev and treasury (3,75% and 1,25%)\n    uint256 public constant DIV_POOL_FEE = 375;\n    uint256 public constant DIV_DEV_FEE = 125;\n\n    // Pool Id of stake token - CSS\n    uint256 public immutable stakePoolId;\n\n    // Referral contract address\n    address public rewardReferral;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n    event RewardPaid(address indexed user, uint256 reward);\n    event ReferralPaid(\n        address indexed user,\n        address indexed userTo,\n        uint256 reward\n    );\n    event Burned(uint256 reward);\n    event SetRewardReferralAddress(\n        address indexed sender,\n        address indexed referralAddress\n    );\n    event SetDevPoolAddress(\n        address indexed sender,\n        address indexed divPoolAddress\n    );\n    event SetDevAddress(address indexed sender, address indexed devAddress);\n    event SetEnableMethod(\n        address indexed sender,\n        uint256 methodId,\n        bool enabled\n    );\n\n    mapping(uint256 => bool) public enableMethod;\n\n    constructor(\n        IERC20 _st,\n        address _devAddress,\n        address _divPoolAddress,\n        uint256 _startBlock\n    ) public {\n        st = _st;\n        devAddress = _devAddress;\n        divPoolAddress = _divPoolAddress;\n        cssPerBlock = 6 * 10 ** 17;\n        startBlock = _startBlock;\n\n        // adds CSS as first pool token with pid = 0\n        poolExistence[_st] = true;\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _st,\n                allocPoint: 2000,\n                lastRewardBlock: startBlock,\n                accCssPerShare: 0,\n                fee: 0\n            })\n        );\n\n        // stakePoolId cannot be changed afterwards\n        stakePoolId = 0;\n\n        // Must be the sum of all allocation points in all pools. Initially 1500 because of stake ERC20  pool\n        totalAllocPoint = 2000;\n\n        enableMethod[0] = false;\n        enableMethod[1] = false;\n        enableMethod[2] = true;\n\n        timeFirstStep = block.timestamp + 10 days;\n        timeSecondStep = block.timestamp + 365 days;\n        timeThirdStep = block.timestamp + 730 days;\n        timeForthStep = block.timestamp + 1095 days;\n        timeFifthStep = block.timestamp + 1460 days;\n    }\n\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\n        bonusMultiplier = multiplierNumber;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    //used to prevent LP token duplication\n    mapping(IERC20 => bool) public poolExistence;\n    modifier nonDuplicated(IERC20 _lpToken) {\n        require(poolExistence[_lpToken] == false, \"nonDuplicated: duplicated\");\n        _;\n    }\n\n    //validated if the pool with _pid exists\n    modifier validatePoolByPid(uint256 _pid) {\n        require(_pid < poolInfo.length, \"Pool does not exist\");\n        _;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // Each LP token address can be added only once- safeguarded by poolExistence\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        bool _withUpdate,\n        uint256 __lastRewardBlock,\n        uint256 __fee\n    ) public onlyOwner nonDuplicated(_lpToken) {\n        // if _fee == 10 then 100% of dev and treasury fee is applied, if _fee = 5 then 50% discount, if 0 , no fee\n        require(\n            __fee <= 10,\n            \"Fee is higher than allowed: must be in range 0-10 (0-100%)\"\n        );\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 lastRewardBlock = __lastRewardBlock == 0\n            ? block.number > startBlock\n                ? block.number\n                : startBlock\n            : __lastRewardBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolExistence[_lpToken] = true;\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                accCssPerShare: 0,\n                fee: __fee\n            })\n        );\n    }\n\n    // Update the given pool's CSS allocation point. Can only be called by the owner. If update lastrewardblock, need update pools\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate,\n        uint256 __lastRewardBloc,\n        uint256 __fee\n    ) public onlyOwner validatePoolByPid(_pid) {\n        // if _fee == 10 then 100% of dev and treasury fee is applied, if _fee = 5 then 50% discount, if 0 , no fee\n        require(\n            __fee <= 10,\n            \"Fee is higher than allowed: must be in range 0-10 (0-100%)\"\n        );\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n            _allocPoint\n        );\n        poolInfo[_pid].allocPoint = _allocPoint;\n        if (__lastRewardBloc > 0)\n            poolInfo[_pid].lastRewardBlock = __lastRewardBloc;\n\n        poolInfo[_pid].fee = __fee;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(\n        uint256 _from,\n        uint256 _to\n    ) public view returns (uint256) {\n        return _to.sub(_from).mul(bonusMultiplier);\n    }\n\n    // View function to see pending tokens on frontend.\n    function pendingReward(\n        uint256 _pid,\n        address _user\n    ) external validatePoolByPid(_pid) returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accCssPerShare = pool.accCssPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n\n        if (block.timestamp < timeFirstStep) cssPerBlock = 6 * 10 ** 17;\n        else if (\n            timeFirstStep < block.timestamp && block.timestamp < timeSecondStep\n        ) cssPerBlock = 45 * 10 ** 16;\n        else if (\n            timeSecondStep < block.timestamp && block.timestamp < timeThirdStep\n        ) cssPerBlock = 41 * 10 ** 16;\n        else if (\n            timeThirdStep < block.timestamp && block.timestamp < timeForthStep\n        ) cssPerBlock = 37 * 10 ** 16;\n        else if (\n            timeForthStep < block.timestamp && block.timestamp < timeFifthStep\n        ) cssPerBlock = 33 * 10 ** 16;\n        else if (timeFifthStep < block.timestamp) cssPerBlock = 29 * 10 ** 16;\n\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(\n                pool.lastRewardBlock,\n                block.number\n            );\n            uint256 cssReward = multiplier\n                .mul(cssPerBlock)\n                .mul(pool.allocPoint)\n                .div(totalAllocPoint);\n\n            uint256 divMintFee = cssReward.mul(MINT_FEE).div(10000);\n\n            accCssPerShare = accCssPerShare.add(\n                (cssReward.sub(divMintFee)).mul(1e12).div(lpSupply)\n            );\n        }\n        return user.amount.mul(accCssPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n\n        if (block.timestamp < timeFirstStep) cssPerBlock = 6 * 10 ** 17;\n        else if (\n            timeFirstStep < block.timestamp && block.timestamp < timeSecondStep\n        ) cssPerBlock = 45 * 10 ** 16;\n        else if (\n            timeSecondStep < block.timestamp && block.timestamp < timeThirdStep\n        ) cssPerBlock = 41 * 10 ** 16;\n        else if (\n            timeThirdStep < block.timestamp && block.timestamp < timeForthStep\n        ) cssPerBlock = 37 * 10 ** 16;\n        else if (\n            timeForthStep < block.timestamp && block.timestamp < timeFifthStep\n        ) cssPerBlock = 33 * 10 ** 16;\n        else if (timeFifthStep < block.timestamp) cssPerBlock = 29 * 10 ** 16;\n\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 cssReward = multiplier\n            .mul(cssPerBlock)\n            .mul(pool.allocPoint)\n            .div(totalAllocPoint);\n\n        uint256 devMintAmount = cssReward.mul(MINT_FEE).div(10000);\n        //mint to dev - fixed 8%\n        // st.mint(devAddress, devMintAmount);\n\n        //mint to sender - fixed 92%\n        // st.mint(address(this), cssReward.sub(devMintAmount));\n\n        pool.accCssPerShare = pool.accCssPerShare.add(\n            cssReward.sub(devMintAmount).mul(1e12).div(lpSupply)\n        );\n        pool.lastRewardBlock = block.number;\n    }\n\n    // Harvest All Rewards pools where user has pending balance at same time!  Be careful of gas spending!\n    function massHarvest(uint256[] memory idsx) public {\n        require(enableMethod[0], \"Method not enabled in contract\");\n\n        uint256 idxlength = idsx.length;\n        address nulladdress = address(0);\n        for (uint256 i = 0; i < idxlength; i++) {\n            deposit(idsx[i], 0, nulladdress);\n        }\n    }\n\n    // Stake All Rewards to stakepool all pools where user has pending balance at same time!  Be careful of gas spending!\n    function massStake(uint256[] memory idsx) public {\n        require(enableMethod[1], \"Method not enabled in contract\");\n        uint256 idxlength = idsx.length;\n        for (uint256 i = 0; i < idxlength; i++) {\n            stakeReward(idsx[i]);\n        }\n    }\n\n    // Deposit LP tokens to MasterCSS for CSS allocation.\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        address referrer\n    ) public validatePoolByPid(_pid) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        // anti -backdoor\n        require(\n            (block.number >= pool.lastRewardBlock || _amount == 0),\n            \"pool didnt start yet\"\n        );\n\n        updatePool(_pid);\n        if (\n            _amount > 0 &&\n            rewardReferral != address(0) &&\n            referrer != address(0)\n        ) {\n            CssReferral(rewardReferral).setCssReferral(msg.sender, referrer);\n        }\n\n        if (user.amount > 0) {\n            uint256 pending = user\n                .amount\n                .mul(pool.accCssPerShare)\n                .div(1e12)\n                .sub(user.rewardDebt);\n            if (pending > 0) {\n                payRefFees(pending);\n                safeTransfer(msg.sender, pending);\n                emit RewardPaid(msg.sender, pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.lpToken.safeTransferFrom(\n                address(msg.sender),\n                address(this),\n                _amount\n            );\n            if (pool.fee > 0) {\n                // if pool.fee = 10 ==>  375 * 10/100000 = 3,75% fee\n                // if pool.fee = 5 ==>  375 * 5/100000 = 1,875% fee\n                // if pool.fee = 0 ==>  375 * 0/100000 = 0 fee\n                uint256 treasuryFee = _amount\n                    .mul(pool.fee)\n                    .mul(DIV_POOL_FEE)\n                    .div(100000);\n                uint256 devFee = _amount.mul(pool.fee).mul(DIV_DEV_FEE).div(\n                    100000\n                );\n\n                pool.lpToken.safeTransfer(divPoolAddress, treasuryFee);\n                pool.lpToken.safeTransfer(devAddress, devFee);\n\n                user.amount = user.amount.add(_amount).sub(treasuryFee).sub(\n                    devFee\n                );\n            } else {\n                user.amount = user.amount.add(_amount);\n            }\n        }\n\n        user.rewardDebt = user.amount.mul(pool.accCssPerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    // user can choose autoStake reward to stake pool instead just harvest\n    function stakeReward(uint256 _pid) public validatePoolByPid(_pid) {\n        require(enableMethod[2] && _pid != stakePoolId);\n\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        if (user.amount > 0) {\n            PoolInfo storage pool = poolInfo[_pid];\n\n            updatePool(_pid);\n\n            uint256 pending = user\n                .amount\n                .mul(pool.accCssPerShare)\n                .div(1e12)\n                .sub(user.rewardDebt);\n            if (pending > 0) {\n                payRefFees(pending);\n\n                safeTransfer(msg.sender, pending);\n                emit RewardPaid(msg.sender, pending);\n\n                deposit(stakePoolId, pending, address(0));\n            }\n            user.rewardDebt = user.amount.mul(pool.accCssPerShare).div(1e12);\n        }\n    }\n\n    // Withdraw LP tokens from MasterCSS.\n    function withdraw(\n        uint256 _pid,\n        uint256 _amount\n    ) public validatePoolByPid(_pid) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accCssPerShare).div(1e12).sub(\n            user.rewardDebt\n        );\n        if (pending > 0) {\n            payRefFees(pending);\n\n            safeTransfer(msg.sender, pending);\n            emit RewardPaid(msg.sender, pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accCssPerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    function payRefFees(uint256 pending) internal {\n        uint256 toReferral = pending.mul(DIV_REFERRAL_FEE).div(10000);\n        // 15%\n\n        address referrer = address(0);\n        if (rewardReferral != address(0)) {\n            referrer = CssReferral(rewardReferral).getCssReferral(msg.sender);\n        }\n\n        if (referrer != address(0)) {\n            // send commission to referrer\n            // st.mint(referrer, toReferral);\n            emit ReferralPaid(msg.sender, referrer, toReferral);\n        }\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public validatePoolByPid(_pid) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    function safeTransfer(address _to, uint256 _amount) internal {\n        uint256 sbal = st.balanceOf(address(this));\n        if (_amount > sbal) {\n            st.transfer(_to, sbal);\n        } else {\n            st.transfer(_to, _amount);\n        }\n    }\n\n    function setDivPoolAddress(address _divPoolAddress) public onlyOwner {\n        divPoolAddress = _divPoolAddress;\n        emit SetDevPoolAddress(msg.sender, _divPoolAddress);\n    }\n\n    // Update dev address by the previous dev.\n    function setDevAddress(address _devaddr) public onlyOwner {\n        devAddress = _devaddr;\n        emit SetDevAddress(msg.sender, _devaddr);\n    }\n\n    function setEnableMethod(uint256 _id, bool enabled) public onlyOwner {\n        enableMethod[_id] = enabled;\n        emit SetEnableMethod(msg.sender, _id, enabled);\n    }\n\n    function setRewardReferral(address _rewardReferral) external onlyOwner {\n        rewardReferral = _rewardReferral;\n        emit SetRewardReferralAddress(msg.sender, _rewardReferral);\n    }\n}\n"
    },
    "contracts/mocks/MockedMPROStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"hardhat/console.sol\";\n\ncontract MockedMPROStake {\n    struct Staker {\n        uint256 staked;\n        uint256 lastUpdatedAt;\n        uint256 balanceToClaim;\n        uint256 claimedBalance;\n        uint256 reward;\n    }\n    // Stakers\n    mapping(address => Staker) public staker;\n\n    function transferStake(address _stakeAddress) external {\n        // require NextStake(_stakeAddress).moveToStake(msg.sender) to not be reverted\n        (\n            bool _success,\n            string memory _message,\n            uint256 _stakeAmount\n        ) = NextStake(_stakeAddress).moveToStake(msg.sender);\n        console.log(\"Success: %s\", _success, _message, _stakeAmount);\n        if (_success) {\n            staker[msg.sender].staked += _stakeAmount;\n            staker[msg.sender].lastUpdatedAt = block.timestamp;\n        } else {\n            revert(_message);\n        }\n    }\n}\n\ninterface NextStake {\n    function moveToStake(\n        address _stakerAddress\n    ) external returns (bool, string memory, uint256);\n}\n"
    },
    "contracts/mocks/MPROTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MPROTest is ERC20 {\n    constructor() ERC20(\"MPROTest\", \"MPROTest\") {}\n\n    function distibute(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n}\n"
    },
    "contracts/MPRORewardStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n// TODO remove console\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MPRORewardStakeDepreciated is Ownable, Pausable {\n    using SafeMath for uint256;\n\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    ERC20 public immutable rewardToken;\n    address public rewardTokenAddress;\n\n    // Start of staking period\n    uint256 public stakeStartTimestamp;\n    // End of staking period\n    uint256 public stakeEndTimestamp;\n    // Start of updating period\n    uint256 public updateStakersStartTimestamp;\n    // End of updating period\n    uint256 public updateStakersEndTimestamp;\n    // Reward to be paid out per second\n    uint256 public rewardRate;\n    // Quantity of reward token to be paid out\n    uint256 public rewardTokenQuantity;\n    // Total staked\n    uint256 public totalStakedSupply;\n\n    // DECLARATION CONFIG\n    // Start timestamp of the declaration period (enable to add new wallets to the staking pool)\n    uint256 public declarationStartTimestamp;\n    // End timestamp of the declaration period (disable to add new wallets to the staking pool)\n    uint256 public declarationEndTimestamp;\n\n    struct Staker {\n        uint256 staked;\n        uint256 lastUpdatedAt;\n        uint256 balanceWithRewards;\n        uint256 claimedBalance;\n        uint256 reward;\n    }\n    // Stakers\n    mapping(address => Staker) public staker;\n\n    struct StakeUpdate {\n        uint256 _blockTimestamp;\n        uint256 _updatedAmount;\n    }\n\n    mapping(address => StakeUpdate[]) public walletStakeUpdates;\n\n    // CLAIM REWARD CONFIG\n    // Start timestamp for claiming rewards\n    uint256 public claimRewardStartTimestamp;\n    // Reward unlock percent per period (10000 = 100%, 9000 = 90%, etc.)\n    uint256 public rewardUnlockPercentPerPeriod = 10000;\n    // Duration of each claim period in seconds\n    uint256 public claimPeriodDuration;\n\n    mapping(address => bool) public isStakeWhitelisted;\n\n    mapping(address => bool) public isUpdaterWhitelisted;\n\n    modifier onlyWhitelistedStakes() {\n        require(\n            isStakeWhitelisted[msg.sender],\n            \"MPRORewardStake: Stake contract is not whitelisted\"\n        );\n        _;\n    }\n\n    modifier onlyWhitelistedUpdaters() {\n        require(\n            isUpdaterWhitelisted[msg.sender] || msg.sender == owner(),\n            \"MPRORewardStake: Address is not whitelisted updater\"\n        );\n        _;\n    }\n\n    constructor(address _rewardTokenAddress, address _newOwner) {\n        rewardToken = ERC20(_rewardTokenAddress);\n        rewardTokenAddress = _rewardTokenAddress;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Updates stakers' information and rewards within the contract.\n     *\n     * This function is used by the contract owner to update stakers' information and distribute rewards accordingly. It verifies the validity of inputs, ensures that the stake period is valid, and calculates the amount to update including pending rewards. It iterates through the provided stakers and their corresponding amounts, updating their staked amounts, total amounts to transfer, rewards to be paid out, and balances to claim. If a new staker is encountered within the declaration period, their length is increased. Rewards are compounded based on the time since the last update. After updating the stakers' information, the required tokens are transferred to the contract address, and the total staked supply and rewards are adjusted accordingly.\n     *\n     * @param _stakers An array of stakers' addresses.\n     * @param _amounts An array of corresponding staked amounts for each staker.\n     */\n    function updateStakers(\n        address[] memory _stakers,\n        uint256[] memory _amounts\n    ) public onlyWhitelistedUpdaters {\n        // Check if input is valid\n        require(\n            _stakers.length == _amounts.length,\n            \"Invalid input - length mismatch\"\n        );\n        // Check if stake config is set\n        require(\n            updateStakersStartTimestamp > 0 && updateStakersEndTimestamp > 0,\n            \"Require to set stake config\"\n        );\n        // Check is the staking period is valid\n        require(\n            block.timestamp >= updateStakersStartTimestamp,\n            \"Can not update out of the updating period\"\n        );\n        // Counting amount to update including pending rewards\n        uint256 stakedAmountToUpdate = 0;\n        // Counting amount to transfer based on stakers amount\n        uint256 totalAmountToUpdate = 0;\n        // Total rewards to be paid out\n        uint256 rewardedAmountToUpdate = 0;\n        for (uint256 i = 0; i < _stakers.length; i++) {\n            Staker storage _staker = staker[_stakers[i]];\n            // Skip new stakers if declaration period is over or not started\n            if (\n                _staker.staked == 0 &&\n                (block.timestamp > declarationEndTimestamp ||\n                    block.timestamp < declarationStartTimestamp)\n            ) {\n                continue;\n            } else {\n                // Get pending reward from staked amount\n                uint256 rewardFromLastUpdateAt = compoundWalletReward(\n                    _stakers[i]\n                );\n                // Update staked amount\n                _staker.staked += _amounts[i];\n                // Update total amount to transfer for every staker\n                totalAmountToUpdate += _amounts[i];\n                // Amount that will be available to claim including compounded rewards\n                stakedAmountToUpdate += _amounts[i] + rewardFromLastUpdateAt;\n                // Update balance to claim\n                _staker.balanceWithRewards += _amounts[i];\n                // Update reward\n                rewardedAmountToUpdate += rewardFromLastUpdateAt;\n\n                walletStakeUpdates[_stakers[i]].push(\n                    StakeUpdate({\n                        _blockTimestamp: block.timestamp,\n                        _updatedAmount: _amounts[i] + rewardFromLastUpdateAt\n                    })\n                );\n            }\n        }\n        // Send required tokens to the contract address\n        rewardToken.transferFrom(\n            msg.sender,\n            address(this),\n            totalAmountToUpdate\n        );\n        // Update total staked supply increased by pending rewards\n        rewardTokenQuantity -= rewardedAmountToUpdate;\n        totalStakedSupply += stakedAmountToUpdate;\n    }\n    /**\n     * @dev Returns the last applicable time for rewards calculation.\n     *\n     * This function computes the last applicable time for rewards calculation, which is the minimum value between the end of the stake period and the current block timestamp. It ensures that rewards are calculated only up to the end of the stake period or the current block timestamp, whichever comes first.\n     *\n     * @return uint256 The last applicable time for rewards calculation.\n     */\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return _min(stakeEndTimestamp, block.timestamp);\n    }\n\n    /**\n     * @dev Compounds wallet rewards for a specific staker.\n     *\n     * This function calculates and updates the wallet rewards for a specific staker. It retrieves the staker's information from storage, computes the pending reward using the `pendingReward` function, adds it to the staker's reward and balance to claim, and updates the last updated timestamp to the minimum value between the current block timestamp and the stake end timestamp. The calculated reward amount is returned.\n     *\n     * @param _account The address of the staker.\n     * @return uint256 The calculated reward amount.\n     */\n    function compoundWalletReward(address _account) private returns (uint256) {\n        if (block.timestamp < stakeStartTimestamp) {\n            return 0;\n        }\n        Staker storage _staker = staker[_account];\n        uint256 rewardToUpdate = pendingReward(_account);\n        _staker.reward += rewardToUpdate;\n        _staker.balanceWithRewards += rewardToUpdate;\n        _staker.lastUpdatedAt = lastTimeRewardApplicable();\n        return rewardToUpdate;\n    }\n\n    /**\n     * @dev Retrieves the pending reward for a specific staker.\n     *\n     * This function calculates and returns the pending reward for a specific staker based on their balance to claim, the reward per token from the last updated timestamp, and the current balance. If the staker's last updated timestamp is zero, indicating no previous updates, the function returns zero. Otherwise, it computes the pending reward per token and returns the result.\n     *\n     * @param _account The address of the staker.\n     * @return uint256 The pending reward amount.\n     */\n    function pendingReward(address _account) public view returns (uint256) {\n        Staker memory _staker = staker[_account];\n        if (_staker.lastUpdatedAt == 0) {\n            return 0;\n        }\n        uint256 currentBalance = _staker.balanceWithRewards;\n        uint256 pendingRewardPerToken = rewardPerTokenFromTimestamp(\n            _staker.lastUpdatedAt\n        );\n        return (currentBalance * (pendingRewardPerToken)) / 1e18;\n    }\n\n    /**\n     * @dev Computes the reward per token from a specific updated timestamp.\n     *\n     * This function calculates and returns the reward per token based on the provided updated timestamp. If the total staked supply is zero, indicating no stakers, it returns the entire reward token quantity. Otherwise, it computes the staking period as the difference between the last applicable time for rewards calculation and the provided updated timestamp. It then calculates and returns the reward per token using the reward rate, staking period, and total staked supply.\n     *\n     * @param _updatedTimestamp The timestamp when the staker's information was last updated.\n     * @return uint256 The reward per token.\n     */\n    function rewardPerTokenFromTimestamp(\n        uint256 _updatedTimestamp\n    ) public view returns (uint256) {\n        if (totalStakedSupply == 0) {\n            return rewardTokenQuantity;\n        }\n        uint256 stakingPeriod = lastTimeRewardApplicable() - _updatedTimestamp;\n        return ((rewardRate * stakingPeriod) * 1e18) / totalStakedSupply;\n    }\n\n    /**\n     * @dev Returns the duration of the stake period.\n     *\n     * This function computes and returns the duration of the stake period by subtracting the start timestamp from the end timestamp.\n     *\n     * @return uint256 The duration of the stake period.\n     */\n    function stakeDuration() public view returns (uint256) {\n        return stakeEndTimestamp - stakeStartTimestamp;\n    }\n\n    /**\n     * @dev Retrieves the staked amount for a specific staker.\n     *\n     * This function returns the staked amount for a specific staker based on their account address.\n     *\n     * @param _account The address of the staker.\n     * @return uint256 The staked amount.\n     */\n    function getStakedAmount(address _account) public view returns (uint256) {\n        return staker[_account].staked;\n    }\n\n    /**\n     * @dev Retrieves the earned reward amount for a specific staker.\n     *\n     * This function returns the earned reward amount for a specific staker based on their account address.\n     *\n     * @param _account The address of the staker.\n     * @return uint256 The earned reward amount.\n     */\n    function getEarnedAmount(address _account) public view returns (uint256) {\n        return staker[_account].reward;\n    }\n\n    function getWalletStakeUpdates(\n        address _account\n    ) public view returns (StakeUpdate[] memory) {\n        return walletStakeUpdates[_account];\n    }\n\n    /**\n     * @dev Updates the reward tokens within the contract.\n     *\n     * This function is used by the contract owner to update the reward tokens within the contract. It verifies the validity of the stake period, transfers the specified amount of reward tokens to the contract address, increases the reward token quantity by the transferred amount, and updates the reward rate based on the new reward token quantity and stake duration.\n     *\n     * @param _amount The amount of reward tokens to be added.\n     */\n    function updateReward(uint256 _amount) public onlyOwner {\n        require(\n            stakeStartTimestamp > 0 && stakeEndTimestamp > 0,\n            \"Invalid stake period config\"\n        );\n        rewardToken.transferFrom(msg.sender, address(this), _amount);\n        rewardTokenQuantity += _amount;\n        rewardRate = rewardTokenQuantity / stakeDuration();\n    }\n\n    /**\n     * @dev Moves tokens to another stake contract.\n     *\n     * This function allows the sender to move tokens to another stake contract. It verifies that the contract is not paused, and the claim reward period has started. It calculates the amount of tokens available for release using the `enableForRelease` function and ensures that it is greater than zero. The tokens available for release are then added to the staker's claimed balance, and the stake contract specified by `_stakeAddress` is called to transfer the tokens.\n     *\n     * @param _stakerAddress The address of the staker.\n     */\n    function moveToStake(\n        address _stakerAddress\n    )\n        external\n        virtual\n        whenNotPaused\n        onlyWhitelistedStakes\n        returns (bool, string memory, uint256)\n    {\n        if (\n            claimRewardStartTimestamp == 0 ||\n            block.timestamp < claimRewardStartTimestamp\n        ) return (false, \"Claim period has not started\", 0);\n\n        if (pendingReward(_stakerAddress) > 0) {\n            uint256 rewardFromLastUpdateAt = compoundWalletReward(\n                _stakerAddress\n            );\n            rewardTokenQuantity -= rewardFromLastUpdateAt;\n            totalStakedSupply += rewardFromLastUpdateAt;\n        }\n        Staker storage _staker = staker[_stakerAddress];\n\n        uint256 tokensEnableToTransfer = _staker.balanceWithRewards -\n            _staker.claimedBalance;\n        if (tokensEnableToTransfer == 0) {\n            return (false, \"No tokens to release\", tokensEnableToTransfer);\n        }\n\n        _staker.claimedBalance += tokensEnableToTransfer;\n        rewardToken.transfer(_msgSender(), tokensEnableToTransfer);\n        return (\n            true,\n            \"Tokens transferred successfully\",\n            tokensEnableToTransfer\n        );\n    }\n\n    /**\n     * @dev Claims tokens for the sender.\n     *\n     * This function allows the sender to claim tokens. It verifies that the contract is not paused and there are tokens available for claim. It updates the staker's balance to claim if there are pending rewards. It then ensures that the remaining balance to claim is sufficient for the tokens to be claimed. If the conditions are met, the tokens are transferred to the sender.\n     */\n    function claim() external virtual whenNotPaused {\n        require(\n            claimRewardStartTimestamp > 0 &&\n                block.timestamp >= claimRewardStartTimestamp,\n            \"MPRORewardStake: Claim period has not started\"\n        );\n        Staker storage _staker = staker[_msgSender()];\n        // Update remaining balance to claim\n        if (pendingReward(_msgSender()) > 0) {\n            uint256 rewardFromLastUpdateAt = compoundWalletReward(_msgSender());\n            rewardTokenQuantity -= rewardFromLastUpdateAt;\n            totalStakedSupply += rewardFromLastUpdateAt;\n        }\n        uint256 tokensEnableForRelease = enableForRelease();\n\n        require(\n            tokensEnableForRelease > 0,\n            \"MPRORewardStake: No tokens to claim\"\n        );\n\n        require(\n            _staker.balanceWithRewards - _staker.claimedBalance >=\n                tokensEnableForRelease,\n            \"MPRORewardStake: Not enough tokens to claim\"\n        );\n        _staker.claimedBalance += tokensEnableForRelease;\n        rewardToken.transfer(_msgSender(), tokensEnableForRelease);\n    }\n\n    /**\n     * @dev Computes the amount of tokens available for release.\n     *\n     * This function calculates and returns the amount of tokens available for release for the sender. It checks if the current timestamp is greater than or equal to the claim reward start timestamp. If claim configuration is set to retrieve data about cycles, it calculates the current cycle, the percent to claim, and the claimable tokens based on the staker's balance to claim and claimed balance. If claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.\n     *\n     * @return uint256 The amount of tokens available for release.\n     */\n    function enableForRelease() public view returns (uint256) {\n        if (block.timestamp >= claimRewardStartTimestamp) {\n            Staker memory _staker = staker[_msgSender()];\n            // Check if claim config is set to retrive data about cycles\n            if (\n                claimPeriodDuration > 0 && rewardUnlockPercentPerPeriod < 10000\n            ) {\n                // Calculate percent to claim\n                uint256 percentToClaim = getCyclePercentToClaim(0);\n\n                // For instance balance to claim = 100, percent per period = 50, claimed balance = 0\n                uint256 claimableTokens = _staker\n                    .balanceWithRewards\n                    .mul(percentToClaim)\n                    .div(UNLOCK_PERCENT_DIVIDER);\n\n                if (\n                    claimableTokens > _staker.balanceWithRewards // for example 60 // Balance to claim for example 60\n                ) {\n                    claimableTokens = _staker.balanceWithRewards;\n                }\n                return claimableTokens.sub(_staker.claimedBalance);\n                // When claim config is not set we allow to claim all tokens\n            } else {\n                return _staker.balanceWithRewards;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseAllocation() public view returns (uint256) {\n        if (block.timestamp >= claimRewardStartTimestamp) {\n            Staker memory _staker = staker[_msgSender()];\n            // Check if claim config is set to retrive data about cycles\n            if (\n                claimPeriodDuration > 0 && rewardUnlockPercentPerPeriod < 10000\n            ) {\n                // Calculate percent to claim\n                uint256 percentToClaim = getCyclePercentToClaim(1);\n\n                // For instance balance to claim = 100, percent per period = 50, claimed balance = 0\n                uint256 claimableTokens = _staker\n                    .balanceWithRewards\n                    .mul(percentToClaim)\n                    .div(UNLOCK_PERCENT_DIVIDER);\n                if (\n                    claimableTokens > // for example 60\n                    _staker.balanceWithRewards - _staker.claimedBalance // Balance to claim for example 60\n                ) {\n                    return _staker.balanceWithRewards - _staker.claimedBalance;\n                } else {\n                    return claimableTokens.sub(_staker.claimedBalance);\n                }\n                // When claim config is not set we allow to claim all tokens\n            } else {\n                return _staker.balanceWithRewards;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < claimRewardStartTimestamp) {\n            return claimRewardStartTimestamp;\n        } else {\n            uint256 rewardCycle = 1;\n            rewardCycle += block.timestamp.sub(claimRewardStartTimestamp).div(\n                claimPeriodDuration\n            );\n            return\n                claimRewardStartTimestamp.add(\n                    rewardCycle.mul(claimPeriodDuration)\n                );\n        }\n    }\n\n    function getCyclePercentToClaim(\n        uint256 _cyclesToAdd\n    ) private view returns (uint256) {\n        if (block.timestamp >= claimRewardStartTimestamp) {\n            uint256 currentCycle = (\n                block.timestamp.sub(claimRewardStartTimestamp).div(\n                    claimPeriodDuration\n                )\n                // We add 1 to the current cycle to get the next cycle\n            ).add(_cyclesToAdd.add(1));\n\n            // Calculate percent to claim\n            uint256 percentToClaim = rewardUnlockPercentPerPeriod.mul(\n                currentCycle\n            );\n            return percentToClaim;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @dev Removes dust tokens from the contract.\n     *\n     * This function allows the contract owner to transfer all remaining tokens (dust) from the contract to the owner's address.\n     * @param _amount The amount to remove from the contract.\n     */\n    function removeDust(uint256 _amount) public onlyOwner {\n        rewardToken.transfer(msg.sender, _amount);\n    }\n\n    /**\n     * @dev Sets the stake configuration parameters.\n     *\n     * This function allows the contract owner to set the stake configuration parameters including the start and end timestamps for staking and declaration periods.\n     *\n     * @param _stakeStartTimestamp The start timestamp for the stake period.\n     * @param _stakeEndTimestamp The end timestamp for the stake period.\n     * @param _declarationStartTimestamp The start timestamp for the declaration period.\n     * @param _declarationEndTimestamp The end timestamp for the declaration period.\n     */\n    function setStakeConfig(\n        uint256 _stakeStartTimestamp,\n        uint256 _stakeEndTimestamp,\n        uint256 _updateStakersStartTimestamp,\n        uint256 _updateStakersEndTimestamp,\n        uint256 _declarationStartTimestamp,\n        uint256 _declarationEndTimestamp\n    ) public onlyOwner {\n        require(\n            _stakeStartTimestamp < _stakeEndTimestamp &&\n                _declarationStartTimestamp < _declarationEndTimestamp &&\n                _updateStakersStartTimestamp < _updateStakersEndTimestamp,\n            \"MPRORewardStake: Invalid stake configuration\"\n        );\n        require(\n            _stakeStartTimestamp > block.timestamp &&\n                _stakeEndTimestamp > block.timestamp &&\n                _updateStakersStartTimestamp > block.timestamp &&\n                _updateStakersEndTimestamp > block.timestamp &&\n                _declarationStartTimestamp > block.timestamp &&\n                _declarationEndTimestamp > block.timestamp,\n            \"MPRORewardStake: Invalid stake configuration - timestamps should be in the future\"\n        );\n        if (stakeStartTimestamp > 0) {\n            require(\n                block.timestamp < stakeStartTimestamp,\n                \"MPRORewardStake: Stake period has started\"\n            );\n        }\n        stakeStartTimestamp = _stakeStartTimestamp;\n        stakeEndTimestamp = _stakeEndTimestamp;\n        updateStakersStartTimestamp = _updateStakersStartTimestamp;\n        updateStakersEndTimestamp = _updateStakersEndTimestamp;\n        declarationStartTimestamp = _declarationStartTimestamp;\n        declarationEndTimestamp = _declarationEndTimestamp;\n        if (rewardTokenQuantity > 0)\n            rewardRate = rewardTokenQuantity / stakeDuration();\n    }\n\n    /**\n     * @dev Sets the claim reward configuration parameters.\n     *\n     * This function allows the contract owner to set the claim reward configuration parameters including the start timestamp for claiming rewards, the duration of each claim period, and the percent of rewards to unlock per period.\n     *\n     * @param _claimRewardStartTimestamp The start timestamp for claiming rewards.\n     * @param _claimPeriodDuration The duration of each claim period is seconds.\n     * @param _rewardUnlockPercentPerPeriod The percent of rewards to unlock per period. 10000 = 100%, 9000 = 90%, etc.\n     */\n    function setClaimRewardConfig(\n        uint256 _claimRewardStartTimestamp,\n        uint256 _claimPeriodDuration,\n        uint256 _rewardUnlockPercentPerPeriod\n    ) public onlyOwner {\n        require(\n            _claimRewardStartTimestamp > 0 &&\n                _claimPeriodDuration > 0 &&\n                _rewardUnlockPercentPerPeriod > 0 &&\n                _rewardUnlockPercentPerPeriod <= 10000,\n            \"MPRORewardStake: Invalid claim reward configuration\"\n        );\n        claimRewardStartTimestamp = _claimRewardStartTimestamp;\n        claimPeriodDuration = _claimPeriodDuration;\n        rewardUnlockPercentPerPeriod = _rewardUnlockPercentPerPeriod;\n    }\n\n    function setStakeWhitelisted(\n        address _stakeAddress,\n        bool _isWhitelisted\n    ) public onlyOwner {\n        isStakeWhitelisted[_stakeAddress] = _isWhitelisted;\n    }\n\n    function setUpdaterWhitelisted(\n        address _walletAddress,\n        bool _isWhitelisted\n    ) public onlyOwner {\n        isUpdaterWhitelisted[_walletAddress] = _isWhitelisted;\n    }\n\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\n        return x <= y ? x : y;\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/MPROStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n// TODO remove console\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MPROAutoStake is Ownable, Pausable {\n    using SafeMath for uint256;\n\n    // Unlock percent divider\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    // Reward token\n    IERC20 public immutable rewardToken;\n\n    // Start of staking period\n    uint256 public stakeStartTimestamp;\n    // End of staking period\n    uint256 public stakeEndTimestamp;\n    // Start of updating period\n    uint256 public updateStakersStartTimestamp;\n    // End of updating period\n    uint256 public updateStakersEndTimestamp;\n    // Reward to be paid out per second\n    uint256 public rewardPerSecond;\n    // Quantity of reward token to be paid out\n    uint256 public rewardTokenQuantity;\n    // Total staked\n    uint256 public totalStakedSupply;\n\n    // DECLARATION CONFIG\n    // Start timestamp of the declaration period (enable to add new wallets to the staking pool)\n    uint256 public declarationStartTimestamp;\n    // End timestamp of the declaration period (disable to add new wallets to the staking pool)\n    uint256 public declarationEndTimestamp;\n    // Last reward timestamp\n    uint256 public lastRewardTimestamp;\n    // Accumulated reward per share\n    uint256 public accRewardTokenPerShare;\n    // Accumulated reward token quantity\n    uint256 public accRewardTokenQuantity;\n    //  Last update reward timestamp (function updateReward)\n    uint256 public lastUpdateRewardTimestamp;\n    // For updating rewards in the future we need to know how much reward was distributed\n    uint256 private distributedReward;\n\n    struct Staker {\n        // pure staked tokens\n        uint256 staked;\n        // staked tokens with compounds\n        uint256 balanceWithRewards;\n        uint256 claimedBalance;\n        uint256 reward;\n        uint256 rewardDebt;\n    }\n    // Stakers\n    mapping(address => Staker) public staker;\n\n    struct StakeUpdate {\n        uint256 _blockTimestamp;\n        uint256 _updatedAmount;\n    }\n\n    mapping(address => StakeUpdate[]) public walletStakeUpdates;\n\n    // CLAIM REWARD CONFIG\n    // Start timestamp for claiming rewards\n    uint256 public claimRewardStartTimestamp;\n    // Reward unlock percent per period (10000 = 100%, 9000 = 90%, etc.)\n    uint256 public rewardUnlockPercentPerPeriod = 10000;\n    // Duration of each claim period in seconds\n    uint256 public claimPeriodDuration;\n\n    mapping(address => bool) public isStakeWhitelisted;\n\n    mapping(address => bool) public isUpdaterWhitelisted;\n\n    modifier onlyWhitelistedStakes() {\n        require(\n            isStakeWhitelisted[msg.sender],\n            \"MPRORewardStake: Stake contract is not whitelisted\"\n        );\n        _;\n    }\n\n    modifier onlyWhitelistedUpdaters() {\n        require(\n            isUpdaterWhitelisted[msg.sender] || msg.sender == owner(),\n            \"MPRORewardStake: Address is not whitelisted updater\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Initializes the MPROStake contract.\n     *\n     * This function initializes the MPROStake contract with the specified reward token address and the new owner address. It sets the reward token and transfers the ownership to the new owner.\n     *\n     * @param _rewardTokenAddress The address of the reward token.\n     * @param _newOwner The address of the new owner.\n     */\n    constructor(address _rewardTokenAddress, address _newOwner) {\n        rewardToken = ERC20(_rewardTokenAddress);\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Updates stakers' information and rewards within the contract.\n     *\n     * This function is used by the contract owner to update stakers' information and distribute rewards accordingly. It verifies the validity of inputs, ensures that the stake period is valid, and calculates the amount to update including pending rewards. It iterates through the provided stakers and their corresponding amounts, updating their staked amounts, total amounts to transfer, rewards to be paid out, and balances to claim. If a new staker is encountered within the declaration period, their length is increased. Rewards are compounded based on the time since the last update. After updating the stakers' information, the required tokens are transferred to the contract address, and the total staked supply and rewards are adjusted accordingly.\n     *\n     * @param _stakers An array of stakers' addresses.\n     * @param _amounts An array of corresponding staked amounts for each staker.\n     */\n    function updateStakers(\n        address[] memory _stakers,\n        uint256[] memory _amounts\n    ) public onlyWhitelistedUpdaters {\n        // Check if input is valid\n        require(\n            _stakers.length == _amounts.length,\n            \"Invalid input - length mismatch\"\n        );\n        // Check if stake config is set\n        require(\n            updateStakersStartTimestamp > 0 && updateStakersEndTimestamp > 0,\n            \"Require to set stake config\"\n        );\n        // Check is the staking period is valid\n        require(\n            block.timestamp >= updateStakersStartTimestamp,\n            \"Can not update out of the updating period\"\n        );\n        // Update pool before updating stakers\n        updatePool();\n        // Counting amount to update including pending rewards\n        uint256 stakedAmountToUpdate = 0;\n        // Counting amount to transfer based on stakers amount\n        uint256 totalAmountToUpdate = 0;\n        // Total rewards to be paid out\n        uint256 rewardedAmountToUpdate = 0;\n        for (uint256 i = 0; i < _stakers.length; i++) {\n            Staker storage _staker = staker[_stakers[i]];\n            // Skip new stakers if declaration period is over or not started\n            if (\n                _staker.staked == 0 &&\n                (block.timestamp > declarationEndTimestamp ||\n                    block.timestamp < declarationStartTimestamp)\n            ) {\n                continue;\n            } else {\n                // stake reward\n                uint256 reward = stakeReward(_stakers[i]);\n                // Update staked amount\n                uint256 stakeAmount = stake(_stakers[i], _amounts[i]);\n\n                // Amount taht will be subtracted from rewards\n                rewardedAmountToUpdate += reward;\n                // Update total amount to transfer for every staker\n                totalAmountToUpdate += stakeAmount;\n                // Amount that will be available to claim including compounded rewards\n                stakedAmountToUpdate += stakeAmount + reward;\n\n                _staker.rewardDebt = getAmountByWallet(_stakers[i])\n                    .mul(accRewardTokenPerShare)\n                    .div(1e18);\n\n                walletStakeUpdates[_stakers[i]].push(\n                    StakeUpdate({\n                        _blockTimestamp: block.timestamp,\n                        _updatedAmount: _amounts[i] + reward\n                    })\n                );\n            }\n        }\n        // Send required tokens to the contract address\n        rewardToken.transferFrom(\n            msg.sender,\n            address(this),\n            totalAmountToUpdate\n        );\n        // Update total staked supply increased by pending rewards\n        rewardTokenQuantity -= rewardedAmountToUpdate;\n        totalStakedSupply += stakedAmountToUpdate;\n    }\n\n    function stakeReward(address _wallet) private returns (uint256) {\n        Staker storage _staker = staker[_wallet];\n        uint256 pending = getAmountByWallet(_wallet)\n            .mul(accRewardTokenPerShare)\n            .div(1e18)\n            .sub(_staker.rewardDebt);\n\n        if (pending > 0) {\n            _staker.reward += pending;\n            _staker.balanceWithRewards += pending;\n        }\n        _staker.rewardDebt = getAmountByWallet(_wallet)\n            .mul(accRewardTokenPerShare)\n            .div(1e18);\n\n        return pending;\n    }\n\n    /**\n     * @dev Stakes tokens for a specific staker.\n     *\n     * This function allows the contract owner to stake tokens for a specific staker. It verifies the validity of the stake period, ensures that the staker's balance is greater than zero, and calculates the amount to stake based on the staker's address and the specified amount. If the staker's balance is zero, the function returns zero. Otherwise, it calculates the amount to stake, updates the staker's information, and returns the staked amount.\n     *\n     * @param _wallet The address of the staker.\n     * @param _amount The amount of tokens to stake.\n     * @return uint256 The staked amount.\n     */\n    function stake(address _wallet, uint256 _amount) private returns (uint256) {\n        Staker storage _staker = staker[_wallet];\n        _staker.staked += _amount;\n        _staker.balanceWithRewards += _amount;\n\n        _staker.rewardDebt = getAmountByWallet(_wallet)\n            .mul(accRewardTokenPerShare)\n            .div(1e18);\n\n        return _amount;\n    }\n\n    /**\n     * @dev Retrieves the pending reward for a specific staker.\n     *\n     * This function calculates and returns the pending reward for a specific staker based on their balance to claim, the reward per token from the last updated timestamp, and the current balance. If the staker's last updated timestamp is zero, indicating no previous updates, the function returns zero. Otherwise, it computes the pending reward per token and returns the result.\n     *\n     * @param _account The address of the staker.\n     * @return uint256 The pending reward amount.\n     */\n    function pendingReward(address _account) public view returns (uint256) {\n        Staker memory _staker = staker[_account];\n        uint256 _accRewardPerShare = accRewardTokenPerShare;\n        if (block.timestamp > lastRewardTimestamp && totalStakedSupply != 0) {\n            uint256 multiplier = getMultiplierForTimestamps(\n                lastRewardTimestamp,\n                block.timestamp\n            );\n\n            uint256 rewardTokenReward = multiplier.mul(rewardPerSecond);\n            _accRewardPerShare = accRewardTokenPerShare.add(\n                rewardTokenReward.mul(1e18).div(totalStakedSupply)\n            );\n        }\n\n        return\n            getAmountByWallet(_account).mul(_accRewardPerShare).div(1e18).sub(\n                _staker.rewardDebt\n            );\n    }\n\n    /**\n     * @dev Updates the pool.\n     *\n     * This function updates the pool by calculating the multiplier for timestamps and the reward token reward. It then updates the accumulated reward per share based on the reward token reward and the total staked supply. If the current timestamp is less than or equal to the last reward timestamp, the function returns without updating the pool. If the total staked supply is zero, the function returns without updating the pool. Otherwise, it calculates the multiplier for timestamps and the reward token reward, updates the accumulated reward per share, and sets the last reward timestamp to the current timestamp.\n     */\n    function updatePool() public {\n        if (block.timestamp <= lastRewardTimestamp) {\n            return;\n        }\n        if (totalStakedSupply == 0) {\n            lastRewardTimestamp = block.timestamp;\n            return;\n        }\n        uint256 multiplier = getMultiplierForTimestamps(\n            lastRewardTimestamp,\n            block.timestamp\n        );\n        uint256 rewardTokenReward = multiplier.mul(rewardPerSecond);\n        accRewardTokenPerShare = accRewardTokenPerShare.add(\n            rewardTokenReward.mul(1e18).div(totalStakedSupply)\n        );\n\n        lastRewardTimestamp = block.timestamp;\n    }\n\n    /**\n     * @dev Retrieves the multiplier for timestamps.\n     *\n     * This function calculates and returns the multiplier for timestamps based on the start and end timestamps of the stake period. If the end timestamp is less than or equal to the specified timestamp, the function returns the difference between the two timestamps. If the start timestamp is greater than or equal to the specified timestamp, the function returns zero. Otherwise, it returns the difference between the end timestamp and the specified timestamp.\n     *\n     * @param _from The start timestamp.\n     * @param _to The end timestamp.\n     * @return uint256 The multiplier for timestamps.\n     */\n    function getMultiplierForTimestamps(\n        uint256 _from,\n        uint256 _to\n    ) public view returns (uint256) {\n        if (_to <= stakeEndTimestamp) {\n            return _to.sub(_from);\n        } else if (_from >= stakeEndTimestamp) {\n            return 0;\n        } else {\n            return stakeEndTimestamp.sub(_from);\n        }\n    }\n\n    /**\n     * @dev Returns the duration of the stake period.\n     *\n     * This function computes and returns the duration of the stake period by subtracting the start timestamp from the end timestamp.\n     *\n     * @return uint256 The duration of the stake period.\n     */\n    function stakeDuration() public view returns (uint256) {\n        return stakeEndTimestamp - stakeStartTimestamp;\n    }\n\n    /**\n     * @dev Retrieves the staked amount for a specific staker.\n     *\n     * This function returns the staked amount for a specific staker based on their account address.\n     *\n     * @param _account The address of the staker.\n     * @return uint256 The staked amount.\n     */\n    function getStakedAmount(address _account) public view returns (uint256) {\n        return staker[_account].staked;\n    }\n\n    /**\n     * @dev Retrieves the earned reward amount for a specific staker.\n     *\n     * This function returns the earned reward amount for a specific staker based on their account address.\n     *\n     * @param _account The address of the staker.\n     * @return uint256 The earned reward amount.\n     */\n    function getEarnedAmount(address _account) public view returns (uint256) {\n        return staker[_account].reward;\n    }\n\n    /**\n     * @dev Retrieves the claimed balance for a specific staker.\n     *\n     * This function returns the claimed balance for a specific staker based on their account address.\n     *\n     * @param _account The address of the staker.\n     * @return uint256 The claimed balance.\n     */\n    function getWalletStakeUpdates(\n        address _account\n    ) public view returns (StakeUpdate[] memory) {\n        return walletStakeUpdates[_account];\n    }\n\n    /**\n     * @dev Updates the reward tokens within the contract.\n     *\n     * This function is used by the contract owner to update the reward tokens within the contract. It verifies the validity of the stake period, transfers the specified amount of reward tokens to the contract address, increases the reward token quantity by the transferred amount, and updates the reward rate based on the new reward token quantity and stake duration.\n     *\n     * @param _amount The amount of reward tokens to be added.\n     */\n    function updateReward(uint256 _amount) public onlyWhitelistedUpdaters {\n        require(\n            stakeStartTimestamp > 0 && stakeEndTimestamp > 0,\n            \"Invalid stake period config\"\n        );\n        require(block.timestamp < stakeEndTimestamp, \"Stake period has ended\");\n        updatePool();\n        rewardToken.transferFrom(msg.sender, address(this), _amount);\n        rewardTokenQuantity += _amount;\n        accRewardTokenQuantity += _amount;\n        uint256 remainingStakeTime = stakeEndTimestamp - block.timestamp;\n        if (block.timestamp < stakeStartTimestamp) {\n            remainingStakeTime = stakeEndTimestamp - stakeStartTimestamp;\n        }\n\n        if (\n            lastUpdateRewardTimestamp > 0 &&\n            block.timestamp > stakeStartTimestamp\n        ) {\n            distributedReward += rewardPerSecond.mul(\n                block.timestamp - lastUpdateRewardTimestamp\n            );\n        }\n\n        rewardPerSecond =\n            (accRewardTokenQuantity - distributedReward) /\n            remainingStakeTime;\n\n        if (block.timestamp > stakeStartTimestamp) {\n            lastUpdateRewardTimestamp = block.timestamp;\n        } else {\n            lastUpdateRewardTimestamp = stakeStartTimestamp;\n        }\n    }\n\n    /**\n     * @dev Moves tokens to another stake contract.\n     *\n     * This function allows the sender to move tokens to another stake contract. It verifies that the contract is not paused, and the claim reward period has started. It calculates the amount of tokens available for release using the `enableForRelease` function and ensures that it is greater than zero. The tokens available for release are then added to the staker's claimed balance, and the stake contract specified by `_stakeAddress` is called to transfer the tokens.\n     *\n     * @param _stakerAddress The address of the staker.\n     */\n    function moveToStake(\n        address _stakerAddress\n    )\n        external\n        virtual\n        whenNotPaused\n        onlyWhitelistedStakes\n        returns (bool, string memory, uint256)\n    {\n        if (\n            claimRewardStartTimestamp == 0 ||\n            block.timestamp < claimRewardStartTimestamp\n        ) return (false, \"Claim period has not started\", 0);\n        uint256 stakedSupply = totalStakedSupply;\n        updatePool();\n        Staker storage _staker = staker[_stakerAddress];\n        // Update remaining balance to claim\n        if (pendingReward(_stakerAddress) > 0) {\n            uint256 reward = stakeReward(_stakerAddress);\n            stakedSupply += reward;\n            rewardTokenQuantity -= reward;\n        }\n\n        uint256 tokensEnableToTransfer = _staker.balanceWithRewards -\n            _staker.claimedBalance;\n\n        if (tokensEnableToTransfer == 0) {\n            return (false, \"No tokens to release\", tokensEnableToTransfer);\n        }\n\n        _staker.claimedBalance += tokensEnableToTransfer;\n        rewardToken.transfer(_msgSender(), tokensEnableToTransfer);\n\n        stakedSupply -= tokensEnableToTransfer;\n        totalStakedSupply = stakedSupply;\n\n        _staker.rewardDebt = getAmountByWallet(_stakerAddress)\n            .mul(accRewardTokenPerShare)\n            .div(1e18);\n\n        return (\n            true,\n            \"Tokens transferred successfully\",\n            tokensEnableToTransfer\n        );\n    }\n\n    /**\n     * @dev Retrieves the staked amount for a specific staker.\n     *\n     * This function returns the staked amount for a specific staker based on their account address.\n     *\n     * @param wallet The address of the staker.\n     * @return uint256 The staked amount.\n     */\n    function getAmountByWallet(address wallet) private view returns (uint256) {\n        Staker storage _staker = staker[wallet];\n        return _staker.balanceWithRewards.sub(_staker.claimedBalance);\n    }\n\n    /**\n     * @dev Claims tokens for the sender.\n     *\n     * This function allows the sender to claim tokens. It verifies that the contract is not paused and there are tokens available for claim. It updates the staker's balance to claim if there are pending rewards. It then ensures that the remaining balance to claim is sufficient for the tokens to be claimed. If the conditions are met, the tokens are transferred to the sender.\n     */\n    function claim() external virtual whenNotPaused {\n        require(\n            claimRewardStartTimestamp > 0 &&\n                block.timestamp >= claimRewardStartTimestamp,\n            \"MPRORewardStake: Claim period has not started\"\n        );\n        uint256 stakedSupply = totalStakedSupply;\n        updatePool();\n        Staker storage _staker = staker[_msgSender()];\n        // Update remaining balance to claim\n        if (pendingReward(_msgSender()) > 0) {\n            uint256 reward = stakeReward(_msgSender());\n            stakedSupply += reward;\n            rewardTokenQuantity -= reward;\n        }\n        uint256 tokensEnableForRelease = enableForRelease();\n\n        require(\n            tokensEnableForRelease > 0,\n            \"MPRORewardStake: No tokens to claim\"\n        );\n\n        require(\n            _staker.balanceWithRewards - _staker.claimedBalance >=\n                tokensEnableForRelease,\n            \"MPRORewardStake: Not enough tokens to claim\"\n        );\n        _staker.claimedBalance += tokensEnableForRelease;\n        rewardToken.transfer(_msgSender(), tokensEnableForRelease);\n\n        stakedSupply -= tokensEnableForRelease;\n        totalStakedSupply = stakedSupply;\n\n        _staker.rewardDebt = getAmountByWallet(_msgSender())\n            .mul(accRewardTokenPerShare)\n            .div(1e18);\n    }\n\n    /**\n     * @dev Computes the amount of tokens available for release.\n     *\n     * This function calculates and returns the amount of tokens available for release for the sender. It checks if the current timestamp is greater than or equal to the claim reward start timestamp. If claim configuration is set to retrieve data about cycles, it calculates the current cycle, the percent to claim, and the claimable tokens based on the staker's balance to claim and claimed balance. If claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.\n     *\n     * @return uint256 The amount of tokens available for release.\n     */\n    function enableForRelease() public view returns (uint256) {\n        if (block.timestamp >= claimRewardStartTimestamp) {\n            Staker memory _staker = staker[_msgSender()];\n            // Check if claim config is set to retrive data about cycles\n            if (\n                claimPeriodDuration > 0 && rewardUnlockPercentPerPeriod < 10000\n            ) {\n                // Calculate percent to claim\n                uint256 percentToClaim = getCyclePercentToClaim(0);\n\n                // For instance balance to claim = 100, percent per period = 50, claimed balance = 0\n                uint256 claimableTokens = _staker\n                    .balanceWithRewards\n                    .mul(percentToClaim)\n                    .div(UNLOCK_PERCENT_DIVIDER);\n\n                if (\n                    claimableTokens > _staker.balanceWithRewards // for example 60 // Balance to claim for example 60\n                ) {\n                    claimableTokens = _staker.balanceWithRewards;\n                }\n                return claimableTokens.sub(_staker.claimedBalance);\n            }\n            // When claim config is not set we allow to claim all tokens\n            else {\n                return _staker.balanceWithRewards;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @dev Retrieves the next release allocation.\n     *\n     * This function calculates and returns the next release allocation based on the current timestamp and the claim reward start timestamp. If the current timestamp is greater than or equal to the claim reward start timestamp, it retrieves the staker's information and calculates the percent to claim based on the current cycle. It then calculates the claimable tokens based on the staker's balance with rewards and claimed balance. If the claimable tokens are greater than the balance with rewards, it sets the claimable tokens to the balance with rewards. If the claim configuration is not set, it allows claiming all tokens. If the conditions are not met, it returns zero.\n     *\n     * @return uint256 The next release allocation.\n     */\n    function nextReleaseAllocation() public view returns (uint256) {\n        if (block.timestamp >= claimRewardStartTimestamp) {\n            Staker memory _staker = staker[_msgSender()];\n            // Check if claim config is set to retrive data about cycles\n            if (\n                claimPeriodDuration > 0 && rewardUnlockPercentPerPeriod < 10000\n            ) {\n                // Calculate percent to claim\n                uint256 percentToClaim = getCyclePercentToClaim(1);\n\n                // For instance balance to claim = 100, percent per period = 50, claimed balance = 0\n                uint256 claimableTokens = _staker\n                    .balanceWithRewards\n                    .sub(_staker.claimedBalance)\n                    .mul(percentToClaim)\n                    .div(UNLOCK_PERCENT_DIVIDER);\n\n                if (\n                    claimableTokens > _staker.balanceWithRewards // for example 60 // Balance to claim for example 60\n                ) {\n                    claimableTokens = _staker.balanceWithRewards;\n                }\n                return claimableTokens.sub(_staker.claimedBalance);\n                // When claim config is not set we allow to claim all tokens\n            } else {\n                return _staker.balanceWithRewards;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @dev Retrieves the next release timestamp.\n     *\n     * This function calculates and returns the next release timestamp based on the current timestamp and the claim reward start timestamp. If the current timestamp is less than the claim reward start timestamp, it returns the claim reward start timestamp. Otherwise, it calculates the reward cycle and returns the next release timestamp.\n     *\n     * @return uint256 The next release timestamp.\n     */\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < claimRewardStartTimestamp) {\n            return claimRewardStartTimestamp;\n        } else {\n            uint256 rewardCycle = 1;\n            rewardCycle += block.timestamp.sub(claimRewardStartTimestamp).div(\n                claimPeriodDuration\n            );\n            return\n                claimRewardStartTimestamp.add(\n                    rewardCycle.mul(claimPeriodDuration)\n                );\n        }\n    }\n\n    /**\n     * @dev Retrieves the percent of tokens to claim for the current cycle.\n     */\n    function getCyclePercentToClaim(\n        uint256 _cyclesToAdd\n    ) private view returns (uint256) {\n        if (block.timestamp >= claimRewardStartTimestamp) {\n            uint256 currentCycle = (\n                block.timestamp.sub(claimRewardStartTimestamp).div(\n                    claimPeriodDuration\n                )\n                // We add 1 to the current cycle to get the next cycle\n            ).add(_cyclesToAdd.add(1));\n\n            // Calculate percent to claim\n            uint256 percentToClaim = rewardUnlockPercentPerPeriod.mul(\n                currentCycle\n            );\n            return percentToClaim;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @dev Removes dust tokens from the contract.\n     *\n     * This function allows the contract owner to transfer all remaining tokens (dust) from the contract to the owner's address.\n     * @param _amount The amount to remove from the contract.\n     */\n    function removeDust(uint256 _amount) public onlyOwner {\n        rewardToken.transfer(msg.sender, _amount);\n    }\n\n    /**\n     * @dev Withdraws emergency reward tokens from the contract.\n     */\n    function emergencyRewardWithdrawal() public onlyOwner {\n        updatePool();\n        rewardToken.transferFrom(\n            address(this),\n            msg.sender,\n            rewardTokenQuantity\n        );\n        rewardTokenQuantity -= rewardTokenQuantity;\n        accRewardTokenQuantity -= rewardTokenQuantity;\n        uint256 remainingStakeTime = stakeEndTimestamp - block.timestamp;\n        if (block.timestamp < stakeStartTimestamp) {\n            remainingStakeTime = stakeEndTimestamp - stakeStartTimestamp;\n        }\n\n        if (\n            lastUpdateRewardTimestamp > 0 &&\n            block.timestamp > stakeStartTimestamp\n        ) {\n            distributedReward += rewardPerSecond.mul(\n                block.timestamp - lastUpdateRewardTimestamp\n            );\n        }\n\n        rewardPerSecond =\n            (accRewardTokenQuantity - distributedReward) /\n            remainingStakeTime;\n\n        if (block.timestamp > stakeStartTimestamp) {\n            lastUpdateRewardTimestamp = block.timestamp;\n        } else {\n            lastUpdateRewardTimestamp = stakeStartTimestamp;\n        }\n    }\n\n    /**\n     * @dev Sets the stake configuration parameters.\n     *\n     * This function allows the contract owner to set the stake configuration parameters including the start and end timestamps for staking and declaration periods.\n     *\n     * @param _stakeStartTimestamp The start timestamp for the stake period.\n     * @param _stakeEndTimestamp The end timestamp for the stake period.\n     * @param _updateStakersStartTimestamp The start timestamp for the updating period.\n     * @param _updateStakersEndTimestamp The end timestamp for the updating period.\n     * @param _declarationStartTimestamp The start timestamp for the declaration period.\n     * @param _declarationEndTimestamp The end timestamp for the declaration period.\n     */\n    function setStakeConfig(\n        uint256 _stakeStartTimestamp,\n        uint256 _stakeEndTimestamp,\n        uint256 _updateStakersStartTimestamp,\n        uint256 _updateStakersEndTimestamp,\n        uint256 _declarationStartTimestamp,\n        uint256 _declarationEndTimestamp\n    ) public onlyOwner {\n        require(\n            _stakeStartTimestamp < _stakeEndTimestamp &&\n                _declarationStartTimestamp < _declarationEndTimestamp &&\n                _updateStakersStartTimestamp < _updateStakersEndTimestamp,\n            \"MPRORewardStake: Invalid stake configuration\"\n        );\n        require(\n            _stakeStartTimestamp > block.timestamp &&\n                _stakeEndTimestamp > block.timestamp &&\n                _updateStakersStartTimestamp > block.timestamp &&\n                _updateStakersEndTimestamp > block.timestamp &&\n                _declarationStartTimestamp > block.timestamp &&\n                _declarationEndTimestamp > block.timestamp,\n            \"MPRORewardStake: Invalid stake configuration - timestamps should be in the future\"\n        );\n\n        // Check if the stake start timestamp is greater than the current timestamp\n        if (stakeStartTimestamp == 0 || block.timestamp < stakeStartTimestamp) {\n            stakeStartTimestamp = _stakeStartTimestamp;\n            stakeEndTimestamp = _stakeEndTimestamp;\n        }\n        updateStakersStartTimestamp = _updateStakersStartTimestamp;\n        updateStakersEndTimestamp = _updateStakersEndTimestamp;\n        declarationStartTimestamp = _declarationStartTimestamp;\n        declarationEndTimestamp = _declarationEndTimestamp;\n    }\n\n    /**\n     * @dev Sets the claim reward configuration parameters.\n     *\n     * This function allows the contract owner to set the claim reward configuration parameters including the start timestamp for claiming rewards, the duration of each claim period, and the percent of rewards to unlock per period.\n     *\n     * @param _claimRewardStartTimestamp The start timestamp for claiming rewards.\n     * @param _claimPeriodDuration The duration of each claim period is seconds.\n     * @param _rewardUnlockPercentPerPeriod The percent of rewards to unlock per period. 10000 = 100%, 9000 = 90%, etc.\n     */\n    function setClaimRewardConfig(\n        uint256 _claimRewardStartTimestamp,\n        uint256 _claimPeriodDuration,\n        uint256 _rewardUnlockPercentPerPeriod\n    ) public onlyOwner {\n        require(\n            _claimRewardStartTimestamp > 0 &&\n                _claimPeriodDuration > 0 &&\n                _rewardUnlockPercentPerPeriod > 0 &&\n                _rewardUnlockPercentPerPeriod <= 10000,\n            \"MPRORewardStake: Invalid claim reward configuration\"\n        );\n        claimRewardStartTimestamp = _claimRewardStartTimestamp;\n        claimPeriodDuration = _claimPeriodDuration;\n        rewardUnlockPercentPerPeriod = _rewardUnlockPercentPerPeriod;\n    }\n\n    function setStakeWhitelisted(\n        address _stakeAddress,\n        bool _isWhitelisted\n    ) public onlyOwner {\n        isStakeWhitelisted[_stakeAddress] = _isWhitelisted;\n    }\n\n    function setUpdaterWhitelisted(\n        address _walletAddress,\n        bool _isWhitelisted\n    ) public onlyOwner {\n        isUpdaterWhitelisted[_walletAddress] = _isWhitelisted;\n    }\n\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\n        return x <= y ? x : y;\n    }\n\n    function pause() public onlyWhitelistedUpdaters {\n        _pause();\n    }\n\n    function unpause() public onlyWhitelistedUpdaters {\n        _unpause();\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}