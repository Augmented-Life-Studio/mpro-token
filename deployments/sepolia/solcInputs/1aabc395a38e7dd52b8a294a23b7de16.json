{
  "language": "Solidity",
  "sources": {
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\n\nimport { IWorker } from \"./IWorker.sol\";\nimport { ILayerZeroExecutor } from \"./ILayerZeroExecutor.sol\";\n\ninterface IExecutor is IWorker, ILayerZeroExecutor {\n    struct DstConfigParam {\n        uint32 dstEid;\n        uint64 lzReceiveBaseGas;\n        uint64 lzComposeBaseGas;\n        uint16 multiplierBps;\n        uint128 floorMarginUSD;\n        uint128 nativeCap;\n    }\n\n    struct DstConfig {\n        uint64 lzReceiveBaseGas;\n        uint16 multiplierBps;\n        uint128 floorMarginUSD; // uses priceFeed PRICE_RATIO_DENOMINATOR\n        uint128 nativeCap;\n        uint64 lzComposeBaseGas;\n    }\n\n    struct ExecutionParams {\n        address receiver;\n        Origin origin;\n        bytes32 guid;\n        bytes message;\n        bytes extraData;\n        uint256 gasLimit;\n    }\n\n    struct NativeDropParams {\n        address receiver;\n        uint256 amount;\n    }\n\n    event DstConfigSet(DstConfigParam[] params);\n    event NativeDropApplied(Origin origin, uint32 dstEid, address oapp, NativeDropParams[] params, bool[] success);\n\n    function dstConfig(uint32 _dstEid) external view returns (uint64, uint16, uint128, uint128, uint64);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IExecutorFeeLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IExecutor } from \"./IExecutor.sol\";\n\ninterface IExecutorFeeLib {\n    struct FeeParams {\n        address priceFeed;\n        uint32 dstEid;\n        address sender;\n        uint256 calldataSize;\n        uint16 defaultMultiplierBps;\n    }\n\n    error Executor_NoOptions();\n    error Executor_NativeAmountExceedsCap(uint256 amount, uint256 cap);\n    error Executor_UnsupportedOptionType(uint8 optionType);\n    error Executor_InvalidExecutorOptions(uint256 cursor);\n    error Executor_ZeroLzReceiveGasProvided();\n    error Executor_ZeroLzComposeGasProvided();\n    error Executor_EidNotSupported(uint32 eid);\n\n    function getFeeOnSend(\n        FeeParams calldata _params,\n        IExecutor.DstConfig calldata _dstConfig,\n        bytes calldata _options\n    ) external returns (uint256 fee);\n\n    function getFee(\n        FeeParams calldata _params,\n        IExecutor.DstConfig calldata _dstConfig,\n        bytes calldata _options\n    ) external view returns (uint256 fee);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ILayerZeroExecutor {\n    // @notice query price and assign jobs at the same time\n    // @param _dstEid - the destination endpoint identifier\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\n    // @param _calldataSize - dynamic data size of message + caller params\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\n    function assignJob(\n        uint32 _dstEid,\n        address _sender,\n        uint256 _calldataSize,\n        bytes calldata _options\n    ) external returns (uint256 price);\n\n    // @notice query the executor price for relaying the payload and its proof to the destination chain\n    // @param _dstEid - the destination endpoint identifier\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\n    // @param _calldataSize - dynamic data size of message + caller params\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\n    function getFee(\n        uint32 _dstEid,\n        address _sender,\n        uint256 _calldataSize,\n        bytes calldata _options\n    ) external view returns (uint256 price);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ILayerZeroTreasury {\n    function getFee(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _totalNativeFee,\n        bool _payInLzToken\n    ) external view returns (uint256 fee);\n\n    function payFee(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _totalNativeFee,\n        bool _payInLzToken\n    ) external payable returns (uint256 fee);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IWorker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IWorker {\n    event SetWorkerLib(address workerLib);\n    event SetPriceFeed(address priceFeed);\n    event SetDefaultMultiplierBps(uint16 multiplierBps);\n    event SetSupportedOptionTypes(uint32 dstEid, uint8[] optionTypes);\n    event Withdraw(address lib, address to, uint256 amount);\n\n    error Worker_NotAllowed();\n    error Worker_OnlyMessageLib();\n    error Worker_RoleRenouncingDisabled();\n\n    function setPriceFeed(address _priceFeed) external;\n\n    function priceFeed() external view returns (address);\n\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external;\n\n    function defaultMultiplierBps() external view returns (uint16);\n\n    function withdrawFee(address _lib, address _to, uint256 _amount) external;\n\n    function setSupportedOptionTypes(uint32 _eid, uint8[] calldata _optionTypes) external;\n\n    function getSupportedOptionTypes(uint32 _eid) external view returns (uint8[] memory);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/libs/SafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.20;\n\n/// @dev copied from https://github.com/nomad-xyz/ExcessivelySafeCall/blob/main/src/ExcessivelySafeCall.sol.\nlibrary SafeCall {\n    /// @notice calls a contract with a specified gas limit and value and captures the return data\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _value The value in wei to send to the remote contract\n    /// to memory.\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function safeCall(\n        address _target,\n        uint256 _gas,\n        uint256 _value,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // check that target has code\n        uint size;\n        assembly {\n            size := extcodesize(_target)\n        }\n        if (size == 0) {\n            return (false, new bytes(0));\n        }\n\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n                _gas, // gas\n                _target, // recipient\n                _value, // ether value\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 100 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function safeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // check that target has code\n        uint size;\n        assembly {\n            size := extcodesize(_target)\n        }\n        if (size == 0) {\n            return (false, new bytes(0));\n        }\n\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n                _gas, // gas\n                _target, // recipient\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/MessageLibBase.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\n/// @dev simply a container of endpoint address and local eid\nabstract contract MessageLibBase {\n    address internal immutable endpoint;\n    uint32 internal immutable localEid;\n\n    error LZ_MessageLib_OnlyEndpoint();\n\n    modifier onlyEndpoint() {\n        if (endpoint != msg.sender) revert LZ_MessageLib_OnlyEndpoint();\n        _;\n    }\n\n    constructor(address _endpoint, uint32 _localEid) {\n        endpoint = _endpoint;\n        localEid = _localEid;\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/SendLibBase.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Transfer } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol\";\n\nimport { ILayerZeroExecutor } from \"./interfaces/ILayerZeroExecutor.sol\";\nimport { ILayerZeroTreasury } from \"./interfaces/ILayerZeroTreasury.sol\";\nimport { SafeCall } from \"./libs/SafeCall.sol\";\nimport { MessageLibBase } from \"./MessageLibBase.sol\";\n\nstruct WorkerOptions {\n    uint8 workerId;\n    bytes options;\n}\n\nstruct SetDefaultExecutorConfigParam {\n    uint32 eid;\n    ExecutorConfig config;\n}\n\nstruct ExecutorConfig {\n    uint32 maxMessageSize;\n    address executor;\n}\n\n/// @dev base contract for both SendLibBaseE1 and SendLibBaseE2\nabstract contract SendLibBase is MessageLibBase, Ownable {\n    using SafeCall for address;\n\n    address private constant DEFAULT_CONFIG = address(0);\n    uint16 internal constant TREASURY_MAX_COPY = 32;\n\n    uint256 internal immutable treasuryGasLimit;\n    uint256 internal treasuryNativeFeeCap;\n\n    // config\n    address public treasury;\n    mapping(address oapp => mapping(uint32 eid => ExecutorConfig)) public executorConfigs;\n\n    // accumulated fees for workers and treasury\n    mapping(address worker => uint256) public fees;\n\n    event ExecutorFeePaid(address executor, uint256 fee);\n    event TreasurySet(address treasury);\n    event DefaultExecutorConfigsSet(SetDefaultExecutorConfigParam[] params);\n    event ExecutorConfigSet(address oapp, uint32 eid, ExecutorConfig config);\n    event TreasuryNativeFeeCapSet(uint256 newTreasuryNativeFeeCap);\n\n    error LZ_MessageLib_InvalidMessageSize(uint256 actual, uint256 max);\n    error LZ_MessageLib_InvalidAmount(uint256 requested, uint256 available);\n    error LZ_MessageLib_TransferFailed();\n    error LZ_MessageLib_InvalidExecutor();\n    error LZ_MessageLib_ZeroMessageSize();\n\n    constructor(\n        address _endpoint,\n        uint32 _localEid,\n        uint256 _treasuryGasLimit,\n        uint256 _treasuryNativeFeeCap\n    ) MessageLibBase(_endpoint, _localEid) {\n        treasuryGasLimit = _treasuryGasLimit;\n        treasuryNativeFeeCap = _treasuryNativeFeeCap;\n    }\n\n    function setDefaultExecutorConfigs(SetDefaultExecutorConfigParam[] calldata _params) external onlyOwner {\n        for (uint256 i = 0; i < _params.length; ++i) {\n            SetDefaultExecutorConfigParam calldata param = _params[i];\n\n            if (param.config.executor == address(0x0)) revert LZ_MessageLib_InvalidExecutor();\n            if (param.config.maxMessageSize == 0) revert LZ_MessageLib_ZeroMessageSize();\n\n            executorConfigs[DEFAULT_CONFIG][param.eid] = param.config;\n        }\n        emit DefaultExecutorConfigsSet(_params);\n    }\n\n    /// @dev the new value can not be greater than the old value, i.e. down only\n    function setTreasuryNativeFeeCap(uint256 _newTreasuryNativeFeeCap) external onlyOwner {\n        // assert the new value is no greater than the old value\n        if (_newTreasuryNativeFeeCap > treasuryNativeFeeCap)\n            revert LZ_MessageLib_InvalidAmount(_newTreasuryNativeFeeCap, treasuryNativeFeeCap);\n        treasuryNativeFeeCap = _newTreasuryNativeFeeCap;\n        emit TreasuryNativeFeeCapSet(_newTreasuryNativeFeeCap);\n    }\n\n    // ============================ View ===================================\n    // @dev get the executor config and if not set, return the default config\n    function getExecutorConfig(address _oapp, uint32 _remoteEid) public view returns (ExecutorConfig memory rtnConfig) {\n        ExecutorConfig storage defaultConfig = executorConfigs[DEFAULT_CONFIG][_remoteEid];\n        ExecutorConfig storage customConfig = executorConfigs[_oapp][_remoteEid];\n\n        uint32 maxMessageSize = customConfig.maxMessageSize;\n        rtnConfig.maxMessageSize = maxMessageSize != 0 ? maxMessageSize : defaultConfig.maxMessageSize;\n\n        address executor = customConfig.executor;\n        rtnConfig.executor = executor != address(0x0) ? executor : defaultConfig.executor;\n    }\n\n    // ======================= Internal =======================\n    function _assertMessageSize(uint256 _actual, uint256 _max) internal pure {\n        if (_actual > _max) revert LZ_MessageLib_InvalidMessageSize(_actual, _max);\n    }\n\n    function _payExecutor(\n        address _executor,\n        uint32 _dstEid,\n        address _sender,\n        uint256 _msgSize,\n        bytes memory _executorOptions\n    ) internal returns (uint256 executorFee) {\n        executorFee = ILayerZeroExecutor(_executor).assignJob(_dstEid, _sender, _msgSize, _executorOptions);\n        if (executorFee > 0) {\n            fees[_executor] += executorFee;\n        }\n        emit ExecutorFeePaid(_executor, executorFee);\n    }\n\n    function _payTreasury(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _totalNativeFee,\n        bool _payInLzToken\n    ) internal returns (uint256 treasuryNativeFee, uint256 lzTokenFee) {\n        if (treasury != address(0x0)) {\n            bytes memory callData = abi.encodeCall(\n                ILayerZeroTreasury.payFee,\n                (_sender, _dstEid, _totalNativeFee, _payInLzToken)\n            );\n            (bool success, bytes memory result) = treasury.safeCall(treasuryGasLimit, 0, TREASURY_MAX_COPY, callData);\n\n            (treasuryNativeFee, lzTokenFee) = _parseTreasuryResult(_totalNativeFee, _payInLzToken, success, result);\n            // fee should be in lzTokenFee if payInLzToken, otherwise in native\n            if (treasuryNativeFee > 0) {\n                fees[treasury] += treasuryNativeFee;\n            }\n        }\n    }\n\n    /// @dev the abstract process for quote() is:\n    /// 0/ split out the executor options and options of other workers\n    /// 1/ quote workers\n    /// 2/ quote executor\n    /// 3/ quote treasury\n    /// @return nativeFee, lzTokenFee\n    function _quote(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _msgSize,\n        bool _payInLzToken,\n        bytes calldata _options\n    ) internal view returns (uint256, uint256) {\n        (bytes memory executorOptions, WorkerOptions[] memory validationOptions) = _splitOptions(_options);\n\n        // quote the verifier used in the library. for ULN, it is a list of DVNs\n        uint256 nativeFee = _quoteVerifier(_sender, _dstEid, validationOptions);\n\n        // quote executor\n        ExecutorConfig memory config = getExecutorConfig(_sender, _dstEid);\n        // assert msg size\n        _assertMessageSize(_msgSize, config.maxMessageSize);\n\n        nativeFee += ILayerZeroExecutor(config.executor).getFee(_dstEid, _sender, _msgSize, executorOptions);\n\n        // quote treasury\n        (uint256 treasuryNativeFee, uint256 lzTokenFee) = _quoteTreasury(_sender, _dstEid, nativeFee, _payInLzToken);\n        nativeFee += treasuryNativeFee;\n\n        return (nativeFee, lzTokenFee);\n    }\n\n    /// @dev this interface should be DoS-free if the user is paying with native. properties\n    /// 1/ treasury can return an overly high lzToken fee\n    /// 2/ if treasury returns an overly high native fee, it will be capped by maxNativeFee,\n    ///    which can be reasoned with the configurations\n    /// 3/ the owner can not configure the treasury in a way that force this function to revert\n    function _quoteTreasury(\n        address _sender,\n        uint32 _dstEid,\n        uint256 _totalNativeFee,\n        bool _payInLzToken\n    ) internal view returns (uint256 nativeFee, uint256 lzTokenFee) {\n        // treasury must be set, and it has to be a contract\n        if (treasury != address(0x0)) {\n            bytes memory callData = abi.encodeCall(\n                ILayerZeroTreasury.getFee,\n                (_sender, _dstEid, _totalNativeFee, _payInLzToken)\n            );\n            (bool success, bytes memory result) = treasury.safeStaticCall(\n                treasuryGasLimit,\n                TREASURY_MAX_COPY,\n                callData\n            );\n\n            return _parseTreasuryResult(_totalNativeFee, _payInLzToken, success, result);\n        }\n    }\n\n    function _parseTreasuryResult(\n        uint256 _totalNativeFee,\n        bool _payInLzToken,\n        bool _success,\n        bytes memory _result\n    ) internal view returns (uint256 nativeFee, uint256 lzTokenFee) {\n        // failure, charges nothing\n        if (!_success || _result.length < TREASURY_MAX_COPY) return (0, 0);\n\n        // parse the result\n        uint256 treasureFeeQuote = abi.decode(_result, (uint256));\n        if (_payInLzToken) {\n            lzTokenFee = treasureFeeQuote;\n        } else {\n            // pay in native\n            // we must prevent high-treasuryFee Dos attack\n            // nativeFee = min(treasureFeeQuote, maxNativeFee)\n            // opportunistically raise the maxNativeFee to be the same as _totalNativeFee\n            // can't use the _totalNativeFee alone because the oapp can use custom workers to force the fee to 0.\n            // maxNativeFee = max (_totalNativeFee, treasuryNativeFeeCap)\n            uint256 maxNativeFee = _totalNativeFee > treasuryNativeFeeCap ? _totalNativeFee : treasuryNativeFeeCap;\n\n            // min (treasureFeeQuote, nativeFeeCap)\n            nativeFee = treasureFeeQuote > maxNativeFee ? maxNativeFee : treasureFeeQuote;\n        }\n    }\n\n    /// @dev authenticated by msg.sender only\n    function _debitFee(uint256 _amount) internal {\n        uint256 fee = fees[msg.sender];\n        if (_amount > fee) revert LZ_MessageLib_InvalidAmount(_amount, fee);\n        unchecked {\n            fees[msg.sender] = fee - _amount;\n        }\n    }\n\n    function _setTreasury(address _treasury) internal {\n        treasury = _treasury;\n        emit TreasurySet(_treasury);\n    }\n\n    function _setExecutorConfig(uint32 _remoteEid, address _oapp, ExecutorConfig memory _config) internal {\n        executorConfigs[_oapp][_remoteEid] = _config;\n        emit ExecutorConfigSet(_oapp, _remoteEid, _config);\n    }\n\n    // ======================= Virtual =======================\n    /// @dev these two functions will be overridden with specific logics of the library function\n    function _quoteVerifier(\n        address _oapp,\n        uint32 _eid,\n        WorkerOptions[] memory _options\n    ) internal view virtual returns (uint256 nativeFee);\n\n    /// @dev this function will split the options into executorOptions and validationOptions\n    function _splitOptions(\n        bytes calldata _options\n    ) internal view virtual returns (bytes memory executorOptions, WorkerOptions[] memory validationOptions);\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { BytesLib } from \"solidity-bytes-utils/contracts/BytesLib.sol\";\n\nimport { BitMap256 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\";\nimport { CalldataBytesLib } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\";\n\nlibrary DVNOptions {\n    using CalldataBytesLib for bytes;\n    using BytesLib for bytes;\n\n    uint8 internal constant WORKER_ID = 2;\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\n\n    error DVN_InvalidDVNIdx();\n    error DVN_InvalidDVNOptions(uint256 cursor);\n\n    /// @dev group dvn options by its idx\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\n    /// @return dvnOptions the grouped options, still share the same format of _options\n    /// @return dvnIndices the dvn indices\n    function groupDVNOptionsByIdx(\n        bytes memory _options\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\n\n        uint8 numDVNs = getNumDVNs(_options);\n\n        // if there is only 1 dvn, we can just return the whole options\n        if (numDVNs == 1) {\n            dvnOptions = new bytes[](1);\n            dvnOptions[0] = _options;\n\n            dvnIndices = new uint8[](1);\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\n            return (dvnOptions, dvnIndices);\n        }\n\n        // otherwise, we need to group the options by dvn_idx\n        dvnIndices = new uint8[](numDVNs);\n        dvnOptions = new bytes[](numDVNs);\n        unchecked {\n            uint256 cursor = 0;\n            uint256 start = 0;\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\n\n            while (cursor < _options.length) {\n                ++cursor; // skip worker_id\n\n                // optionLength asserted in getNumDVNs (skip check)\n                uint16 optionLength = _options.toUint16(cursor);\n                cursor += 2;\n\n                // dvnIdx asserted in getNumDVNs (skip check)\n                uint8 dvnIdx = _options.toUint8(cursor);\n\n                // dvnIdx must equal to the lastDVNIdx for the first option\n                // so it is always skipped in the first option\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\n                if (lastDVNIdx == 255) {\n                    lastDVNIdx = dvnIdx;\n                } else if (dvnIdx != lastDVNIdx) {\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\n                    bytes memory opt = _options.slice(start, len);\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\n\n                    // reset the start and lastDVNIdx\n                    start += len;\n                    lastDVNIdx = dvnIdx;\n                }\n\n                cursor += optionLength;\n            }\n\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\n            // if we have reached the end of the options, we need to process the last dvn\n            uint256 size = cursor - start;\n            bytes memory op = _options.slice(start, size);\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\n\n            // revert dvnIndices to start from 0\n            for (uint8 i = 0; i < numDVNs; ++i) {\n                --dvnIndices[i];\n            }\n        }\n    }\n\n    function _insertDVNOptions(\n        bytes[] memory _dvnOptions,\n        uint8[] memory _dvnIndices,\n        uint8 _dvnIdx,\n        bytes memory _newOptions\n    ) internal pure {\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\n        // so we tell if the slot is empty by adding 1 to dvnIdx\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\n        uint8 dvnIdxAdj = _dvnIdx + 1;\n\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\n            uint8 index = _dvnIndices[j];\n            if (dvnIdxAdj == index) {\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\n                break;\n            } else if (index == 0) {\n                // empty slot, that means it is the first time we see this dvn\n                _dvnIndices[j] = dvnIdxAdj;\n                _dvnOptions[j] = _newOptions;\n                break;\n            }\n        }\n    }\n\n    /// @dev get the number of unique dvns\n    /// @param _options the format is the same as groupDVNOptionsByIdx\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\n        uint256 cursor = 0;\n        BitMap256 bitmap;\n\n        // find number of unique dvn_idx\n        unchecked {\n            while (cursor < _options.length) {\n                ++cursor; // skip worker_id\n\n                uint16 optionLength = _options.toUint16(cursor);\n                cursor += 2;\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\n\n                uint8 dvnIdx = _options.toUint8(cursor);\n\n                // if dvnIdx is not set, increment numDVNs\n                // max num of dvns is 255, 255 is an invalid dvn_idx\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\n                // already enforced certain options can append additional options to the end of the enforced\n                // ones without restrictions.\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\n                if (!bitmap.get(dvnIdx)) {\n                    ++numDVNs;\n                    bitmap = bitmap.set(dvnIdx);\n                }\n\n                cursor += optionLength;\n            }\n        }\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\n    }\n\n    /// @dev decode the next dvn option from _options starting from the specified cursor\n    /// @param _options the format is the same as groupDVNOptionsByIdx\n    /// @param _cursor the cursor to start decoding\n    /// @return optionType the type of the option\n    /// @return option the option\n    /// @return cursor the cursor to start decoding the next option\n    function nextDVNOption(\n        bytes calldata _options,\n        uint256 _cursor\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\n        unchecked {\n            // skip worker id\n            cursor = _cursor + 1;\n\n            // read option size\n            uint16 size = _options.toU16(cursor);\n            cursor += 2;\n\n            // read option type\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\n\n            // startCursor and endCursor are used to slice the option from _options\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\n            uint256 endCursor = cursor + size;\n            option = _options[startCursor:endCursor];\n            cursor += size;\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/UlnOptions.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport { ExecutorOptions } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\";\n\nimport { DVNOptions } from \"./DVNOptions.sol\";\n\nlibrary UlnOptions {\n    using SafeCast for uint256;\n\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\n    uint16 internal constant TYPE_3 = 3;\n\n    error LZ_ULN_InvalidWorkerOptions(uint256 cursor);\n    error LZ_ULN_InvalidWorkerId(uint8 workerId);\n    error LZ_ULN_InvalidLegacyType1Option();\n    error LZ_ULN_InvalidLegacyType2Option();\n    error LZ_ULN_UnsupportedOptionType(uint16 optionType);\n\n    /// @dev decode the options into executorOptions and dvnOptions\n    /// @param _options the options can be either legacy options (type 1 or 2) or type 3 options\n    /// @return executorOptions the executor options, share the same format of type 3 options\n    /// @return dvnOptions the dvn options, share the same format of type 3 options\n    function decode(\n        bytes calldata _options\n    ) internal pure returns (bytes memory executorOptions, bytes memory dvnOptions) {\n        // at least 2 bytes for the option type, but can have no options\n        if (_options.length < 2) revert LZ_ULN_InvalidWorkerOptions(0);\n\n        uint16 optionsType = uint16(bytes2(_options[0:2]));\n        uint256 cursor = 2;\n\n        // type3 options: [worker_option][worker_option]...\n        // worker_option: [worker_id][option_size][option]\n        // worker_id: uint8, option_size: uint16, option: bytes\n        if (optionsType == TYPE_3) {\n            unchecked {\n                uint256 start = cursor;\n                uint8 lastWorkerId; // worker_id starts from 1, so 0 is an invalid worker_id\n\n                // heuristic: we assume that the options are mostly EXECUTOR options only\n                // checking the workerID can reduce gas usage for most cases\n                while (cursor < _options.length) {\n                    uint8 workerId = uint8(bytes1(_options[cursor:cursor + 1]));\n                    if (workerId == 0) revert LZ_ULN_InvalidWorkerId(0);\n\n                    // workerId must equal to the lastWorkerId for the first option\n                    // so it is always skipped in the first option\n                    // this operation slices out options whenever the the scan finds a different workerId\n                    if (lastWorkerId == 0) {\n                        lastWorkerId = workerId;\n                    } else if (workerId != lastWorkerId) {\n                        bytes calldata op = _options[start:cursor]; // slice out the last worker's options\n                        (executorOptions, dvnOptions) = _insertWorkerOptions(\n                            executorOptions,\n                            dvnOptions,\n                            lastWorkerId,\n                            op\n                        );\n\n                        // reset the start cursor and lastWorkerId\n                        start = cursor;\n                        lastWorkerId = workerId;\n                    }\n\n                    ++cursor; // for workerId\n\n                    uint16 size = uint16(bytes2(_options[cursor:cursor + 2]));\n                    if (size == 0) revert LZ_ULN_InvalidWorkerOptions(cursor);\n                    cursor += size + 2;\n                }\n\n                // the options length must be the same as the cursor at the end\n                if (cursor != _options.length) revert LZ_ULN_InvalidWorkerOptions(cursor);\n\n                // if we have reached the end of the options and the options are not empty\n                // we need to process the last worker's options\n                if (_options.length > 2) {\n                    bytes calldata op = _options[start:cursor];\n                    (executorOptions, dvnOptions) = _insertWorkerOptions(executorOptions, dvnOptions, lastWorkerId, op);\n                }\n            }\n        } else {\n            executorOptions = decodeLegacyOptions(optionsType, _options);\n        }\n    }\n\n    function _insertWorkerOptions(\n        bytes memory _executorOptions,\n        bytes memory _dvnOptions,\n        uint8 _workerId,\n        bytes calldata _newOptions\n    ) private pure returns (bytes memory, bytes memory) {\n        if (_workerId == ExecutorOptions.WORKER_ID) {\n            _executorOptions = _executorOptions.length == 0\n                ? _newOptions\n                : abi.encodePacked(_executorOptions, _newOptions);\n        } else if (_workerId == DVNOptions.WORKER_ID) {\n            _dvnOptions = _dvnOptions.length == 0 ? _newOptions : abi.encodePacked(_dvnOptions, _newOptions);\n        } else {\n            revert LZ_ULN_InvalidWorkerId(_workerId);\n        }\n        return (_executorOptions, _dvnOptions);\n    }\n\n    /// @dev decode the legacy options (type 1 or 2) into executorOptions\n    /// @param _optionType the legacy option type\n    /// @param _options the legacy options, which still has the option type in the first 2 bytes\n    /// @return executorOptions the executor options, share the same format of type 3 options\n    /// Data format:\n    /// legacy type 1: [extraGas]\n    /// legacy type 2: [extraGas][dstNativeAmt][dstNativeAddress]\n    /// extraGas: uint256, dstNativeAmt: uint256, dstNativeAddress: bytes\n    function decodeLegacyOptions(\n        uint16 _optionType,\n        bytes calldata _options\n    ) internal pure returns (bytes memory executorOptions) {\n        if (_optionType == TYPE_1) {\n            if (_options.length != 34) revert LZ_ULN_InvalidLegacyType1Option();\n\n            // execution gas\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\n\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\n            // the result is a lzReceive option: [executor_id][option_size][option_type][execution_gas]\n            // option_type: uint8, execution_gas: uint128\n            // option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\n            executorOptions = abi.encodePacked(\n                ExecutorOptions.WORKER_ID,\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                executionGas\n            );\n        } else if (_optionType == TYPE_2) {\n            // receiver size <= 32\n            if (_options.length <= 66 || _options.length > 98) revert LZ_ULN_InvalidLegacyType2Option();\n\n            // execution gas\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\n\n            // nativeDrop (amount + receiver)\n            uint128 amount = uint256(bytes32(_options[34:34 + 32])).toUint128(); // offset 2 + 32\n            bytes32 receiver;\n            unchecked {\n                uint256 receiverLen = _options.length - 66; // offset 2 + 32 + 32\n                receiver = bytes32(_options[66:]);\n                receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\n            }\n\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\n            // the result has one lzReceive option and one nativeDrop option:\n            //      [executor_id][lzReceive_option_size][option_type][execution_gas] +\n            //      [executor_id][nativeDrop_option_size][option_type][nativeDrop_amount][receiver]\n            // option_type: uint8, execution_gas: uint128, nativeDrop_amount: uint128, receiver: bytes32\n            // lzReceive_option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\n            // nativeDrop_option_size = len(option_type) + len(nativeDrop_amount) + len(receiver) = 1 + 16 + 32 = 49\n            executorOptions = abi.encodePacked(\n                ExecutorOptions.WORKER_ID,\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                executionGas,\n                ExecutorOptions.WORKER_ID,\n                uint16(49), // 48 + 1, 32 + 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_NATIVE_DROP,\n                amount,\n                receiver\n            );\n        } else {\n            revert LZ_ULN_UnsupportedOptionType(_optionType);\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ILayerZeroEndpointV2 } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\n\n/**\n * @title IOAppCore\n */\ninterface IOAppCore {\n    // Custom error messages\n    error OnlyPeer(uint32 eid, bytes32 sender);\n    error NoPeer(uint32 eid);\n    error InvalidEndpointCall();\n    error InvalidDelegate();\n\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\n    event PeerSet(uint32 eid, bytes32 peer);\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     */\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\n\n    /**\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\n     * @return iEndpoint The LayerZero endpoint as an interface.\n     */\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\n\n    /**\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\n     */\n    function peers(uint32 _eid) external view returns (bytes32 peer);\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) external;\n\n    /**\n     * @notice Sets the delegate address for the OApp Core.\n     * @param _delegate The address of the delegate to be set.\n     */\n    function setDelegate(address _delegate) external;\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppMsgInspector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @title IOAppMsgInspector\n * @dev Interface for the OApp Message Inspector, allowing examination of message and options contents.\n */\ninterface IOAppMsgInspector {\n    // Custom error message for inspection failure\n    error InspectionFailed(bytes message, bytes options);\n\n    /**\n     * @notice Allows the inspector to examine LayerZero message contents and optionally throw a revert if invalid.\n     * @param _message The message payload to be inspected.\n     * @param _options Additional options or parameters for inspection.\n     * @return valid A boolean indicating whether the inspection passed (true) or failed (false).\n     *\n     * @dev Optionally done as a revert, OR use the boolean provided to handle the failure.\n     */\n    function inspect(bytes calldata _message, bytes calldata _options) external view returns (bool valid);\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppOptionsType3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Struct representing enforced option parameters.\n */\nstruct EnforcedOptionParam {\n    uint32 eid; // Endpoint ID\n    uint16 msgType; // Message Type\n    bytes options; // Additional options\n}\n\n/**\n * @title IOAppOptionsType3\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\n */\ninterface IOAppOptionsType3 {\n    // Custom error message for invalid options\n    error InvalidOptions(bytes options);\n\n    // Event emitted when enforced options are set\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\n\n    /**\n     * @notice Sets enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     */\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\n\n    /**\n     * @notice Combines options for a given endpoint and message type.\n     * @param _eid The endpoint ID.\n     * @param _msgType The OApp message type.\n     * @param _extraOptions Additional options passed by the caller.\n     * @return options The combination of caller specified options AND enforced options.\n     */\n    function combineOptions(\n        uint32 _eid,\n        uint16 _msgType,\n        bytes calldata _extraOptions\n    ) external view returns (bytes memory options);\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ILayerZeroReceiver, Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\";\n\ninterface IOAppReceiver is ILayerZeroReceiver {\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata _origin,\n        bytes calldata _message,\n        address _sender\n    ) external view returns (bool isSender);\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/libs/OAppOptionsType3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppOptionsType3, EnforcedOptionParam } from \"../interfaces/IOAppOptionsType3.sol\";\n\n/**\n * @title OAppOptionsType3\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\n */\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\n    uint16 internal constant OPTION_TYPE_3 = 3;\n\n    // @dev The \"msgType\" should be defined in the child contract.\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\n\n    /**\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\n     */\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\n        _setEnforcedOptions(_enforcedOptions);\n    }\n\n    /**\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\n     *\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\n     */\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\n            _assertOptionsType3(_enforcedOptions[i].options);\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\n        }\n\n        emit EnforcedOptionSet(_enforcedOptions);\n    }\n\n    /**\n     * @notice Combines options for a given endpoint and message type.\n     * @param _eid The endpoint ID.\n     * @param _msgType The OAPP message type.\n     * @param _extraOptions Additional options passed by the caller.\n     * @return options The combination of caller specified options AND enforced options.\n     *\n     * @dev If there is an enforced lzReceive option:\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\n     */\n    function combineOptions(\n        uint32 _eid,\n        uint16 _msgType,\n        bytes calldata _extraOptions\n    ) public view virtual returns (bytes memory) {\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\n\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\n        if (enforced.length == 0) return _extraOptions;\n\n        // No caller options, return enforced\n        if (_extraOptions.length == 0) return enforced;\n\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\n        if (_extraOptions.length >= 2) {\n            _assertOptionsType3(_extraOptions);\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\n            return bytes.concat(enforced, _extraOptions[2:]);\n        }\n\n        // No valid set of options was found.\n        revert InvalidOptions(_extraOptions);\n    }\n\n    /**\n     * @dev Internal function to assert that options are of type 3.\n     * @param _options The options to be checked.\n     */\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\n        uint16 optionsType;\n        assembly {\n            optionsType := mload(add(_options, 2))\n        }\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppSender, MessagingFee, MessagingReceipt } from \"./OAppSender.sol\";\n// @dev Import the 'Origin' so it's exposed to OApp implementers\n// solhint-disable-next-line no-unused-import\nimport { OAppReceiver, Origin } from \"./OAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OApp\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\n */\nabstract contract OApp is OAppSender, OAppReceiver {\n    /**\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol implementation.\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\n     */\n    function oAppVersion()\n        public\n        pure\n        virtual\n        override(OAppSender, OAppReceiver)\n        returns (uint64 senderVersion, uint64 receiverVersion)\n    {\n        return (SENDER_VERSION, RECEIVER_VERSION);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IOAppCore, ILayerZeroEndpointV2 } from \"./interfaces/IOAppCore.sol\";\n\n/**\n * @title OAppCore\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\n */\nabstract contract OAppCore is IOAppCore, Ownable {\n    // The LayerZero endpoint associated with the given OApp\n    ILayerZeroEndpointV2 public immutable endpoint;\n\n    // Mapping to store peers associated with corresponding endpoints\n    mapping(uint32 eid => bytes32 peer) public peers;\n\n    /**\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     *\n     * @dev The delegate typically should be set as the owner of the contract.\n     */\n    constructor(address _endpoint, address _delegate) {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n\n        if (_delegate == address(0)) revert InvalidDelegate();\n        endpoint.setDelegate(_delegate);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\n        _setPeer(_eid, _peer);\n    }\n\n    /**\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\n     * @param _eid The endpoint ID.\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\n     *\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\n     * @dev Set this to bytes32(0) to remove the peer address.\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\n     */\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\n        peers[_eid] = _peer;\n        emit PeerSet(_eid, _peer);\n    }\n\n    /**\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\n     * ie. the peer is set to bytes32(0).\n     * @param _eid The endpoint ID.\n     * @return peer The address of the peer associated with the specified endpoint.\n     */\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\n        bytes32 peer = peers[_eid];\n        if (peer == bytes32(0)) revert NoPeer(_eid);\n        return peer;\n    }\n\n    /**\n     * @notice Sets the delegate address for the OApp.\n     * @param _delegate The address of the delegate to be set.\n     *\n     * @dev Only the owner/admin of the OApp can call this function.\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\n     */\n    function setDelegate(address _delegate) public onlyOwner {\n        endpoint.setDelegate(_delegate);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { IOAppReceiver, Origin } from \"./interfaces/IOAppReceiver.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppReceiver\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\n */\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\n    // Custom error message for when the caller is not the registered endpoint/\n    error OnlyEndpoint(address addr);\n\n    // @dev The version of the OAppReceiver implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant RECEIVER_VERSION = 2;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\n     * ie. this is a RECEIVE only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (0, RECEIVER_VERSION);\n    }\n\n    /**\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\n     * @dev _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @dev _message The lzReceive payload.\n     * @param _sender The sender address.\n     * @return isSender Is a valid sender.\n     *\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\n     * @dev The default sender IS the OAppReceiver implementer.\n     */\n    function isComposeMsgSender(\n        Origin calldata /*_origin*/,\n        bytes calldata /*_message*/,\n        address _sender\n    ) public view virtual returns (bool) {\n        return _sender == address(this);\n    }\n\n    /**\n     * @notice Checks if the path initialization is allowed based on the provided origin.\n     * @param origin The origin information containing the source endpoint and sender address.\n     * @return Whether the path has been initialized.\n     *\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\n     * @dev This defaults to assuming if a peer has been set, its initialized.\n     * Can be overridden by the OApp if there is other logic to determine this.\n     */\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\n        return peers[origin.srcEid] == origin.sender;\n    }\n\n    /**\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\n     * @dev _srcEid The source endpoint ID.\n     * @dev _sender The sender address.\n     * @return nonce The next nonce.\n     *\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\n     * @dev This is also enforced by the OApp.\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\n     */\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\n        return 0;\n    }\n\n    /**\n     * @dev Entry point for receiving messages or packets from the endpoint.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The payload of the received message.\n     * @param _executor The address of the executor for the received message.\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\n     *\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\n     */\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) public payable virtual {\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\n\n        // Ensure that the sender matches the expected peer for the source endpoint.\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\n\n        // Call the internal OApp implementation of lzReceive.\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { OAppCore } from \"./OAppCore.sol\";\n\n/**\n * @title OAppSender\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\n */\nabstract contract OAppSender is OAppCore {\n    using SafeERC20 for IERC20;\n\n    // Custom error messages\n    error NotEnoughNative(uint256 msgValue);\n    error LzTokenUnavailable();\n\n    // @dev The version of the OAppSender implementation.\n    // @dev Version is bumped when changes are made to this contract.\n    uint64 internal constant SENDER_VERSION = 1;\n\n    /**\n     * @notice Retrieves the OApp version information.\n     * @return senderVersion The version of the OAppSender.sol contract.\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\n     *\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\n     * ie. this is a SEND only OApp.\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\n     */\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\n        return (SENDER_VERSION, 0);\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\n     * @return fee The calculated MessagingFee for the message.\n     *      - nativeFee: The native fee for the message.\n     *      - lzTokenFee: The LZ token fee for the message.\n     */\n    function _quote(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        bool _payInLzToken\n    ) internal view virtual returns (MessagingFee memory fee) {\n        return\n            endpoint.quote(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\n                address(this)\n            );\n    }\n\n    /**\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\n     * @param _dstEid The destination endpoint ID.\n     * @param _message The message payload.\n     * @param _options Additional options for the message.\n     * @param _fee The calculated LayerZero fee for the message.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\n     * @return receipt The receipt for the sent message.\n     *      - guid: The unique identifier for the sent message.\n     *      - nonce: The nonce of the sent message.\n     *      - fee: The LayerZero fee incurred for the message.\n     */\n    function _lzSend(\n        uint32 _dstEid,\n        bytes memory _message,\n        bytes memory _options,\n        MessagingFee memory _fee,\n        address _refundAddress\n    ) internal virtual returns (MessagingReceipt memory receipt) {\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\n        uint256 messageValue = _payNative(_fee.nativeFee);\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\n\n        return\n            // solhint-disable-next-line check-send-result\n            endpoint.send{ value: messageValue }(\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\n                _refundAddress\n            );\n    }\n\n    /**\n     * @dev Internal function to pay the native fee associated with the message.\n     * @param _nativeFee The native fee to be paid.\n     * @return nativeFee The amount of native currency paid.\n     *\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\n     * this will need to be overridden because msg.value would contain multiple lzFees.\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\n     */\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\n        return _nativeFee;\n    }\n\n    /**\n     * @dev Internal function to pay the LZ token fee associated with the message.\n     * @param _lzTokenFee The LZ token fee to be paid.\n     *\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\n     */\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\n        address lzToken = endpoint.lzToken();\n        if (lzToken == address(0)) revert LzTokenUnavailable();\n\n        // Pay LZ token fee by sending tokens to the endpoint.\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { MessagingReceipt, MessagingFee } from \"../../oapp/OAppSender.sol\";\n\n/**\n * @dev Struct representing token parameters for the OFT send() operation.\n */\nstruct SendParam {\n    uint32 dstEid; // Destination endpoint ID.\n    bytes32 to; // Recipient address.\n    uint256 amountLD; // Amount to send in local decimals.\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\n    bytes composeMsg; // The composed message for the send() operation.\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\n}\n\n/**\n * @dev Struct representing OFT limit information.\n * @dev These amounts can change dynamically and are up the the specific oft implementation.\n */\nstruct OFTLimit {\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\n}\n\n/**\n * @dev Struct representing OFT receipt information.\n */\nstruct OFTReceipt {\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\n}\n\n/**\n * @dev Struct representing OFT fee details.\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\n */\nstruct OFTFeeDetail {\n    int256 feeAmountLD; // Amount of the fee in local decimals.\n    string description; // Description of the fee.\n}\n\n/**\n * @title IOFT\n * @dev Interface for the OftChain (OFT) token.\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\n * @dev This specific interface ID is '0x02e49c2c'.\n */\ninterface IOFT {\n    // Custom error messages\n    error InvalidLocalDecimals();\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\n\n    // Events\n    event OFTSent(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 dstEid, // Destination Endpoint ID.\n        address indexed fromAddress, // Address of the sender on the src chain.\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n    event OFTReceived(\n        bytes32 indexed guid, // GUID of the OFT message.\n        uint32 srcEid, // Source Endpoint ID.\n        address indexed toAddress, // Address of the recipient on the dst chain.\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\n    );\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\n\n    /**\n     * @notice Retrieves the address of the token associated with the OFT.\n     * @return token The address of the ERC20 token implementation.\n     */\n    function token() external view returns (address);\n\n    /**\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\n     * @return requiresApproval Needs approval of the underlying token implementation.\n     *\n     * @dev Allows things like wallet implementers to determine integration requirements,\n     * without understanding the underlying token implementation.\n     */\n    function approvalRequired() external view returns (bool);\n\n    /**\n     * @notice Retrieves the shared decimals of the OFT.\n     * @return sharedDecimals The shared decimals of the OFT.\n     */\n    function sharedDecimals() external view returns (uint8);\n\n    /**\n     * @notice Provides a quote for OFT-related operations.\n     * @param _sendParam The parameters for the send operation.\n     * @return limit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return receipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\n\n    /**\n     * @notice Executes the send() operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The fee information supplied by the caller.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\n     * @return receipt The LayerZero messaging receipt from the send() operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/libs/OFTComposeMsgCodec.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nlibrary OFTComposeMsgCodec {\n    // Offset constants for decoding composed messages\n    uint8 private constant NONCE_OFFSET = 8;\n    uint8 private constant SRC_EID_OFFSET = 12;\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\n\n    /**\n     * @dev Encodes a OFT composed message.\n     * @param _nonce The nonce value.\n     * @param _srcEid The source endpoint ID.\n     * @param _amountLD The amount in local decimals.\n     * @param _composeMsg The composed message.\n     * @return _msg The encoded Composed message.\n     */\n    function encode(\n        uint64 _nonce,\n        uint32 _srcEid,\n        uint256 _amountLD,\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\n    ) internal pure returns (bytes memory _msg) {\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\n    }\n\n    /**\n     * @dev Retrieves the nonce from the composed message.\n     * @param _msg The message.\n     * @return The nonce value.\n     */\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the source endpoint ID from the composed message.\n     * @param _msg The message.\n     * @return The source endpoint ID.\n     */\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the amount in local decimals from the composed message.\n     * @param _msg The message.\n     * @return The amount in local decimals.\n     */\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the composeFrom value from the composed message.\n     * @param _msg The message.\n     * @return The composeFrom value.\n     */\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\n    }\n\n    /**\n     * @dev Retrieves the composed message.\n     * @param _msg The message.\n     * @return The composed message.\n     */\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\n        return _msg[COMPOSE_FROM_OFFSET:];\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    /**\n     * @dev Converts bytes32 to an address.\n     * @param _b The bytes32 value to convert.\n     * @return The address representation of bytes32.\n     */\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\n        return address(uint160(uint256(_b)));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/libs/OFTMsgCodec.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nlibrary OFTMsgCodec {\n    // Offset constants for encoding and decoding OFT messages\n    uint8 private constant SEND_TO_OFFSET = 32;\n    uint8 private constant SEND_AMOUNT_SD_OFFSET = 40;\n\n    /**\n     * @dev Encodes an OFT LayerZero message.\n     * @param _sendTo The recipient address.\n     * @param _amountShared The amount in shared decimals.\n     * @param _composeMsg The composed message.\n     * @return _msg The encoded message.\n     * @return hasCompose A boolean indicating whether the message has a composed payload.\n     */\n    function encode(\n        bytes32 _sendTo,\n        uint64 _amountShared,\n        bytes memory _composeMsg\n    ) internal view returns (bytes memory _msg, bool hasCompose) {\n        hasCompose = _composeMsg.length > 0;\n        // @dev Remote chains will want to know the composed function caller ie. msg.sender on the src.\n        _msg = hasCompose\n            ? abi.encodePacked(_sendTo, _amountShared, addressToBytes32(msg.sender), _composeMsg)\n            : abi.encodePacked(_sendTo, _amountShared);\n    }\n\n    /**\n     * @dev Checks if the OFT message is composed.\n     * @param _msg The OFT message.\n     * @return A boolean indicating whether the message is composed.\n     */\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\n        return _msg.length > SEND_AMOUNT_SD_OFFSET;\n    }\n\n    /**\n     * @dev Retrieves the recipient address from the OFT message.\n     * @param _msg The OFT message.\n     * @return The recipient address.\n     */\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\n        return bytes32(_msg[:SEND_TO_OFFSET]);\n    }\n\n    /**\n     * @dev Retrieves the amount in shared decimals from the OFT message.\n     * @param _msg The OFT message.\n     * @return The amount in shared decimals.\n     */\n    function amountSD(bytes calldata _msg) internal pure returns (uint64) {\n        return uint64(bytes8(_msg[SEND_TO_OFFSET:SEND_AMOUNT_SD_OFFSET]));\n    }\n\n    /**\n     * @dev Retrieves the composed message from the OFT message.\n     * @param _msg The OFT message.\n     * @return The composed message.\n     */\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\n        return _msg[SEND_AMOUNT_SD_OFFSET:];\n    }\n\n    /**\n     * @dev Converts an address to bytes32.\n     * @param _addr The address to convert.\n     * @return The bytes32 representation of the address.\n     */\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    /**\n     * @dev Converts bytes32 to an address.\n     * @param _b The bytes32 value to convert.\n     * @return The address representation of bytes32.\n     */\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\n        return address(uint160(uint256(_b)));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/OFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IOFT, OFTCore } from \"./OFTCore.sol\";\n\n/**\n * @title OFT Contract\n * @dev OFT is an ERC-20 token that extends the functionality of the OFTCore contract.\n */\nabstract contract OFT is OFTCore, ERC20 {\n    /**\n     * @dev Constructor for the OFT contract.\n     * @param _name The name of the OFT.\n     * @param _symbol The symbol of the OFT.\n     * @param _lzEndpoint The LayerZero endpoint address.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _lzEndpoint,\n        address _delegate\n    ) ERC20(_name, _symbol) OFTCore(decimals(), _lzEndpoint, _delegate) {}\n\n    /**\n     * @dev Retrieves the address of the underlying ERC20 implementation.\n     * @return The address of the OFT token.\n     *\n     * @dev In the case of OFT, address(this) and erc20 are the same contract.\n     */\n    function token() public view returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\n     * @return requiresApproval Needs approval of the underlying token implementation.\n     *\n     * @dev In the case of OFT where the contract IS the token, approval is NOT required.\n     */\n    function approvalRequired() external pure virtual returns (bool) {\n        return false;\n    }\n\n    /**\n     * @dev Burns tokens from the sender's specified balance.\n     * @param _from The address to debit the tokens from.\n     * @param _amountLD The amount of tokens to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @param _dstEid The destination chain ID.\n     * @return amountSentLD The amount sent in local decimals.\n     * @return amountReceivedLD The amount received in local decimals on the remote.\n     */\n    function _debit(\n        address _from,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal virtual override returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        (amountSentLD, amountReceivedLD) = _debitView(_amountLD, _minAmountLD, _dstEid);\n\n        // @dev In NON-default OFT, amountSentLD could be 100, with a 10% fee, the amountReceivedLD amount is 90,\n        // therefore amountSentLD CAN differ from amountReceivedLD.\n\n        // @dev Default OFT burns on src.\n        _burn(_from, amountSentLD);\n    }\n\n    /**\n     * @dev Credits tokens to the specified address.\n     * @param _to The address to credit the tokens to.\n     * @param _amountLD The amount of tokens to credit in local decimals.\n     * @dev _srcEid The source chain ID.\n     * @return amountReceivedLD The amount of tokens ACTUALLY received in local decimals.\n     */\n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 /*_srcEid*/\n    ) internal virtual override returns (uint256 amountReceivedLD) {\n        // @dev Default OFT mints on dst.\n        _mint(_to, _amountLD);\n        // @dev In the case of NON-default OFT, the _amountLD MIGHT not be == amountReceivedLD.\n        return _amountLD;\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/OFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { OApp, Origin } from \"../oapp/OApp.sol\";\nimport { OAppOptionsType3 } from \"../oapp/libs/OAppOptionsType3.sol\";\nimport { IOAppMsgInspector } from \"../oapp/interfaces/IOAppMsgInspector.sol\";\n\nimport { OAppPreCrimeSimulator } from \"../precrime/OAppPreCrimeSimulator.sol\";\n\nimport { IOFT, SendParam, OFTLimit, OFTReceipt, OFTFeeDetail, MessagingReceipt, MessagingFee } from \"./interfaces/IOFT.sol\";\nimport { OFTMsgCodec } from \"./libs/OFTMsgCodec.sol\";\nimport { OFTComposeMsgCodec } from \"./libs/OFTComposeMsgCodec.sol\";\n\n/**\n * @title OFTCore\n * @dev Abstract contract for the OftChain (OFT) token.\n */\nabstract contract OFTCore is IOFT, OApp, OAppPreCrimeSimulator, OAppOptionsType3 {\n    using OFTMsgCodec for bytes;\n    using OFTMsgCodec for bytes32;\n\n    // @notice Provides a conversion rate when swapping between denominations of SD and LD\n    //      - shareDecimals == SD == shared Decimals\n    //      - localDecimals == LD == local decimals\n    // @dev Considers that tokens have different decimal amounts on various chains.\n    // @dev eg.\n    //  For a token\n    //      - locally with 4 decimals --> 1.2345 => uint(12345)\n    //      - remotely with 2 decimals --> 1.23 => uint(123)\n    //      - The conversion rate would be 10 ** (4 - 2) = 100\n    //  @dev If you want to send 1.2345 -> (uint 12345), you CANNOT represent that value on the remote,\n    //  you can only display 1.23 -> uint(123).\n    //  @dev To preserve the dust that would otherwise be lost on that conversion,\n    //  we need to unify a denomination that can be represented on ALL chains inside of the OFT mesh\n    uint256 public immutable decimalConversionRate;\n\n    // @notice Msg types that are used to identify the various OFT operations.\n    // @dev This can be extended in child contracts for non-default oft operations\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\n    uint16 public constant SEND = 1;\n    uint16 public constant SEND_AND_CALL = 2;\n\n    // Address of an optional contract to inspect both 'message' and 'options'\n    address public msgInspector;\n    event MsgInspectorSet(address inspector);\n\n    /**\n     * @dev Constructor.\n     * @param _localDecimals The decimals of the token on the local chain (this chain).\n     * @param _endpoint The address of the LayerZero endpoint.\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\n     */\n    constructor(uint8 _localDecimals, address _endpoint, address _delegate) OApp(_endpoint, _delegate) {\n        if (_localDecimals < sharedDecimals()) revert InvalidLocalDecimals();\n        decimalConversionRate = 10 ** (_localDecimals - sharedDecimals());\n    }\n\n    /**\n     * @notice Retrieves interfaceID and the version of the OFT.\n     * @return interfaceId The interface ID.\n     * @return version The version.\n     *\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\n     */\n    function oftVersion() external pure virtual returns (bytes4 interfaceId, uint64 version) {\n        return (type(IOFT).interfaceId, 1);\n    }\n\n    /**\n     * @dev Retrieves the shared decimals of the OFT.\n     * @return The shared decimals of the OFT.\n     *\n     * @dev Sets an implicit cap on the amount of tokens, over uint64.max() will need some sort of outbound cap / totalSupply cap\n     * Lowest common decimal denominator between chains.\n     * Defaults to 6 decimal places to provide up to 18,446,744,073,709.551615 units (max uint64).\n     * For tokens exceeding this totalSupply(), they will need to override the sharedDecimals function with something smaller.\n     * ie. 4 sharedDecimals would be 1,844,674,407,370,955.1615\n     */\n    function sharedDecimals() public view virtual returns (uint8) {\n        return 6;\n    }\n\n    /**\n     * @dev Sets the message inspector address for the OFT.\n     * @param _msgInspector The address of the message inspector.\n     *\n     * @dev This is an optional contract that can be used to inspect both 'message' and 'options'.\n     * @dev Set it to address(0) to disable it, or set it to a contract address to enable it.\n     */\n    function setMsgInspector(address _msgInspector) public virtual onlyOwner {\n        msgInspector = _msgInspector;\n        emit MsgInspectorSet(_msgInspector);\n    }\n\n    /**\n     * @notice Provides a quote for OFT-related operations.\n     * @param _sendParam The parameters for the send operation.\n     * @return oftLimit The OFT limit information.\n     * @return oftFeeDetails The details of OFT fees.\n     * @return oftReceipt The OFT receipt information.\n     */\n    function quoteOFT(\n        SendParam calldata _sendParam\n    )\n        external\n        view\n        virtual\n        returns (OFTLimit memory oftLimit, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory oftReceipt)\n    {\n        uint256 minAmountLD = 0; // Unused in the default implementation.\n        uint256 maxAmountLD = type(uint64).max; // Unused in the default implementation.\n        oftLimit = OFTLimit(minAmountLD, maxAmountLD);\n\n        // Unused in the default implementation; reserved for future complex fee details.\n        oftFeeDetails = new OFTFeeDetail[](0);\n\n        // @dev This is the same as the send() operation, but without the actual send.\n        // - amountSentLD is the amount in local decimals that would be sent from the sender.\n        // - amountReceivedLD is the amount in local decimals that will be credited to the recipient on the remote OFT instance.\n        // @dev The amountSentLD MIGHT not equal the amount the user actually receives. HOWEVER, the default does.\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debitView(\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\n    }\n\n    /**\n     * @notice Provides a quote for the send() operation.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\n     * @return msgFee The calculated LayerZero messaging fee from the send() operation.\n     *\n     * @dev MessagingFee: LayerZero msg fee\n     *  - nativeFee: The native fee.\n     *  - lzTokenFee: The lzToken fee.\n     */\n    function quoteSend(\n        SendParam calldata _sendParam,\n        bool _payInLzToken\n    ) external view virtual returns (MessagingFee memory msgFee) {\n        // @dev mock the amount to receive, this is the same operation used in the send().\n        // The quote is as similar as possible to the actual send() operation.\n        (, uint256 amountReceivedLD) = _debitView(_sendParam.amountLD, _sendParam.minAmountLD, _sendParam.dstEid);\n\n        // @dev Builds the options and OFT message to quote in the endpoint.\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\n\n        // @dev Calculates the LayerZero fee for the send() operation.\n        return _quote(_sendParam.dstEid, message, options, _payInLzToken);\n    }\n\n    /**\n     * @dev Executes the send operation.\n     * @param _sendParam The parameters for the send operation.\n     * @param _fee The calculated fee for the send() operation.\n     *      - nativeFee: The native fee.\n     *      - lzTokenFee: The lzToken fee.\n     * @param _refundAddress The address to receive any excess funds.\n     * @return msgReceipt The receipt for the send operation.\n     * @return oftReceipt The OFT receipt information.\n     *\n     * @dev MessagingReceipt: LayerZero msg receipt\n     *  - guid: The unique identifier for the sent message.\n     *  - nonce: The nonce of the sent message.\n     *  - fee: The LayerZero fee incurred for the message.\n     */\n    function send(\n        SendParam calldata _sendParam,\n        MessagingFee calldata _fee,\n        address _refundAddress\n    ) external payable virtual returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\n        // @dev Applies the token transfers regarding this send() operation.\n        // - amountSentLD is the amount in local decimals that was ACTUALLY sent/debited from the sender.\n        // - amountReceivedLD is the amount in local decimals that will be received/credited to the recipient on the remote OFT instance.\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\n            msg.sender,\n            _sendParam.amountLD,\n            _sendParam.minAmountLD,\n            _sendParam.dstEid\n        );\n\n        // @dev Builds the options and OFT message to quote in the endpoint.\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(_sendParam, amountReceivedLD);\n\n        // @dev Sends the message to the LayerZero endpoint and returns the LayerZero msg receipt.\n        msgReceipt = _lzSend(_sendParam.dstEid, message, options, _fee, _refundAddress);\n        // @dev Formulate the OFT receipt.\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\n\n        emit OFTSent(msgReceipt.guid, _sendParam.dstEid, msg.sender, amountSentLD, amountReceivedLD);\n    }\n\n    /**\n     * @dev Internal function to build the message and options.\n     * @param _sendParam The parameters for the send() operation.\n     * @param _amountLD The amount in local decimals.\n     * @return message The encoded message.\n     * @return options The encoded options.\n     */\n    function _buildMsgAndOptions(\n        SendParam calldata _sendParam,\n        uint256 _amountLD\n    ) internal view virtual returns (bytes memory message, bytes memory options) {\n        bool hasCompose;\n        // @dev This generated message has the msg.sender encoded into the payload so the remote knows who the caller is.\n        (message, hasCompose) = OFTMsgCodec.encode(\n            _sendParam.to,\n            _toSD(_amountLD),\n            // @dev Must be include a non empty bytes if you want to compose, EVEN if you dont need it on the remote.\n            // EVEN if you dont require an arbitrary payload to be sent... eg. '0x01'\n            _sendParam.composeMsg\n        );\n        // @dev Change the msg type depending if its composed or not.\n        uint16 msgType = hasCompose ? SEND_AND_CALL : SEND;\n        // @dev Combine the callers _extraOptions with the enforced options via the OAppOptionsType3.\n        options = combineOptions(_sendParam.dstEid, msgType, _sendParam.extraOptions);\n\n        // @dev Optionally inspect the message and options depending if the OApp owner has set a msg inspector.\n        // @dev If it fails inspection, needs to revert in the implementation. ie. does not rely on return boolean\n        if (msgInspector != address(0)) IOAppMsgInspector(msgInspector).inspect(message, options);\n    }\n\n    /**\n     * @dev Internal function to handle the receive on the LayerZero endpoint.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The encoded message.\n     * @dev _executor The address of the executor.\n     * @dev _extraData Additional data.\n     */\n    function _lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address /*_executor*/, // @dev unused in the default implementation.\n        bytes calldata /*_extraData*/ // @dev unused in the default implementation.\n    ) internal virtual override {\n        // @dev The src sending chain doesnt know the address length on this chain (potentially non-evm)\n        // Thus everything is bytes32() encoded in flight.\n        address toAddress = _message.sendTo().bytes32ToAddress();\n        // @dev Credit the amountLD to the recipient and return the ACTUAL amount the recipient received in local decimals\n        uint256 amountReceivedLD = _credit(toAddress, _toLD(_message.amountSD()), _origin.srcEid);\n\n        if (_message.isComposed()) {\n            // @dev Proprietary composeMsg format for the OFT.\n            bytes memory composeMsg = OFTComposeMsgCodec.encode(\n                _origin.nonce,\n                _origin.srcEid,\n                amountReceivedLD,\n                _message.composeMsg()\n            );\n\n            // @dev Stores the lzCompose payload that will be executed in a separate tx.\n            // Standardizes functionality for executing arbitrary contract invocation on some non-evm chains.\n            // @dev The off-chain executor will listen and process the msg based on the src-chain-callers compose options passed.\n            // @dev The index is used when a OApp needs to compose multiple msgs on lzReceive.\n            // For default OFT implementation there is only 1 compose msg per lzReceive, thus its always 0.\n            endpoint.sendCompose(toAddress, _guid, 0 /* the index of the composed message*/, composeMsg);\n        }\n\n        emit OFTReceived(_guid, _origin.srcEid, toAddress, amountReceivedLD);\n    }\n\n    /**\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The unique identifier for the received LayerZero message.\n     * @param _message The LayerZero message.\n     * @param _executor The address of the off-chain executor.\n     * @param _extraData Arbitrary data passed by the msg executor.\n     *\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\n     */\n    function _lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual override {\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Check if the peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint ID to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     *\n     * @dev Enables OAppPreCrimeSimulator to check whether a potential Inbound Packet is from a trusted source.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual override returns (bool) {\n        return peers[_eid] == _peer;\n    }\n\n    /**\n     * @dev Internal function to remove dust from the given local decimal amount.\n     * @param _amountLD The amount in local decimals.\n     * @return amountLD The amount after removing dust.\n     *\n     * @dev Prevents the loss of dust when moving amounts between chains with different decimals.\n     * @dev eg. uint(123) with a conversion rate of 100 becomes uint(100).\n     */\n    function _removeDust(uint256 _amountLD) internal view virtual returns (uint256 amountLD) {\n        return (_amountLD / decimalConversionRate) * decimalConversionRate;\n    }\n\n    /**\n     * @dev Internal function to convert an amount from shared decimals into local decimals.\n     * @param _amountSD The amount in shared decimals.\n     * @return amountLD The amount in local decimals.\n     */\n    function _toLD(uint64 _amountSD) internal view virtual returns (uint256 amountLD) {\n        return _amountSD * decimalConversionRate;\n    }\n\n    /**\n     * @dev Internal function to convert an amount from local decimals into shared decimals.\n     * @param _amountLD The amount in local decimals.\n     * @return amountSD The amount in shared decimals.\n     */\n    function _toSD(uint256 _amountLD) internal view virtual returns (uint64 amountSD) {\n        return uint64(_amountLD / decimalConversionRate);\n    }\n\n    /**\n     * @dev Internal function to mock the amount mutation from a OFT debit() operation.\n     * @param _amountLD The amount to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @dev _dstEid The destination endpoint ID.\n     * @return amountSentLD The amount sent, in local decimals.\n     * @return amountReceivedLD The amount to be received on the remote chain, in local decimals.\n     *\n     * @dev This is where things like fees would be calculated and deducted from the amount to be received on the remote.\n     */\n    function _debitView(\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 /*_dstEid*/\n    ) internal view virtual returns (uint256 amountSentLD, uint256 amountReceivedLD) {\n        // @dev Remove the dust so nothing is lost on the conversion between chains with different decimals for the token.\n        amountSentLD = _removeDust(_amountLD);\n        // @dev The amount to send is the same as amount received in the default implementation.\n        amountReceivedLD = amountSentLD;\n\n        // @dev Check for slippage.\n        if (amountReceivedLD < _minAmountLD) {\n            revert SlippageExceeded(amountReceivedLD, _minAmountLD);\n        }\n    }\n\n    /**\n     * @dev Internal function to perform a debit operation.\n     * @param _from The address to debit.\n     * @param _amountLD The amount to send in local decimals.\n     * @param _minAmountLD The minimum amount to send in local decimals.\n     * @param _dstEid The destination endpoint ID.\n     * @return amountSentLD The amount sent in local decimals.\n     * @return amountReceivedLD The amount received in local decimals on the remote.\n     *\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\n     */\n    function _debit(\n        address _from,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        uint32 _dstEid\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\n\n    /**\n     * @dev Internal function to perform a credit operation.\n     * @param _to The address to credit.\n     * @param _amountLD The amount to credit in local decimals.\n     * @param _srcEid The source endpoint ID.\n     * @return amountReceivedLD The amount ACTUALLY received in local decimals.\n     *\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\n     */\n    function _credit(\n        address _to,\n        uint256 _amountLD,\n        uint32 _srcEid\n    ) internal virtual returns (uint256 amountReceivedLD);\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n// @dev Import the Origin so it's exposed to OAppPreCrimeSimulator implementers.\n// solhint-disable-next-line no-unused-import\nimport { InboundPacket, Origin } from \"../libs/Packet.sol\";\n\n/**\n * @title IOAppPreCrimeSimulator Interface\n * @dev Interface for the preCrime simulation functionality in an OApp.\n */\ninterface IOAppPreCrimeSimulator {\n    // @dev simulation result used in PreCrime implementation\n    error SimulationResult(bytes result);\n    error OnlySelf();\n\n    /**\n     * @dev Emitted when the preCrime contract address is set.\n     * @param preCrimeAddress The address of the preCrime contract.\n     */\n    event PreCrimeSet(address preCrimeAddress);\n\n    /**\n     * @dev Retrieves the address of the preCrime contract implementation.\n     * @return The address of the preCrime contract.\n     */\n    function preCrime() external view returns (address);\n\n    /**\n     * @dev Retrieves the address of the OApp contract.\n     * @return The address of the OApp contract.\n     */\n    function oApp() external view returns (address);\n\n    /**\n     * @dev Sets the preCrime contract address.\n     * @param _preCrime The address of the preCrime contract.\n     */\n    function setPreCrime(address _preCrime) external;\n\n    /**\n     * @dev Mocks receiving a packet, then reverts with a series of data to infer the state/result.\n     * @param _packets An array of LayerZero InboundPacket objects representing received packets.\n     */\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) external payable;\n\n    /**\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint Id to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) external view returns (bool);\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/precrime/interfaces/IPreCrime.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\nstruct PreCrimePeer {\n    uint32 eid;\n    bytes32 preCrime;\n    bytes32 oApp;\n}\n\n// TODO not done yet\ninterface IPreCrime {\n    error OnlyOffChain();\n\n    // for simulate()\n    error PacketOversize(uint256 max, uint256 actual);\n    error PacketUnsorted();\n    error SimulationFailed(bytes reason);\n\n    // for preCrime()\n    error SimulationResultNotFound(uint32 eid);\n    error InvalidSimulationResult(uint32 eid, bytes reason);\n    error CrimeFound(bytes crime);\n\n    function getConfig(bytes[] calldata _packets, uint256[] calldata _packetMsgValues) external returns (bytes memory);\n\n    function simulate(\n        bytes[] calldata _packets,\n        uint256[] calldata _packetMsgValues\n    ) external payable returns (bytes memory);\n\n    function buildSimulationResult() external view returns (bytes memory);\n\n    function preCrime(\n        bytes[] calldata _packets,\n        uint256[] calldata _packetMsgValues,\n        bytes[] calldata _simulations\n    ) external;\n\n    function version() external view returns (uint64 major, uint8 minor);\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/precrime/libs/Packet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { PacketV1Codec } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\";\n\n/**\n * @title InboundPacket\n * @dev Structure representing an inbound packet received by the contract.\n */\nstruct InboundPacket {\n    Origin origin; // Origin information of the packet.\n    uint32 dstEid; // Destination endpointId of the packet.\n    address receiver; // Receiver address for the packet.\n    bytes32 guid; // Unique identifier of the packet.\n    uint256 value; // msg.value of the packet.\n    address executor; // Executor address for the packet.\n    bytes message; // Message payload of the packet.\n    bytes extraData; // Additional arbitrary data for the packet.\n}\n\n/**\n * @title PacketDecoder\n * @dev Library for decoding LayerZero packets.\n */\nlibrary PacketDecoder {\n    using PacketV1Codec for bytes;\n\n    /**\n     * @dev Decode an inbound packet from the given packet data.\n     * @param _packet The packet data to decode.\n     * @return packet An InboundPacket struct representing the decoded packet.\n     */\n    function decode(bytes calldata _packet) internal pure returns (InboundPacket memory packet) {\n        packet.origin = Origin(_packet.srcEid(), _packet.sender(), _packet.nonce());\n        packet.dstEid = _packet.dstEid();\n        packet.receiver = _packet.receiverB20();\n        packet.guid = _packet.guid();\n        packet.message = _packet.message();\n    }\n\n    /**\n     * @dev Decode multiple inbound packets from the given packet data and associated message values.\n     * @param _packets An array of packet data to decode.\n     * @param _packetMsgValues An array of associated message values for each packet.\n     * @return packets An array of InboundPacket structs representing the decoded packets.\n     */\n    function decode(\n        bytes[] calldata _packets,\n        uint256[] memory _packetMsgValues\n    ) internal pure returns (InboundPacket[] memory packets) {\n        packets = new InboundPacket[](_packets.length);\n        for (uint256 i = 0; i < _packets.length; i++) {\n            bytes calldata packet = _packets[i];\n            packets[i] = PacketDecoder.decode(packet);\n            // @dev Allows the verifier to specify the msg.value that gets passed in lzReceive.\n            packets[i].value = _packetMsgValues[i];\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-oapp-v2/contracts/precrime/OAppPreCrimeSimulator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IPreCrime } from \"./interfaces/IPreCrime.sol\";\nimport { IOAppPreCrimeSimulator, InboundPacket, Origin } from \"./interfaces/IOAppPreCrimeSimulator.sol\";\n\n/**\n * @title OAppPreCrimeSimulator\n * @dev Abstract contract serving as the base for preCrime simulation functionality in an OApp.\n */\nabstract contract OAppPreCrimeSimulator is IOAppPreCrimeSimulator, Ownable {\n    // The address of the preCrime implementation.\n    address public preCrime;\n\n    /**\n     * @dev Retrieves the address of the OApp contract.\n     * @return The address of the OApp contract.\n     *\n     * @dev The simulator contract is the base contract for the OApp by default.\n     * @dev If the simulator is a separate contract, override this function.\n     */\n    function oApp() external view virtual returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @dev Sets the preCrime contract address.\n     * @param _preCrime The address of the preCrime contract.\n     */\n    function setPreCrime(address _preCrime) public virtual onlyOwner {\n        preCrime = _preCrime;\n        emit PreCrimeSet(_preCrime);\n    }\n\n    /**\n     * @dev Interface for pre-crime simulations. Always reverts at the end with the simulation results.\n     * @param _packets An array of InboundPacket objects representing received packets to be delivered.\n     *\n     * @dev WARNING: MUST revert at the end with the simulation results.\n     * @dev Gives the preCrime implementation the ability to mock sending packets to the lzReceive function,\n     * WITHOUT actually executing them.\n     */\n    function lzReceiveAndRevert(InboundPacket[] calldata _packets) public payable virtual {\n        for (uint256 i = 0; i < _packets.length; i++) {\n            InboundPacket calldata packet = _packets[i];\n\n            // Ignore packets that are not from trusted peers.\n            if (!isPeer(packet.origin.srcEid, packet.origin.sender)) continue;\n\n            // @dev Because a verifier is calling this function, it doesnt have access to executor params:\n            //  - address _executor\n            //  - bytes calldata _extraData\n            // preCrime will NOT work for OApps that rely on these two parameters inside of their _lzReceive().\n            // They are instead stubbed to default values, address(0) and bytes(\"\")\n            // @dev Calling this.lzReceiveSimulate removes ability for assembly return 0 callstack exit,\n            // which would cause the revert to be ignored.\n            this.lzReceiveSimulate{ value: packet.value }(\n                packet.origin,\n                packet.guid,\n                packet.message,\n                packet.executor,\n                packet.extraData\n            );\n        }\n\n        // @dev Revert with the simulation results. msg.sender must implement IPreCrime.buildSimulationResult().\n        revert SimulationResult(IPreCrime(msg.sender).buildSimulationResult());\n    }\n\n    /**\n     * @dev Is effectively an internal function because msg.sender must be address(this).\n     * Allows resetting the call stack for 'internal' calls.\n     * @param _origin The origin information containing the source endpoint and sender address.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address on the src chain.\n     *  - nonce: The nonce of the message.\n     * @param _guid The unique identifier of the packet.\n     * @param _message The message payload of the packet.\n     * @param _executor The executor address for the packet.\n     * @param _extraData Additional data for the packet.\n     */\n    function lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable virtual {\n        // @dev Ensure ONLY can be called 'internally'.\n        if (msg.sender != address(this)) revert OnlySelf();\n        _lzReceiveSimulate(_origin, _guid, _message, _executor, _extraData);\n    }\n\n    /**\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\n     * @param _origin The origin information.\n     *  - srcEid: The source chain endpoint ID.\n     *  - sender: The sender address from the src chain.\n     *  - nonce: The nonce of the LayerZero message.\n     * @param _guid The GUID of the LayerZero message.\n     * @param _message The LayerZero message.\n     * @param _executor The address of the off-chain executor.\n     * @param _extraData Arbitrary data passed by the msg executor.\n     *\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\n     */\n    function _lzReceiveSimulate(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) internal virtual;\n\n    /**\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\n     * @param _eid The endpoint Id to check.\n     * @param _peer The peer to check.\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\n     */\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual returns (bool);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/EndpointV2ViewUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./interfaces/ILayerZeroEndpointV2.sol\";\n\nenum ExecutionState {\n    NotExecutable, // executor: waits for PayloadVerified event and starts polling for executable\n    VerifiedButNotExecutable, // executor: starts active polling for executable\n    Executable,\n    Executed\n}\n\ncontract EndpointV2ViewUpgradeable is Initializable {\n    bytes32 public constant EMPTY_PAYLOAD_HASH = bytes32(0);\n    bytes32 public constant NIL_PAYLOAD_HASH = bytes32(type(uint256).max);\n\n    ILayerZeroEndpointV2 public endpoint;\n\n    function __EndpointV2View_init(address _endpoint) internal onlyInitializing {\n        __EndpointV2View_init_unchained(_endpoint);\n    }\n\n    function __EndpointV2View_init_unchained(address _endpoint) internal onlyInitializing {\n        endpoint = ILayerZeroEndpointV2(_endpoint);\n    }\n\n    function initializable(Origin memory _origin, address _receiver) public view returns (bool) {\n        try endpoint.initializable(_origin, _receiver) returns (bool _initializable) {\n            return _initializable;\n        } catch {\n            return false;\n        }\n    }\n\n    /// @dev check if a message is verifiable.\n    function verifiable(\n        Origin memory _origin,\n        address _receiver,\n        address _receiveLib,\n        bytes32 _payloadHash\n    ) public view returns (bool) {\n        if (!endpoint.isValidReceiveLibrary(_receiver, _origin.srcEid, _receiveLib)) return false;\n\n        if (!endpoint.verifiable(_origin, _receiver)) return false;\n\n        // checked in _inbound for verify\n        if (_payloadHash == EMPTY_PAYLOAD_HASH) return false;\n\n        return true;\n    }\n\n    /// @dev check if a message is executable.\n    /// @return ExecutionState of Executed, Executable, or NotExecutable\n    function executable(Origin memory _origin, address _receiver) public view returns (ExecutionState) {\n        bytes32 payloadHash = endpoint.inboundPayloadHash(_receiver, _origin.srcEid, _origin.sender, _origin.nonce);\n\n        // executed if the payload hash has been cleared and the nonce is less than or equal to lazyInboundNonce\n        if (\n            payloadHash == EMPTY_PAYLOAD_HASH &&\n            _origin.nonce <= endpoint.lazyInboundNonce(_receiver, _origin.srcEid, _origin.sender)\n        ) {\n            return ExecutionState.Executed;\n        }\n\n        // executable if nonce has not been executed and has not been nilified and nonce is less than or equal to inboundNonce\n        if (\n            payloadHash != NIL_PAYLOAD_HASH &&\n            _origin.nonce <= endpoint.inboundNonce(_receiver, _origin.srcEid, _origin.sender)\n        ) {\n            return ExecutionState.Executable;\n        }\n\n        // only start active executable polling if payload hash is not empty nor nil\n        if (payloadHash != EMPTY_PAYLOAD_HASH && payloadHash != NIL_PAYLOAD_HASH) {\n            return ExecutionState.VerifiedButNotExecutable;\n        }\n\n        // return NotExecutable as a catch-all\n        return ExecutionState.NotExecutable;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IMessageLibManager } from \"./IMessageLibManager.sol\";\nimport { IMessagingComposer } from \"./IMessagingComposer.sol\";\nimport { IMessagingChannel } from \"./IMessagingChannel.sol\";\nimport { IMessagingContext } from \"./IMessagingContext.sol\";\n\nstruct MessagingParams {\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes message;\n    bytes options;\n    bool payInLzToken;\n}\n\nstruct MessagingReceipt {\n    bytes32 guid;\n    uint64 nonce;\n    MessagingFee fee;\n}\n\nstruct MessagingFee {\n    uint256 nativeFee;\n    uint256 lzTokenFee;\n}\n\nstruct Origin {\n    uint32 srcEid;\n    bytes32 sender;\n    uint64 nonce;\n}\n\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\n\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\n\n    event PacketDelivered(Origin origin, address receiver);\n\n    event LzReceiveAlert(\n        address indexed receiver,\n        address indexed executor,\n        Origin origin,\n        bytes32 guid,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    event LzTokenSet(address token);\n\n    event DelegateSet(address sender, address delegate);\n\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\n\n    function send(\n        MessagingParams calldata _params,\n        address _refundAddress\n    ) external payable returns (MessagingReceipt memory);\n\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\n\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\n\n    function lzReceive(\n        Origin calldata _origin,\n        address _receiver,\n        bytes32 _guid,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\n\n    function setLzToken(address _lzToken) external;\n\n    function lzToken() external view returns (address);\n\n    function nativeToken() external view returns (address);\n\n    function setDelegate(address _delegate) external;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { Origin } from \"./ILayerZeroEndpointV2.sol\";\n\ninterface ILayerZeroReceiver {\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\n\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\n\n    function lzReceive(\n        Origin calldata _origin,\n        bytes32 _guid,\n        bytes calldata _message,\n        address _executor,\n        bytes calldata _extraData\n    ) external payable;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { IERC165 } from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport { SetConfigParam } from \"./IMessageLibManager.sol\";\n\nenum MessageLibType {\n    Send,\n    Receive,\n    SendAndReceive\n}\n\ninterface IMessageLib is IERC165 {\n    function setConfig(address _oapp, SetConfigParam[] calldata _config) external;\n\n    function getConfig(uint32 _eid, address _oapp, uint32 _configType) external view returns (bytes memory config);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    // message libs of same major version are compatible\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\n\n    function messageLibType() external view returns (MessageLibType);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nstruct SetConfigParam {\n    uint32 eid;\n    uint32 configType;\n    bytes config;\n}\n\ninterface IMessageLibManager {\n    struct Timeout {\n        address lib;\n        uint256 expiry;\n    }\n\n    event LibraryRegistered(address newLib);\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\n\n    function registerLibrary(address _lib) external;\n\n    function isRegisteredLibrary(address _lib) external view returns (bool);\n\n    function getRegisteredLibraries() external view returns (address[] memory);\n\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\n\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _timeout) external;\n\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\n\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\n\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function isSupportedEid(uint32 _eid) external view returns (bool);\n\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\n\n    /// ------------------- OApp interfaces -------------------\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\n\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\n\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\n\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\n\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\n\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _gracePeriod) external;\n\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\n\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\n\n    function getConfig(\n        address _oapp,\n        address _lib,\n        uint32 _eid,\n        uint32 _configType\n    ) external view returns (bytes memory config);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingChannel {\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\n\n    function eid() external view returns (uint32);\n\n    // this is an emergency function if a message cannot be verified for some reasons\n    // required to provide _nextNonce to avoid race condition\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\n\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\n\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\n\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\n\n    function inboundPayloadHash(\n        address _receiver,\n        uint32 _srcEid,\n        bytes32 _sender,\n        uint64 _nonce\n    ) external view returns (bytes32);\n\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingComposer {\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\n    event LzComposeAlert(\n        address indexed from,\n        address indexed to,\n        address indexed executor,\n        bytes32 guid,\n        uint16 index,\n        uint256 gas,\n        uint256 value,\n        bytes message,\n        bytes extraData,\n        bytes reason\n    );\n\n    function composeQueue(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index\n    ) external view returns (bytes32 messageHash);\n\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\n\n    function lzCompose(\n        address _from,\n        address _to,\n        bytes32 _guid,\n        uint16 _index,\n        bytes calldata _message,\n        bytes calldata _extraData\n    ) external payable;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMessagingContext {\n    function isSendingMessage() external view returns (bool);\n\n    function getSendContext() external view returns (uint32 dstEid, address sender);\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nimport { MessagingFee } from \"./ILayerZeroEndpointV2.sol\";\nimport { IMessageLib } from \"./IMessageLib.sol\";\n\nstruct Packet {\n    uint64 nonce;\n    uint32 srcEid;\n    address sender;\n    uint32 dstEid;\n    bytes32 receiver;\n    bytes32 guid;\n    bytes message;\n}\n\ninterface ISendLib is IMessageLib {\n    function send(\n        Packet calldata _packet,\n        bytes calldata _options,\n        bool _payInLzToken\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\n\n    function quote(\n        Packet calldata _packet,\n        bytes calldata _options,\n        bool _payInLzToken\n    ) external view returns (MessagingFee memory);\n\n    function setTreasury(address _treasury) external;\n\n    function withdrawFee(address _to, uint256 _amount) external;\n\n    function withdrawLzTokenFee(address _lzToken, address _to, uint256 _amount) external;\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary AddressCast {\n    error AddressCast_InvalidSizeForAddress();\n    error AddressCast_InvalidAddress();\n\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\n        result = bytes32(_addressBytes);\n        unchecked {\n            uint256 offset = 32 - _addressBytes.length;\n            result = result >> (offset * 8);\n        }\n    }\n\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\n        result = bytes32(uint256(uint160(_address)));\n    }\n\n    function toBytes(bytes32 _addressBytes32, uint256 _size) internal pure returns (bytes memory result) {\n        if (_size == 0 || _size > 32) revert AddressCast_InvalidSizeForAddress();\n        result = new bytes(_size);\n        unchecked {\n            uint256 offset = 256 - _size * 8;\n            assembly {\n                mstore(add(result, 32), shl(offset, _addressBytes32))\n            }\n        }\n    }\n\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\n        result = address(uint160(uint256(_addressBytes32)));\n    }\n\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\n        result = address(bytes20(_addressBytes));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary CalldataBytesLib {\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\n        return uint8(_bytes[_start]);\n    }\n\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\n        unchecked {\n            uint256 end = _start + 2;\n            return uint16(bytes2(_bytes[_start:end]));\n        }\n    }\n\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\n        unchecked {\n            uint256 end = _start + 4;\n            return uint32(bytes4(_bytes[_start:end]));\n        }\n    }\n\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\n        unchecked {\n            uint256 end = _start + 8;\n            return uint64(bytes8(_bytes[_start:end]));\n        }\n    }\n\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\n        unchecked {\n            uint256 end = _start + 16;\n            return uint128(bytes16(_bytes[_start:end]));\n        }\n    }\n\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\n        unchecked {\n            uint256 end = _start + 32;\n            return uint256(bytes32(_bytes[_start:end]));\n        }\n    }\n\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\n        unchecked {\n            uint256 end = _start + 20;\n            return address(bytes20(_bytes[_start:end]));\n        }\n    }\n\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\n        unchecked {\n            uint256 end = _start + 32;\n            return bytes32(_bytes[_start:end]);\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nlibrary Errors {\n    error LZ_LzTokenUnavailable();\n    error LZ_InvalidReceiveLibrary();\n    error LZ_InvalidNonce(uint64 nonce);\n    error LZ_InvalidArgument();\n    error LZ_InvalidExpiry();\n    error LZ_InvalidAmount(uint256 required, uint256 supplied);\n    error LZ_OnlyRegisteredOrDefaultLib();\n    error LZ_OnlyRegisteredLib();\n    error LZ_OnlyNonDefaultLib();\n    error LZ_Unauthorized();\n    error LZ_DefaultSendLibUnavailable();\n    error LZ_DefaultReceiveLibUnavailable();\n    error LZ_PathNotInitializable();\n    error LZ_PathNotVerifiable();\n    error LZ_OnlySendLib();\n    error LZ_OnlyReceiveLib();\n    error LZ_UnsupportedEid();\n    error LZ_UnsupportedInterface();\n    error LZ_AlreadyRegistered();\n    error LZ_SameValue();\n    error LZ_InvalidPayloadHash();\n    error LZ_PayloadHashNotFound(bytes32 expected, bytes32 actual);\n    error LZ_ComposeNotFound(bytes32 expected, bytes32 actual);\n    error LZ_ComposeExists();\n    error LZ_SendReentrancy();\n    error LZ_NotImplemented();\n    error LZ_InsufficientFee(\n        uint256 requiredNative,\n        uint256 suppliedNative,\n        uint256 requiredLzToken,\n        uint256 suppliedLzToken\n    );\n    error LZ_ZeroLzTokenFee();\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/GUID.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { AddressCast } from \"./AddressCast.sol\";\n\nlibrary GUID {\n    using AddressCast for address;\n\n    function generate(\n        uint64 _nonce,\n        uint32 _srcEid,\n        address _sender,\n        uint32 _dstEid,\n        bytes32 _receiver\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_nonce, _srcEid, _sender.toBytes32(), _dstEid, _receiver));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Transfer.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary Transfer {\n    using SafeERC20 for IERC20;\n\n    address internal constant ADDRESS_ZERO = address(0);\n\n    error Transfer_NativeFailed(address _to, uint256 _value);\n    error Transfer_ToAddressIsZero();\n\n    function native(address _to, uint256 _value) internal {\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\n        (bool success, ) = _to.call{ value: _value }(\"\");\n        if (!success) revert Transfer_NativeFailed(_to, _value);\n    }\n\n    function token(address _token, address _to, uint256 _value) internal {\n        if (_to == ADDRESS_ZERO) revert Transfer_ToAddressIsZero();\n        IERC20(_token).safeTransfer(_to, _value);\n    }\n\n    function nativeOrToken(address _token, address _to, uint256 _value) internal {\n        if (_token == ADDRESS_ZERO) {\n            native(_to, _value);\n        } else {\n            token(_token, _to, _value);\n        }\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\npragma solidity ^0.8.20;\n\ntype BitMap256 is uint256;\n\nusing BitMaps for BitMap256 global;\n\nlibrary BitMaps {\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\n        uint256 mask = 1 << index;\n        return BitMap256.unwrap(bitmap) & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\n        uint256 mask = 1 << index;\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { CalldataBytesLib } from \"../../libs/CalldataBytesLib.sol\";\n\nlibrary ExecutorOptions {\n    using CalldataBytesLib for bytes;\n\n    uint8 internal constant WORKER_ID = 1;\n\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\n\n    error Executor_InvalidLzReceiveOption();\n    error Executor_InvalidNativeDropOption();\n    error Executor_InvalidLzComposeOption();\n\n    /// @dev decode the next executor option from the options starting from the specified cursor\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\n    ///        executor_option = [option_size][option_type][option]\n    ///        option_size = len(option_type) + len(option)\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\n    /// @param _cursor the cursor to start decoding from\n    /// @return optionType the type of the option\n    /// @return option the option of the executor\n    /// @return cursor the cursor to start decoding the next executor option\n    function nextExecutorOption(\n        bytes calldata _options,\n        uint256 _cursor\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\n        unchecked {\n            // skip worker id\n            cursor = _cursor + 1;\n\n            // read option size\n            uint16 size = _options.toU16(cursor);\n            cursor += 2;\n\n            // read option type\n            optionType = _options.toU8(cursor);\n\n            // startCursor and endCursor are used to slice the option from _options\n            uint256 startCursor = cursor + 1; // skip option type\n            uint256 endCursor = cursor + size;\n            option = _options[startCursor:endCursor];\n            cursor += size;\n        }\n    }\n\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\n        gas = _option.toU128(0);\n        value = _option.length == 32 ? _option.toU128(16) : 0;\n    }\n\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\n        amount = _option.toU128(0);\n        receiver = _option.toB32(16);\n    }\n\n    function decodeLzComposeOption(\n        bytes calldata _option\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\n        index = _option.toU16(0);\n        gas = _option.toU128(2);\n        value = _option.length == 34 ? _option.toU128(18) : 0;\n    }\n\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\n    }\n\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\n        return abi.encodePacked(_amount, _receiver);\n    }\n\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { Packet } from \"../../interfaces/ISendLib.sol\";\nimport { AddressCast } from \"../../libs/AddressCast.sol\";\n\nlibrary PacketV1Codec {\n    using AddressCast for address;\n    using AddressCast for bytes32;\n\n    uint8 internal constant PACKET_VERSION = 1;\n\n    // header (version + nonce + path)\n    // version\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\n    //    nonce\n    uint256 private constant NONCE_OFFSET = 1;\n    //    path\n    uint256 private constant SRC_EID_OFFSET = 9;\n    uint256 private constant SENDER_OFFSET = 13;\n    uint256 private constant DST_EID_OFFSET = 45;\n    uint256 private constant RECEIVER_OFFSET = 49;\n    // payload (guid + message)\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\n    uint256 private constant MESSAGE_OFFSET = 113;\n\n    function encode(Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\n        encodedPacket = abi.encodePacked(\n            PACKET_VERSION,\n            _packet.nonce,\n            _packet.srcEid,\n            _packet.sender.toBytes32(),\n            _packet.dstEid,\n            _packet.receiver,\n            _packet.guid,\n            _packet.message\n        );\n    }\n\n    function encodePacketHeader(Packet memory _packet) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                PACKET_VERSION,\n                _packet.nonce,\n                _packet.srcEid,\n                _packet.sender.toBytes32(),\n                _packet.dstEid,\n                _packet.receiver\n            );\n    }\n\n    function encodePayload(Packet memory _packet) internal pure returns (bytes memory) {\n        return abi.encodePacked(_packet.guid, _packet.message);\n    }\n\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return _packet[0:GUID_OFFSET];\n    }\n\n    function version(bytes calldata _packet) internal pure returns (uint8) {\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\n    }\n\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\n    }\n\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\n    }\n\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\n    }\n\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\n        return sender(_packet).toAddress();\n    }\n\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\n    }\n\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\n    }\n\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\n        return receiver(_packet).toAddress();\n    }\n\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\n    }\n\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return bytes(_packet[MESSAGE_OFFSET:]);\n    }\n\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\n        return bytes(_packet[GUID_OFFSET:]);\n    }\n\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\n        return keccak256(payload(_packet));\n    }\n}\n"
    },
    "@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingContext.sol": {
      "content": "// SPDX-License-Identifier: LZBL-1.2\n\npragma solidity ^0.8.20;\n\nimport { IMessagingContext } from \"./interfaces/IMessagingContext.sol\";\nimport { Errors } from \"./libs/Errors.sol\";\n\n/// this contract acts as a non-reentrancy guard and a source of messaging context\n/// the context includes the remote eid and the sender address\n/// it separates the send and receive context to allow messaging receipts (send back on receive())\nabstract contract MessagingContext is IMessagingContext {\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private _sendContext = NOT_ENTERED;\n\n    /// @dev the sendContext is set to 8 bytes 0s + 4 bytes eid + 20 bytes sender\n    modifier sendContext(uint32 _dstEid, address _sender) {\n        if (_sendContext != NOT_ENTERED) revert Errors.LZ_SendReentrancy();\n        _sendContext = (uint256(_dstEid) << 160) | uint160(_sender);\n        _;\n        _sendContext = NOT_ENTERED;\n    }\n\n    /// @dev returns true if sending message\n    function isSendingMessage() public view returns (bool) {\n        return _sendContext != NOT_ENTERED;\n    }\n\n    /// @dev returns (eid, sender) if sending message, (0, 0) otherwise\n    function getSendContext() external view returns (uint32, address) {\n        return isSendingMessage() ? _getSendContext(_sendContext) : (0, address(0));\n    }\n\n    function _getSendContext(uint256 _context) internal pure returns (uint32, address) {\n        return (uint32(_context >> 160), address(uint160(_context)));\n    }\n}\n"
    },
    "@layerzerolabs/test-devtools-evm-hardhat/contracts/mocks/EndpointV2Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.22;\n\nimport { SafeCast } from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport { ILayerZeroEndpointV2, MessagingParams, MessagingReceipt, MessagingFee, Origin } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\";\nimport { ExecutionState } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/EndpointV2ViewUpgradeable.sol\";\nimport { ILayerZeroReceiver } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\";\nimport { SetConfigParam } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\";\nimport { MessagingContext } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingContext.sol\";\nimport { Packet } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ISendLib.sol\";\nimport { OFTMsgCodec } from \"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/libs/OFTMsgCodec.sol\";\nimport { Origin } from \"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppReceiver.sol\";\nimport { Errors } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\";\nimport { GUID } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/GUID.sol\";\nimport { ExecutorOptions } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\";\nimport { PacketV1Codec } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\";\nimport { WorkerOptions } from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/SendLibBase.sol\";\nimport { IExecutorFeeLib } from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/IExecutorFeeLib.sol\";\nimport { DVNOptions } from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\";\nimport { UlnOptions } from \"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/UlnOptions.sol\";\nimport { CalldataBytesLib } from \"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\";\n\ncontract EndpointV2Mock is ILayerZeroEndpointV2, MessagingContext {\n    using ExecutorOptions for bytes;\n    using OFTMsgCodec for bytes;\n    using OFTMsgCodec for bytes32;\n    using OFTMsgCodec for address;\n    using SafeCast for uint256;\n    using CalldataBytesLib for bytes;\n\n    bytes32 public constant EMPTY_PAYLOAD_HASH = bytes32(0);\n\n    uint32 public immutable eid;\n    mapping(address => address) public lzEndpointLookup;\n\n    mapping(address receiver => mapping(uint32 srcEid => mapping(bytes32 sender => uint64 nonce)))\n        public lazyInboundNonce;\n    mapping(address receiver => mapping(uint32 srcEid => mapping(bytes32 sender => mapping(uint64 inboundNonce => bytes32 payloadHash))))\n        public inboundPayloadHash;\n    mapping(address sender => mapping(uint32 dstEid => mapping(bytes32 receiver => uint64 nonce))) public outboundNonce;\n\n    RelayerFeeConfig public relayerFeeConfig;\n    ProtocolFeeConfig protocolFeeConfig;\n    uint256 public verifierFee;\n\n    struct ProtocolFeeConfig {\n        uint256 zroFee;\n        uint256 nativeBP;\n    }\n\n    struct RelayerFeeConfig {\n        uint128 dstPriceRatio; // 10^10\n        uint128 dstGasPriceInWei;\n        uint128 dstNativeAmtCap;\n        uint64 baseGas;\n        uint64 gasPerByte;\n    }\n\n    uint8 internal constant _NOT_ENTERED = 1;\n    uint8 internal constant _ENTERED = 2;\n    uint8 internal _receive_entered_state = 1;\n    modifier receiveNonReentrant() {\n        require(_receive_entered_state == _NOT_ENTERED, \"LayerZeroMock: no receive reentrancy\");\n        _receive_entered_state = _ENTERED;\n        _;\n        _receive_entered_state = _NOT_ENTERED;\n    }\n\n    event ValueTransferFailed(address indexed to, uint256 indexed quantity);\n\n    constructor(uint32 _eid) {\n        eid = _eid;\n        // init config\n        relayerFeeConfig = RelayerFeeConfig({\n            dstPriceRatio: 1e10, // 1:1, same chain, same native coin\n            dstGasPriceInWei: 1e10,\n            dstNativeAmtCap: 1e19,\n            baseGas: 100,\n            gasPerByte: 1\n        });\n        protocolFeeConfig = ProtocolFeeConfig({ zroFee: 1e18, nativeBP: 1000 }); // BP 0.1\n        verifierFee = 1e16;\n    }\n\n    function send(\n        MessagingParams calldata _params,\n        address _refundAddress\n    ) public payable sendContext(_params.dstEid, msg.sender) returns (MessagingReceipt memory receipt) {\n        if (_params.payInLzToken) revert Errors.LZ_LzTokenUnavailable();\n\n        address lzEndpoint = lzEndpointLookup[_params.receiver.bytes32ToAddress()];\n        require(lzEndpoint != address(0), \"LayerZeroMock: destination LayerZero Endpoint not found\");\n\n        // get the correct outbound nonce\n        uint64 latestNonce = _outbound(msg.sender, _params.dstEid, _params.receiver);\n\n        Packet memory packet = Packet({\n            nonce: latestNonce,\n            srcEid: eid,\n            sender: msg.sender,\n            dstEid: _params.dstEid,\n            receiver: _params.receiver,\n            guid: GUID.generate(latestNonce, eid, msg.sender, _params.dstEid, _params.receiver),\n            message: _params.message\n        });\n        receipt.guid = packet.guid;\n        receipt.nonce = packet.nonce;\n        receipt.fee = _quote(_params, msg.sender);\n        require(msg.value >= receipt.fee.nativeFee, \"LayerZeroMock: not enough native for fees\");\n\n        // refund if they send too much\n        uint256 amount = msg.value - receipt.fee.nativeFee;\n        if (amount > 0) {\n            (bool success, ) = _refundAddress.call{ value: amount }(\"\");\n            require(success, \"LayerZeroMock: failed to refund\");\n        }\n\n        uint256 totalGas;\n        uint256 dstAmount;\n        (totalGas, dstAmount) = executeNativeAirDropAndReturnLzGas(_params.options);\n\n        // TODO fix\n        // composed calls with correct gas\n\n        Origin memory origin = Origin({\n            srcEid: packet.srcEid,\n            sender: packet.sender.addressToBytes32(),\n            nonce: packet.nonce\n        });\n\n        bytes memory payload = PacketV1Codec.encodePayload(packet);\n        bytes32 payloadHash = keccak256(payload);\n\n        EndpointV2Mock(lzEndpoint).receivePayload{ value: dstAmount }(\n            origin,\n            packet.receiver.bytes32ToAddress(),\n            payloadHash,\n            packet.message,\n            totalGas,\n            dstAmount,\n            packet.guid\n        );\n    }\n\n    function receivePayload(\n        Origin calldata _origin,\n        address _receiver,\n        bytes32 _payloadHash,\n        bytes calldata _message,\n        uint256 _gas,\n        uint256 _msgValue,\n        bytes32 _guid\n    ) external payable receiveNonReentrant {\n        inboundPayloadHash[_receiver][_origin.srcEid][_origin.sender][_origin.nonce] = _payloadHash;\n        if (_msgValue > 0) {\n            try\n                ILayerZeroReceiver(_receiver).lzReceive{ value: _msgValue, gas: _gas }(\n                    _origin,\n                    _guid,\n                    _message,\n                    address(0),\n                    \"\"\n                )\n            {} catch (bytes memory /*reason*/) {}\n        } else {\n            try\n                ILayerZeroReceiver(_receiver).lzReceive{ gas: _gas }(_origin, _guid, _message, address(0), \"\")\n            {} catch (bytes memory /*reason*/) {}\n        }\n    }\n\n    function getExecutorFee(uint256 _payloadSize, bytes calldata _options) public view returns (uint256) {\n        uint256 nativeFee;\n        // 2) get Executor fee\n        //  a) decodeLzReceiveOption\n        //  b) decodeNativeDropOption\n        //  c) decodeLzComposeOption\n        (uint256 totalDstAmount, uint256 totalGas) = _decodeExecutorOptions(_options);\n        uint256 remoteGasTotal = relayerFeeConfig.dstGasPriceInWei * (relayerFeeConfig.baseGas + totalGas);\n        nativeFee += totalDstAmount + remoteGasTotal;\n\n        // tokenConversionRate = dstPrice / localPrice\n        // basePrice = totalRemoteToken * tokenConversionRate\n        uint256 basePrice = (nativeFee * relayerFeeConfig.dstPriceRatio) / 10 ** 10;\n\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\n        uint256 pricePerByte = ((relayerFeeConfig.dstGasPriceInWei *\n            relayerFeeConfig.gasPerByte *\n            relayerFeeConfig.dstPriceRatio) / 10 ** 10) * _payloadSize;\n\n        return basePrice + pricePerByte;\n    }\n\n    function _quote(\n        MessagingParams calldata _params,\n        address /*_sender*/\n    ) internal view returns (MessagingFee memory messagingFee) {\n        (bytes memory executorOptions, ) = splitOptions(_params.options);\n\n        // 2) get Executor fee\n        uint256 executorFee = this.getExecutorFee(_params.message.length, executorOptions);\n\n        // 1) get Verifier fee\n        // 3) get Treasury fee\n        uint256 treasuryAndVerifierFee = _getTreasuryAndVerifierFees(executorFee, verifierFee);\n\n        messagingFee.lzTokenFee = 0;\n        messagingFee.nativeFee = executorFee + treasuryAndVerifierFee;\n    }\n\n    function _getTreasuryAndVerifierFees(uint256 _executorFee, uint256 _verifierFee) internal view returns (uint256) {\n        return ((_executorFee + _verifierFee) * protocolFeeConfig.nativeBP) / 10000;\n    }\n\n    function _outbound(address _sender, uint32 _dstEid, bytes32 _receiver) internal returns (uint64 nonce) {\n        unchecked {\n            nonce = ++outboundNonce[_sender][_dstEid][_receiver];\n        }\n    }\n\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\n    }\n\n    function _decodeExecutorOptions(\n        bytes calldata _options\n    ) internal view returns (uint256 dstAmount, uint256 totalGas) {\n        if (_options.length == 0) {\n            revert IExecutorFeeLib.Executor_NoOptions();\n        }\n\n        uint256 cursor = 0;\n        totalGas = relayerFeeConfig.baseGas;\n\n        while (cursor < _options.length) {\n            (uint8 optionType, bytes calldata option, uint256 newCursor) = _options.nextExecutorOption(cursor);\n            cursor = newCursor;\n\n            if (optionType == ExecutorOptions.OPTION_TYPE_LZRECEIVE) {\n                (uint128 gas, uint128 value) = ExecutorOptions.decodeLzReceiveOption(option);\n                dstAmount += value;\n                totalGas += gas;\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_NATIVE_DROP) {\n                (uint128 nativeDropAmount, ) = ExecutorOptions.decodeNativeDropOption(option);\n                dstAmount += nativeDropAmount;\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_LZCOMPOSE) {\n                (, uint128 gas, uint128 value) = ExecutorOptions.decodeLzComposeOption(option);\n                dstAmount += value;\n                totalGas += gas;\n            } else {\n                revert IExecutorFeeLib.Executor_UnsupportedOptionType(optionType);\n            }\n        }\n\n        if (cursor != _options.length) revert IExecutorFeeLib.Executor_InvalidExecutorOptions(cursor);\n        if (dstAmount > relayerFeeConfig.dstNativeAmtCap)\n            revert IExecutorFeeLib.Executor_NativeAmountExceedsCap(dstAmount, relayerFeeConfig.dstNativeAmtCap);\n    }\n\n    function splitOptions(bytes calldata _options) internal pure returns (bytes memory, WorkerOptions[] memory) {\n        (bytes memory executorOpts, bytes memory dvnOpts) = decode(_options);\n\n        if (dvnOpts.length == 0) {\n            return (executorOpts, new WorkerOptions[](0));\n        }\n\n        WorkerOptions[] memory workerOpts = new WorkerOptions[](1);\n        workerOpts[0] = WorkerOptions(DVNOptions.WORKER_ID, dvnOpts);\n        return (executorOpts, workerOpts);\n    }\n\n    function decode(\n        bytes calldata _options\n    ) internal pure returns (bytes memory executorOptions, bytes memory dvnOptions) {\n        // at least 2 bytes for the option type, but can have no options\n        if (_options.length < 2) revert UlnOptions.LZ_ULN_InvalidWorkerOptions(0);\n\n        uint16 optionsType = uint16(bytes2(_options[0:2]));\n        uint256 cursor = 2;\n\n        // type3 options: [worker_option][worker_option]...\n        // worker_option: [worker_id][option_size][option]\n        // worker_id: uint8, option_size: uint16, option: bytes\n        if (optionsType == UlnOptions.TYPE_3) {\n            unchecked {\n                uint256 start = cursor;\n                uint8 lastWorkerId; // worker_id starts from 1, so 0 is an invalid worker_id\n\n                // heuristic: we assume that the options are mostly EXECUTOR options only\n                // checking the workerID can reduce gas usage for most cases\n                while (cursor < _options.length) {\n                    uint8 workerId = uint8(bytes1(_options[cursor:cursor + 1]));\n                    if (workerId == 0) revert UlnOptions.LZ_ULN_InvalidWorkerId(0);\n\n                    // workerId must equal to the lastWorkerId for the first option\n                    // so it is always skipped in the first option\n                    // this operation slices out options whenever the the scan finds a different workerId\n                    if (lastWorkerId == 0) {\n                        lastWorkerId = workerId;\n                    } else if (workerId != lastWorkerId) {\n                        bytes calldata op = _options[start:cursor]; // slice out the last worker's options\n                        (executorOptions, dvnOptions) = _insertWorkerOptions(\n                            executorOptions,\n                            dvnOptions,\n                            lastWorkerId,\n                            op\n                        );\n\n                        // reset the start cursor and lastWorkerId\n                        start = cursor;\n                        lastWorkerId = workerId;\n                    }\n\n                    ++cursor; // for workerId\n\n                    uint16 size = uint16(bytes2(_options[cursor:cursor + 2]));\n                    if (size == 0) revert UlnOptions.LZ_ULN_InvalidWorkerOptions(cursor);\n                    cursor += size + 2;\n                }\n\n                // the options length must be the same as the cursor at the end\n                if (cursor != _options.length) revert UlnOptions.LZ_ULN_InvalidWorkerOptions(cursor);\n\n                // if we have reached the end of the options and the options are not empty\n                // we need to process the last worker's options\n                if (_options.length > 2) {\n                    bytes calldata op = _options[start:cursor];\n                    (executorOptions, dvnOptions) = _insertWorkerOptions(executorOptions, dvnOptions, lastWorkerId, op);\n                }\n            }\n        } else {\n            executorOptions = decodeLegacyOptions(optionsType, _options);\n        }\n    }\n\n    function _insertWorkerOptions(\n        bytes memory _executorOptions,\n        bytes memory _dvnOptions,\n        uint8 _workerId,\n        bytes calldata _newOptions\n    ) private pure returns (bytes memory, bytes memory) {\n        if (_workerId == ExecutorOptions.WORKER_ID) {\n            _executorOptions = _executorOptions.length == 0\n                ? _newOptions\n                : abi.encodePacked(_executorOptions, _newOptions);\n        } else if (_workerId == DVNOptions.WORKER_ID) {\n            _dvnOptions = _dvnOptions.length == 0 ? _newOptions : abi.encodePacked(_dvnOptions, _newOptions);\n        } else {\n            revert UlnOptions.LZ_ULN_InvalidWorkerId(_workerId);\n        }\n        return (_executorOptions, _dvnOptions);\n    }\n\n    function decodeLegacyOptions(\n        uint16 _optionType,\n        bytes calldata _options\n    ) internal pure returns (bytes memory executorOptions) {\n        if (_optionType == UlnOptions.TYPE_1) {\n            if (_options.length != 34) revert UlnOptions.LZ_ULN_InvalidLegacyType1Option();\n\n            // execution gas\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\n\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\n            // the result is a lzReceive option: [executor_id][option_size][option_type][execution_gas]\n            // option_type: uint8, execution_gas: uint128\n            // option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\n            executorOptions = abi.encodePacked(\n                ExecutorOptions.WORKER_ID,\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                executionGas\n            );\n        } else if (_optionType == UlnOptions.TYPE_2) {\n            // receiver size <= 32\n            if (_options.length <= 66 || _options.length > 98) revert UlnOptions.LZ_ULN_InvalidLegacyType2Option();\n\n            // execution gas\n            uint128 executionGas = uint256(bytes32(_options[2:2 + 32])).toUint128();\n\n            // nativeDrop (amount + receiver)\n            uint128 amount = uint256(bytes32(_options[34:34 + 32])).toUint128(); // offset 2 + 32\n            bytes32 receiver;\n            unchecked {\n                uint256 receiverLen = _options.length - 66; // offset 2 + 32 + 32\n                receiver = bytes32(_options[66:]);\n                receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\n            }\n\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\n            // the result has one lzReceive option and one nativeDrop option:\n            //      [executor_id][lzReceive_option_size][option_type][execution_gas] +\n            //      [executor_id][nativeDrop_option_size][option_type][nativeDrop_amount][receiver]\n            // option_type: uint8, execution_gas: uint128, nativeDrop_amount: uint128, receiver: bytes32\n            // lzReceive_option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\n            // nativeDrop_option_size = len(option_type) + len(nativeDrop_amount) + len(receiver) = 1 + 16 + 32 = 49\n            executorOptions = abi.encodePacked(\n                ExecutorOptions.WORKER_ID,\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\n                executionGas,\n                ExecutorOptions.WORKER_ID,\n                uint16(49), // 48 + 1, 32 + 16 for option_length, + 1 for option_type\n                ExecutorOptions.OPTION_TYPE_NATIVE_DROP,\n                amount,\n                receiver\n            );\n        } else {\n            revert UlnOptions.LZ_ULN_UnsupportedOptionType(_optionType);\n        }\n    }\n\n    // NOT IMPLEMENTING\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external {}\n\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external {}\n\n    mapping(address from => mapping(address to => mapping(bytes32 guid => mapping(uint16 index => bytes32 messageHash))))\n        public composeQueue;\n\n    function defaultReceiveLibrary(uint32 /*_eid*/) external pure returns (address) {\n        return address(0);\n    }\n\n    function defaultReceiveLibraryTimeout(uint32 /*_eid*/) external pure returns (address lib, uint256 expiry) {\n        return (address(0), 0);\n    }\n\n    function defaultSendLibrary(uint32 /*_eid*/) external pure returns (address) {\n        return address(0);\n    }\n\n    function executable(Origin calldata /*_origin*/, address /*receiver*/) external pure returns (ExecutionState) {\n        return ExecutionState.NotExecutable;\n    }\n\n    function getConfig(\n        address /*_oapp*/,\n        address /*_lib*/,\n        uint32 /*_eid*/,\n        uint32 /*_configType*/\n    ) external pure returns (bytes memory config) {\n        return bytes(\"0x\");\n    }\n\n    function getReceiveLibrary(\n        address /*receiver*/,\n        uint32 /*_eid*/\n    ) external pure returns (address lib, bool isDefault) {\n        return (address(0), false);\n    }\n\n    function getRegisteredLibraries() external pure returns (address[] memory) {\n        address[] memory addresses = new address[](1);\n        addresses[0] = address(0);\n        return addresses;\n    }\n\n    function getSendLibrary(address /*_sender*/, uint32 /*_eid*/) external pure returns (address lib) {\n        return address(0);\n    }\n\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64) {\n        return lazyInboundNonce[_receiver][_srcEid][_sender];\n    }\n\n    function isDefaultSendLibrary(address /*_sender*/, uint32 /*_eid*/) external pure returns (bool) {\n        return false;\n    }\n\n    function isRegisteredLibrary(address /*_lib*/) external pure returns (bool) {\n        return false;\n    }\n\n    function isSupportedEid(uint32 /*_eid*/) external pure returns (bool) {\n        return false;\n    }\n\n    function lzCompose(\n        address /*_from,*/,\n        address /*_to,*/,\n        bytes32 /*_guid,*/,\n        uint16 /*_index,*/,\n        bytes calldata /*_message,*/,\n        bytes calldata /*_extraData*/\n    ) external payable {}\n\n    function lzReceive(\n        Origin calldata /*_origin,*/,\n        address /*_receiver,*/,\n        bytes32 /*_guid,*/,\n        bytes calldata /*_message,*/,\n        bytes calldata /*_extraData*/\n    ) external payable {}\n\n    function lzToken() external pure returns (address) {\n        return address(0);\n    }\n\n    function nativeToken() external pure returns (address) {\n        return address(0);\n    }\n\n    function nextGuid(\n        address /*_sender,*/,\n        uint32 /*_dstEid,*/,\n        bytes32 /*_receiver*/\n    ) external pure returns (bytes32) {\n        return 0;\n    }\n\n    function nilify(\n        address /*_oapp,*/,\n        uint32 /*_srcEid,*/,\n        bytes32 /*_sender,*/,\n        uint64 /*_nonce,*/,\n        bytes32 /*_payloadHash*/\n    ) external {}\n\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory) {\n        return _quote(_params, _sender);\n    }\n\n    mapping(address receiver => mapping(uint32 srcEid => Timeout)) public receiveLibraryTimeout;\n\n    function registerLibrary(address /*_lib*/) public {}\n\n    function sendCompose(address, /*_to*/ bytes32, /*_guid*/ uint16, /*_index*/ bytes calldata /*_message*/) external {}\n\n    function setConfig(address, /*_oapp*/ address, /*_lib*/ SetConfigParam[] calldata /*_params*/) external {}\n\n    function setDefaultReceiveLibrary(uint32 /*_eid*/, address /*_newLib*/, uint256 /*_gracePeriod*/) external {}\n\n    function setDefaultReceiveLibraryTimeout(uint32 /*_eid*/, address /*_lib*/, uint256 /*_expiry*/) external {}\n\n    function setDefaultSendLibrary(uint32 /*_eid*/, address /*_newLib*/) external {}\n\n    function setDelegate(address /*_delegate*/) external {}\n\n    function setLzToken(address /*_lzToken*/) external {}\n\n    function setReceiveLibrary(\n        address,\n        /*_oapp*/ uint32,\n        /*_eid*/ address,\n        /*_newLib*/ uint256 /*_gracePeriod*/\n    ) external {}\n\n    function setReceiveLibraryTimeout(\n        address,\n        /*_oapp*/ uint32,\n        /*_eid*/ address,\n        /*_lib*/ uint256 /*_gracePeriod*/\n    ) external {}\n\n    function setSendLibrary(address, /*_oapp*/ uint32, /*_eid*/ address /*_newLib*/) external {}\n\n    function skip(address, /*_oapp*/ uint32, /*_srcEid*/ bytes32, /*_sender*/ uint64 /*_nonce*/) external {}\n\n    function verifiable(\n        Origin calldata /*_origin*/,\n        address /*_receiver*/,\n        address /*_receiveLib*/,\n        bytes32 /*_payloadHash*/\n    ) external pure returns (bool) {\n        return false;\n    }\n\n    function verify(Origin calldata /*origin*/, address /*_receiver*/, bytes32 /*_payloadHash*/) external {}\n\n    // Helper Functions\n    function executeNativeAirDropAndReturnLzGas(\n        bytes calldata _options\n    ) public returns (uint256 totalGas, uint256 dstAmount) {\n        (bytes memory executorOpts, ) = decode(_options);\n        return this._executeNativeAirDropAndReturnLzGas(executorOpts);\n    }\n\n    function _executeNativeAirDropAndReturnLzGas(\n        bytes calldata _options\n    ) public returns (uint256 totalGas, uint256 dstAmount) {\n        if (_options.length == 0) {\n            revert IExecutorFeeLib.Executor_NoOptions();\n        }\n\n        uint256 cursor = 0;\n        while (cursor < _options.length) {\n            (uint8 optionType, bytes calldata option, uint256 newCursor) = _options.nextExecutorOption(cursor);\n            cursor = newCursor;\n\n            if (optionType == ExecutorOptions.OPTION_TYPE_LZRECEIVE) {\n                (uint128 gas, uint128 value) = ExecutorOptions.decodeLzReceiveOption(option);\n                totalGas += gas;\n                dstAmount += value;\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_NATIVE_DROP) {\n                (uint128 nativeDropAmount, bytes32 receiver) = ExecutorOptions.decodeNativeDropOption(option);\n                (bool success, ) = receiver.bytes32ToAddress().call{ value: nativeDropAmount }(\"\");\n                if (!success) {\n                    emit ValueTransferFailed(receiver.bytes32ToAddress(), nativeDropAmount);\n                }\n            } else {\n                revert IExecutorFeeLib.Executor_UnsupportedOptionType(optionType);\n            }\n        }\n\n        if (cursor != _options.length) revert IExecutorFeeLib.Executor_InvalidExecutorOptions(cursor);\n    }\n\n    function _initializable(\n        Origin calldata _origin,\n        address _receiver,\n        uint64 _lazyInboundNonce\n    ) internal view returns (bool) {\n        return\n            _lazyInboundNonce > 0 || // allowInitializePath already checked\n            ILayerZeroReceiver(_receiver).allowInitializePath(_origin);\n    }\n\n    /// @dev bytes(0) payloadHash can never be submitted\n    function _verifiable(\n        Origin calldata _origin,\n        address _receiver,\n        uint64 _lazyInboundNonce\n    ) internal view returns (bool) {\n        return\n            _origin.nonce > _lazyInboundNonce || // either initializing an empty slot or reverifying\n            inboundPayloadHash[_receiver][_origin.srcEid][_origin.sender][_origin.nonce] != EMPTY_PAYLOAD_HASH; // only allow reverifying if it hasn't been executed\n    }\n\n    // ========================= VIEW FUNCTIONS FOR OFFCHAIN ONLY =========================\n    // Not involved in any state transition function.\n    // ====================================================================================\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool) {\n        return _initializable(_origin, _receiver, lazyInboundNonce[_receiver][_origin.srcEid][_origin.sender]);\n    }\n\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool) {\n        return _verifiable(_origin, _receiver, lazyInboundNonce[_receiver][_origin.srcEid][_origin.sender]);\n    }\n\n    /// @dev called when the endpoint checks if the msgLib attempting to verify the msg is the configured msgLib of the Oapp\n    /// @dev this check provides the ability for Oapp to lock in a trusted msgLib\n    /// @dev it will fist check if the msgLib is the currently configured one. then check if the msgLib is the one in grace period of msgLib versioning upgrade\n    function isValidReceiveLibrary(\n        address _receiver,\n        uint32 _srcEid,\n        address _actualReceiveLib\n    ) public view returns (bool) {\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/utils/IVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotes {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     */\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5805.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5805.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../governance/utils/IVotes.sol\";\nimport \"./IERC6372.sol\";\n\ninterface IERC5805 is IERC6372, IVotes {}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC6372.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC6372 {\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\n     */\n    function clock() external view returns (uint48);\n\n    /**\n     * @dev Description of the clock\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20Permit.sol\";\nimport \"../../../interfaces/IERC5805.sol\";\nimport \"../../../utils/math/Math.sol\";\nimport \"../../../utils/math/SafeCast.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Votes is ERC20Permit, IERC5805 {\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\n     */\n    function clock() public view virtual override returns (uint48) {\n        return SafeCast.toUint48(block.number);\n    }\n\n    /**\n     * @dev Description of the clock\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual override returns (string memory) {\n        // Check that the clock was not modified\n        require(clock() == block.number, \"ERC20Votes: broken clock mode\");\n        return \"mode=blocknumber&from=default\";\n    }\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual override returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view virtual override returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        unchecked {\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n        }\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `timepoint`.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past\n     */\n    function getPastVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\n        require(timepoint < clock(), \"ERC20Votes: future lookup\");\n        return _checkpointsLookup(_checkpoints[account], timepoint);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances.\n     * It is NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past\n     */\n    function getPastTotalSupply(uint256 timepoint) public view virtual override returns (uint256) {\n        require(timepoint < clock(), \"ERC20Votes: future lookup\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, timepoint);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 timepoint) private view returns (uint256) {\n        // We run a binary search to look for the last (most recent) checkpoint taken before (or at) `timepoint`.\n        //\n        // Initially we check if the block is recent to narrow the search range.\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `timepoint`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `timepoint`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `timepoint`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `timepoint`, but it works out\n        // the same.\n        uint256 length = ckpts.length;\n\n        uint256 low = 0;\n        uint256 high = length;\n\n        if (length > 5) {\n            uint256 mid = length - Math.sqrt(length);\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        unchecked {\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\n        }\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual override {\n        _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(address src, address dst, uint256 amount) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n\n        unchecked {\n            Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\n\n            oldWeight = oldCkpt.votes;\n            newWeight = op(oldWeight, delta);\n\n            if (pos > 0 && oldCkpt.fromBlock == clock()) {\n                _unsafeAccess(ckpts, pos - 1).votes = SafeCast.toUint224(newWeight);\n            } else {\n                ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(clock()), votes: SafeCast.toUint224(newWeight)}));\n            }\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\n        assembly {\n            mstore(0, ckpts.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/AdvisiorsVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AdvisiorsVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    struct VestingLookup {\n        address beneficiary;\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"Vesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the AdvisiorsVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount > 0) {\n                // When the beneficiary already has claimed tokens, the new amount should be set as already claimed amount\n                if (beneficiary.claimed > _amounts[i]) {\n                    beneficiary.amount = beneficiary.claimed;\n                } else {\n                    // Otherwise, set the new amount\n                    beneficiary.amount = _amounts[i];\n                }\n            } else {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingLookup[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingLookup[] memory beneficiaries = new VestingLookup[](length);\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            uint256 amount = vestingBeneficiaries[beneficiary].amount;\n            uint256 claimed = vestingBeneficiaries[beneficiary].claimed;\n            beneficiaries[i] = VestingLookup(beneficiary, amount, claimed);\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/FoundationVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FoundationVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    struct VestingLookup {\n        address beneficiary;\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"Vesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the FoundationVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount == 0) {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingLookup[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingLookup[] memory beneficiaries = new VestingLookup[](length);\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            uint256 amount = vestingBeneficiaries[beneficiary].amount;\n            uint256 claimed = vestingBeneficiaries[beneficiary].claimed;\n            beneficiaries[i] = VestingLookup(beneficiary, amount, claimed);\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/MarketingVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MarketingVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    struct VestingLookup {\n        address beneficiary;\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"MPROVesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the MPROVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount > 0) {\n                // When the beneficiary already has claimed tokens, the new amount should be set as already claimed amount\n                if (beneficiary.claimed > _amounts[i]) {\n                    beneficiary.amount = beneficiary.claimed;\n                } else {\n                    // Otherwise, set the new amount\n                    beneficiary.amount = _amounts[i];\n                }\n            } else {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingLookup[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingLookup[] memory beneficiaries = new VestingLookup[](length);\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            uint256 amount = vestingBeneficiaries[beneficiary].amount;\n            uint256 claimed = vestingBeneficiaries[beneficiary].claimed;\n            beneficiaries[i] = VestingLookup(beneficiary, amount, claimed);\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/mocks/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract WhoaToken is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _initialSupply,\n        address _receiver\n    ) ERC20(_name, _symbol) {\n        _mint(_receiver, _initialSupply);\n    }\n}\n"
    },
    "contracts/mocks/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"@layerzerolabs/test-devtools-evm-hardhat/contracts/mocks/EndpointV2Mock.sol\";\n\n/*\nlike a real LayerZero endpoint but can be mocked, which handle message transmission, verification, and receipt.\n- blocking: LayerZero provides ordered delivery of messages from a given sender to a destination chain.\n- non-reentrancy: endpoint has a non-reentrancy guard for both the send() and receive(), respectively.\n- adapter parameters: allows UAs to add arbitrary transaction params in the send() function, like airdrop on destination chain.\nunlike a real LayerZero endpoint, it is\n- no messaging library versioning\n- send() will short circuit to lzReceive()\n- no user application configuration\n*/\ncontract LZMock is EndpointV2Mock {\n    constructor(uint32 _eid) EndpointV2Mock(_eid) {}\n}\n"
    },
    "contracts/MPRO.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/OFT.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IMPROMasterDistributor {\n    function getBurnAmount(\n        address _from,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    function isDistributor(address account) external view returns (bool);\n\n    function mintAllowed(address minter) external view returns (bool);\n\n    function approveAllowed(address, address) external view returns (bool);\n\n    function transferAllowed(\n        address _from,\n        address _to,\n        address _msgSender\n    ) external view returns (bool);\n}\n\ncontract MPRO is OFT, ERC20Votes {\n    IMPROMasterDistributor private mproMasterDistributor;\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /**\n     * @dev Public constant representing the maximum cap on the token's total supply.\n     *\n     * This constant defines the maximum number of tokens that can ever be minted in the lifetime\n     * of the contract. The cap is set to 500 million tokens, considering the decimal factor of\n     * the token. Since Solidity does not support floating-point numbers, the token amounts are\n     * often expressed in the smallest units, similar to how cents are used for dollars in the\n     * traditional currency system. Here, `10 ** 18` represents 1 token in its smallest unit (like wei\n     * in Ethereum), making the cap effectively 500 million tokens.\n     *\n     * The purpose of setting a maximum cap is to provide assurances about the maximum supply of\n     * tokens that can exist, which is an important aspect of the token's economic and governance\n     * model. It ensures transparency and trust in the token's scarcity and value.\n     */\n\n    uint256 private constant _maxCap = 500_000_000 * 10 ** 18;\n\n    /**\n     * @dev Constructor to initialize the contract with specific parameters.\n     *\n     * This constructor initializes the contract with a name, symbol, and several key addresses\n     * relevant to its operation. It also handles the preminting of tokens to a list of addresses.\n     *\n     * The constructor performs the following operations:\n     * - Inherits from OFTV2 and ERC20Permit by passing `_name`, `_symbol`, and other parameters\n     *   to these base contracts.\n     * - Loops through the `premintAddresses` array, minting tokens in the amounts specified in\n     *   `premintValues` to each address. This is used to distribute an initial supply of tokens.\n     * - Sets the `mproRoleManager` by casting the `_mproRoleManager` address to the\n     *   IMPRORoleManager interface, which is expected to manage role-based access in the contract.\n     * - Sets the `mproMasterDistributor` by casting the `_mproMasterDistributor` address to the\n     *   IMPROMasterDistributor interface, which is expected to handle distribution-related logic.\n     *\n     * The `_lzEndpoint` parameter is specific to the OFTV2 initialization and is related to LayerZero\n     * endpoint configurations.\n     *\n     * This constructor is critical for setting up the initial state of the contract, including\n     * roles, token distribution, and other essential configurations.\n     *\n     * @param _name The name of the token.\n     * @param _symbol The symbol of the token.\n     * @param premintAddresses Array of addresses that will receive the preminted tokens.\n     * @param premintValues Array of token amounts corresponding to each premint address.\n     * @param _lzEndpoint Address for the LayerZero endpoint, used in OFTV2 initialization.\n     * @param _mproMasterDistributor Address of the contract managing token distributions.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address[] memory premintAddresses,\n        uint256[] memory premintValues,\n        address _lzEndpoint,\n        address _mproMasterDistributor,\n        address _owner\n    ) OFT(_name, _symbol, _lzEndpoint, _owner) ERC20Permit(_name) {\n        for (uint256 i = 0; i < premintAddresses.length; i++) {\n            _mint(premintAddresses[i], premintValues[i]);\n        }\n        mproMasterDistributor = IMPROMasterDistributor(_mproMasterDistributor);\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @dev Internal function to mint tokens.\n     *\n     * This function is an override of the `_mint` function in both ERC20 and ERC20Votes contracts.\n     * It is marked as `internal`, meaning it can only be called from within this contract or its\n     * derivatives. The `virtual` keyword indicates that this function can be overridden in derived\n     * contracts, providing flexibility in extending the token minting logic.\n     *\n     * The function calls `super._mint` to invoke the minting logic defined in the parent contracts\n     * (ERC20 and ERC20Votes). This ensures that the token minting process adheres to the standard\n     * ERC20 implementation, while also updating any additional state or logic defined in ERC20Votes,\n     * such as vote tracking.\n     *\n     * The overriding of this function may be used to introduce additional logic before or after the\n     * standard minting process, such as custom events, access controls, or other state updates\n     * specific to the derived contract's requirements.\n     *\n     * @param account The address that will receive the minted tokens.\n     * @param amount The amount of tokens to be minted.\n     */\n    function _mint(\n        address account,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Votes) {\n        super._mint(account, amount);\n    }\n\n    /**\n     * @dev External function to mint new tokens.\n     *\n     * This function allows for the external minting of tokens, but restricts access to only those\n     * accounts that have been granted distributor privileges by the mproRoleManager. The\n     * `isDistributor` function of the mproRoleManager is used to check if the caller (_msgSender())\n     * has the necessary role to perform the minting.\n     *\n     * The `virtual` keyword indicates that this function can be overridden in derived contracts,\n     * allowing for customization of the minting process or introduction of additional logic.\n     *\n     * If the caller is authorized as a distributor, the function proceeds to call the internal `_mint`\n     * function, which handles the actual creation and allocation of tokens to the specified account.\n     * This two-tier structure (external `mint` calling internal `_mint`) allows for separation of\n     * concerns, where access control is handled externally, while the token creation logic is\n     * encapsulated within the internal function.\n     *\n     * @param account The address to which the minted tokens will be allocated.\n     * @param amount The amount of tokens to be minted and allocated to the account.\n     */\n    function mint(address account, uint256 amount) external virtual {\n        mproMasterDistributor.mintAllowed(_msgSender());\n        _mint(account, amount);\n    }\n\n    /**\n     * @dev Internal function to burn tokens.\n     *\n     * This function is an override of the `_burn` function in both ERC20 and ERC20Votes contracts.\n     * It is marked as `internal`, meaning it can only be called from within this contract or its\n     * derivatives. The `virtual` keyword indicates that this function can be overridden in derived\n     * contracts, providing the flexibility to modify the token burning logic.\n     *\n     * The function delegates to `super._burn` to execute the burning logic defined in the parent\n     * contracts (ERC20 and ERC20Votes). This ensures that the token burning process complies with\n     * the ERC20 standard, while also accommodating any additional state or logic updates defined in\n     * ERC20Votes, such as vote tracking adjustments.\n     *\n     * Overriding this function allows the introduction of additional functionality specific to the\n     * contract's requirements, which could include custom events, access controls, or other state\n     * modifications that need to occur alongside the standard token burning process.\n     *\n     * @param account The address from which the tokens will be burned.\n     * @param amount The amount of tokens to be burned from the specified account.\n     */\n    function _burn(\n        address account,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Votes) {\n        super._burn(account, amount);\n    }\n\n    /**\n     * @dev External function to burn tokens.\n     *\n     * This function provides an external interface to burn tokens from a specified account. It is\n     * accessible externally and allows for tokens to be burned, reducing the total supply in\n     * circulation. The function does not include specific access control checks, meaning any external\n     * caller can potentially invoke it, subject to the contract's overall design and security model.\n     *\n     * The `virtual` keyword indicates that this function can be overridden in derived contracts,\n     * allowing for customization of the burning process or the introduction of additional logic, such\n     * as access control restrictions or pre-burn validations.\n     *\n     * The actual burning of tokens is delegated to the internal `_burn` function, which encapsulates\n     * the logic for removing tokens from an account's balance and updating the total supply. This\n     * separation of concerns allows the `_burn` function to handle the core logic, while the external\n     * `burn` function can be adapted or extended in derived contracts.\n     *\n     * @param amount The amount of tokens to be burned from the specified account.\n     */\n    function burn(uint256 amount) external virtual {\n        _burn(msg.sender, amount);\n    }\n\n    /**\n     * @dev Public function to approve another account to spend tokens on behalf of the message sender.\n     *\n     * This function overrides the standard `approve` function of the ERC20 token standard. It allows\n     * a token holder to grant permission to another account (referred to as the spender) to transfer\n     * up to a specified number of tokens on their behalf.\n     *\n     * The function includes an additional security feature using the `mproRoleManager` to check\n     * whether the approval is allowed. This could be based on additional business logic or\n     * restrictions defined in the role manager contract.\n     *\n     * After the custom check, the function calls the internal `_approve` function of the ERC20\n     * contract to handle the actual approval mechanism, updating the allowance set for the spender.\n     *\n     * @param _spender The address which is being granted permission to spend tokens on behalf of the\n     *                 message sender.\n     * @param _value The maximum number of tokens the spender is allowed to transfer.\n     * @return A boolean value indicating whether the operation was successful.\n     */\n    function approve(\n        address _spender,\n        uint256 _value\n    ) public override returns (bool) {\n        mproMasterDistributor.approveAllowed(_msgSender(), _spender);\n        super._approve(_msgSender(), _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Public function to transfer tokens from the message sender's account to another account.\n     *\n     * This function overrides the standard `transfer` function of the ERC20 token standard. It\n     * enables a token holder to transfer tokens to another address. In addition to the standard\n     * transfer functionality, this implementation includes custom logic for additional checks and\n     * burning tokens on transfer.\n     *\n     * The function performs the following operations:\n     * - Calls `mproRoleManager.transferAllowed` to perform custom checks based on the contract's\n     *   business logic. This might include restrictions on who can send or receive tokens or other\n     *   specific conditions.\n     * - Calls the internal `_burnOnTransfer` function to calculate the amount after applying the\n     *   burn rate, if applicable, based on the contract's burning mechanism.\n     * - Executes the token transfer through `super._transfer`, using the potentially adjusted amount\n     *   from `_burnOnTransfer`.\n     * - Returns `true` to indicate successful execution of the function.\n     *\n     * This custom implementation ensures compliance with additional rules and token burn mechanisms\n     * while maintaining the basic functionality of ERC20 transfers.\n     *\n     * @param _to The address of the recipient to whom the tokens are being transferred.\n     * @param _value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation was successful.\n     */\n    function transfer(\n        address _to,\n        uint256 _value\n    ) public override returns (bool) {\n        mproMasterDistributor.transferAllowed(_msgSender(), _to, _msgSender());\n        _transfer(_msgSender(), _to, _burnOnTransfer(_msgSender(), _value));\n        return true;\n    }\n\n    /**\n     * @dev Public function to transfer tokens on behalf of another account.\n     *\n     * This function overrides the standard `transferFrom` function of the ERC20 token standard.\n     * It is used to transfer tokens from one account to another, based on a previously set allowance.\n     * The caller must have been previously authorized by the token holder (_from) to spend up to\n     * a specified number of tokens on their behalf.\n     *\n     * The function includes additional logic as follows:\n     * - Calls `mproRoleManager.transferAllowed` to perform custom validation. This could involve\n     *   checks based on specific business rules, like validating the roles of the involved parties\n     *   (_from, _to, and the message sender).\n     * - Executes the transfer through the internal `_transferFrom` function, which handles the actual\n     *   token transfer logic. Before the transfer, it applies the `_burnOnTransfer` function to\n     *   calculate the final amount after considering any burn mechanism that might be in place.\n     * - Returns `true` to indicate successful execution of the function.\n     *\n     * This implementation ensures that any transfers made through this function comply with\n     * additional constraints or business logic defined in the contract, along with the standard\n     * ERC20 transferFrom functionality.\n     *\n     * @param _from The address of the token holder whose tokens are being transferred.\n     * @param _to The address of the recipient to whom the tokens are being transferred.\n     * @param _amount The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation was successful.\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public override returns (bool) {\n        address spender = _msgSender();\n        mproMasterDistributor.transferAllowed(_from, _to, spender);\n        // Chack allowance before passing deducted amount by burn rate to _transferFrom\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\n        _transfer(_from, _to, _burnOnTransfer(_from, _amount));\n        return true;\n    }\n\n    /**\n     * @dev Internal function to handle token burning on transfers.\n     *\n     * This function calculates and executes the burning of a portion of tokens during a transfer,\n     * based on the current burn rate as determined by the `mproMasterDistributor.getBurnAmount`\n     * function. It is designed to be called as part of the token transfer process to automatically\n     * apply a burn mechanism on transfers, reducing the amount of tokens ultimately transferred.\n     *\n     * The function performs the following operations:\n     * - Calls `getBurnAmount` from `mproMasterDistributor` to determine the amount of tokens that\n     *   should be burned from the transfer amount, based on the sender and the total transfer amount.\n     * - If the calculated burn amount is greater than zero and less than the total transfer amount,\n     *   it proceeds to burn that portion of tokens from the sender's balance by calling the internal\n     *   `_burn` function.\n     * - Returns the remaining amount after the burn has been applied. This remaining amount is what\n     *   will be actually transferred to the recipient.\n     *\n     * Note: It's important to ensure the burn amount is valid (not exceeding the transfer amount) to\n     * prevent issues with token balances and supply.\n     *\n     * @param _sender The address from which the tokens are being transferred (and potentially burned).\n     * @param _amount The total amount of tokens being transferred before burn is applied.\n     * @return The amount of tokens to be transferred after applying the burn.\n     */\n    function _burnOnTransfer(\n        address _sender,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 burnAmount = mproMasterDistributor.getBurnAmount(\n            _sender,\n            _amount\n        );\n        if (burnAmount > 0 && burnAmount < _amount) {\n            _burn(_sender, burnAmount);\n        }\n        return _amount.sub(burnAmount);\n    }\n\n    /**\n     * @dev Internal function that hooks into the ERC20 token transfer process.\n     *\n     * This function overrides the `_beforeTokenTransfer` hook from the ERC20 standard. It is called\n     * automatically before every transfer, minting, or burning operation, allowing for additional\n     * custom logic to be executed.\n     *\n     * The function specifically enforces a maximum cap on the total token supply during minting. When\n     * tokens are being minted (indicated by the `from` address being the zero address), it checks\n     * whether the minting would cause the total token supply to exceed a predefined maximum cap\n     * (`_maxCap`). If so, it reverts the transaction to prevent exceeding the cap.\n     *\n     * This cap ensures that the total number of tokens in circulation does not surpass a certain\n     * limit, aligning with the token's economic design and providing a safeguard against\n     * uncontrolled token issuance.\n     *\n     * After performing this check (or in cases of transfer and burning), it calls the base\n     * implementation of `_beforeTokenTransfer` from the ERC20 contract to handle any additional\n     * standard logic.\n     *\n     * @param from The address of the sender. A zero address indicates tokens are being minted.\n     * @param to The address of the receiver. A zero address indicates tokens are being burned.\n     * @param amount The amount of tokens being transferred, minted, or burned.\n     */\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20) {\n        if (from == address(0)) {\n            // Chack if minting would exceed the cap based on the total supply and the minted amount\n            require(\n                totalSupply() + amount <= _maxCap,\n                \"ERC20Capped: cap exceeded\"\n            );\n        }\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    /**\n     * @dev Internal function that hooks into the ERC20 token transfer process.\n     *\n     * This function overrides the `_afterTokenTransfer` hook from both the ERC20 and ERC20Votes\n     * contracts. It is called automatically after every transfer, minting, or burning operation.\n     * The function provides a point to insert custom logic that needs to occur after a token\n     * transfer, mint, or burn.\n     *\n     * In its current implementation, this function does not introduce any additional logic but\n     * rather delegates to the base implementation of `_afterTokenTransfer` in the parent contracts\n     * (ERC20 and ERC20Votes). This ensures that any necessary post-transfer processing defined in\n     * these base contracts, such as updating vote balances in ERC20Votes, is executed.\n     *\n     * This function can be extended in derived contracts to include additional post-transfer\n     * actions, making it a versatile hook for custom behaviors that should occur after token\n     * transactions.\n     *\n     * @param from The address of the sender. A zero address indicates tokens are being minted.\n     * @param to The address of the receiver. A zero address indicates tokens are being burned.\n     * @param amount The amount of tokens being transferred, minted, or burned.\n     */\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20, ERC20Votes) {\n        super._afterTokenTransfer(from, to, amount);\n    }\n\n    function maxCap() external pure returns (uint256) {\n        return _maxCap;\n    }\n}\n"
    },
    "contracts/MPROLight.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/OFT.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IMPROMasterDistributor {\n    function getBurnAmount(\n        address _from,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    function approveAllowed(address, address) external view returns (bool);\n\n    function transferAllowed(\n        address _from,\n        address _to,\n        address _msgSender\n    ) external view returns (bool);\n}\n\ncontract MPRO is OFT, ERC20Votes {\n    IMPROMasterDistributor private mproMasterDistributor;\n\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constructor to initialize the contract with specific parameters.\n     *\n     * This constructor initializes the contract with a name, symbol, and several key addresses\n     * relevant to its operation. It also handles the preminting of tokens to a list of addresses.\n     *\n     * The constructor performs the following operations:\n     * - Inherits from OFTV2 and ERC20Permit by passing `_name`, `_symbol`, and other parameters\n     *   to these base contracts.\n     * - Loops through the `premintAddresses` array, minting tokens in the amounts specified in\n     *   `premintValues` to each address. This is used to distribute an initial supply of tokens.\n     * - Sets the `mproRoleManager` by casting the `_mproRoleManager` address to the\n     *   IMPRORoleManager interface, which is expected to manage role-based access in the contract.\n     * - Sets the `mproMasterDistributor` by casting the `_mproMasterDistributor` address to the\n     *   IMPROMasterDistributor interface, which is expected to handle distribution-related logic.\n     *\n     * The `_lzEndpoint` parameter is specific to the OFTV2 initialization and is related to LayerZero\n     * endpoint configurations.\n     *\n     * This constructor is critical for setting up the initial state of the contract, including\n     * roles, token distribution, and other essential configurations.\n     *\n     * @param _name The name of the token.\n     * @param _symbol The symbol of the token.\n     * @param _lzEndpoint Address for the LayerZero endpoint, used in OFTV2 initialization.\n     * @param _mproMasterDistributor Address of the contract managing token distributions.\n     */\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _lzEndpoint,\n        address _mproMasterDistributor,\n        address _owner\n    ) OFT(_name, _symbol, _lzEndpoint, _owner) ERC20Permit(_name) {\n        mproMasterDistributor = IMPROMasterDistributor(_mproMasterDistributor);\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @dev Internal function to mint tokens.\n     *\n     * This function is an override of the `_mint` function in both ERC20 and ERC20Votes contracts.\n     * It is marked as `internal`, meaning it can only be called from within this contract or its\n     * derivatives. The `virtual` keyword indicates that this function can be overridden in derived\n     * contracts, providing flexibility in extending the token minting logic.\n     *\n     * The function calls `super._mint` to invoke the minting logic defined in the parent contracts\n     * (ERC20 and ERC20Votes). This ensures that the token minting process adheres to the standard\n     * ERC20 implementation, while also updating any additional state or logic defined in ERC20Votes,\n     * such as vote tracking.\n     *\n     * The overriding of this function may be used to introduce additional logic before or after the\n     * standard minting process, such as custom events, access controls, or other state updates\n     * specific to the derived contract's requirements.\n     *\n     * @param account The address that will receive the minted tokens.\n     * @param amount The amount of tokens to be minted.\n     */\n    function _mint(\n        address account,\n        uint256 amount\n    ) internal override(ERC20, ERC20Votes) {\n        super._mint(account, amount);\n    }\n\n    /**\n     * @dev Internal function to burn tokens.\n     *\n     * This function is an override of the `_burn` function in both ERC20 and ERC20Votes contracts.\n     * It is marked as `internal`, meaning it can only be called from within this contract or its\n     * derivatives. The `virtual` keyword indicates that this function can be overridden in derived\n     * contracts, providing the flexibility to modify the token burning logic.\n     *\n     * The function delegates to `super._burn` to execute the burning logic defined in the parent\n     * contracts (ERC20 and ERC20Votes). This ensures that the token burning process complies with\n     * the ERC20 standard, while also accommodating any additional state or logic updates defined in\n     * ERC20Votes, such as vote tracking adjustments.\n     *\n     * Overriding this function allows the introduction of additional functionality specific to the\n     * contract's requirements, which could include custom events, access controls, or other state\n     * modifications that need to occur alongside the standard token burning process.\n     *\n     * @param account The address from which the tokens will be burned.\n     * @param amount The amount of tokens to be burned from the specified account.\n     */\n    function _burn(\n        address account,\n        uint256 amount\n    ) internal override(ERC20, ERC20Votes) {\n        super._burn(account, amount);\n    }\n\n    /**\n     * @dev External function to burn tokens.\n     *\n     * This function provides an external interface to burn tokens from a specified account. It is\n     * accessible externally and allows for tokens to be burned, reducing the total supply in\n     * circulation. The function does not include specific access control checks, meaning any external\n     * caller can potentially invoke it, subject to the contract's overall design and security model.\n     *\n     * The `virtual` keyword indicates that this function can be overridden in derived contracts,\n     * allowing for customization of the burning process or the introduction of additional logic, such\n     * as access control restrictions or pre-burn validations.\n     *\n     * The actual burning of tokens is delegated to the internal `_burn` function, which encapsulates\n     * the logic for removing tokens from an account's balance and updating the total supply. This\n     * separation of concerns allows the `_burn` function to handle the core logic, while the external\n     * `burn` function can be adapted or extended in derived contracts.\n     *\n     * @param amount The amount of tokens to be burned from the specified account.\n     */\n    function burn(uint256 amount) external virtual {\n        _burn(msg.sender, amount);\n    }\n\n    /**\n     * @dev Public function to approve another account to spend tokens on behalf of the message sender.\n     *\n     * This function overrides the standard `approve` function of the ERC20 token standard. It allows\n     * a token holder to grant permission to another account (referred to as the spender) to transfer\n     * up to a specified number of tokens on their behalf.\n     *\n     * The function includes an additional security feature using the `mproRoleManager` to check\n     * whether the approval is allowed. This could be based on additional business logic or\n     * restrictions defined in the role manager contract.\n     *\n     * After the custom check, the function calls the internal `_approve` function of the ERC20\n     * contract to handle the actual approval mechanism, updating the allowance set for the spender.\n     *\n     * @param _spender The address which is being granted permission to spend tokens on behalf of the\n     *                 message sender.\n     * @param _value The maximum number of tokens the spender is allowed to transfer.\n     * @return A boolean value indicating whether the operation was successful.\n     */\n    function approve(\n        address _spender,\n        uint256 _value\n    ) public override returns (bool) {\n        mproMasterDistributor.approveAllowed(_msgSender(), _spender);\n        super._approve(_msgSender(), _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Public function to transfer tokens from the message sender's account to another account.\n     *\n     * This function overrides the standard `transfer` function of the ERC20 token standard. It\n     * enables a token holder to transfer tokens to another address. In addition to the standard\n     * transfer functionality, this implementation includes custom logic for additional checks and\n     * burning tokens on transfer.\n     *\n     * The function performs the following operations:\n     * - Calls `mproRoleManager.transferAllowed` to perform custom checks based on the contract's\n     *   business logic. This might include restrictions on who can send or receive tokens or other\n     *   specific conditions.\n     * - Calls the internal `_burnOnTransfer` function to calculate the amount after applying the\n     *   burn rate, if applicable, based on the contract's burning mechanism.\n     * - Executes the token transfer through `super._transfer`, using the potentially adjusted amount\n     *   from `_burnOnTransfer`.\n     * - Returns `true` to indicate successful execution of the function.\n     *\n     * This custom implementation ensures compliance with additional rules and token burn mechanisms\n     * while maintaining the basic functionality of ERC20 transfers.\n     *\n     * @param _to The address of the recipient to whom the tokens are being transferred.\n     * @param _value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation was successful.\n     */\n    function transfer(\n        address _to,\n        uint256 _value\n    ) public override returns (bool) {\n        mproMasterDistributor.transferAllowed(_msgSender(), _to, _msgSender());\n        _transfer(_msgSender(), _to, _burnOnTransfer(_msgSender(), _value));\n        return true;\n    }\n\n    /**\n     * @dev Public function to transfer tokens on behalf of another account.\n     *\n     * This function overrides the standard `transferFrom` function of the ERC20 token standard.\n     * It is used to transfer tokens from one account to another, based on a previously set allowance.\n     * The caller must have been previously authorized by the token holder (_from) to spend up to\n     * a specified number of tokens on their behalf.\n     *\n     * The function includes additional logic as follows:\n     * - Calls `mproRoleManager.transferAllowed` to perform custom validation. This could involve\n     *   checks based on specific business rules, like validating the roles of the involved parties\n     *   (_from, _to, and the message sender).\n     * - Executes the transfer through the internal `_transferFrom` function, which handles the actual\n     *   token transfer logic. Before the transfer, it applies the `_burnOnTransfer` function to\n     *   calculate the final amount after considering any burn mechanism that might be in place.\n     * - Returns `true` to indicate successful execution of the function.\n     *\n     * This implementation ensures that any transfers made through this function comply with\n     * additional constraints or business logic defined in the contract, along with the standard\n     * ERC20 transferFrom functionality.\n     *\n     * @param _from The address of the token holder whose tokens are being transferred.\n     * @param _to The address of the recipient to whom the tokens are being transferred.\n     * @param _amount The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation was successful.\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public override returns (bool) {\n        address spender = _msgSender();\n        mproMasterDistributor.transferAllowed(_from, _to, spender);\n        // Chack allowance before passing deducted amount by burn rate to _transferFrom\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\n        _transfer(_from, _to, _burnOnTransfer(_from, _amount));\n        return true;\n    }\n\n    /**\n     * @dev Internal function to handle token burning on transfers.\n     *\n     * This function calculates and executes the burning of a portion of tokens during a transfer,\n     * based on the current burn rate as determined by the `mproMasterDistributor.getBurnAmount`\n     * function. It is designed to be called as part of the token transfer process to automatically\n     * apply a burn mechanism on transfers, reducing the amount of tokens ultimately transferred.\n     *\n     * The function performs the following operations:\n     * - Calls `getBurnAmount` from `mproMasterDistributor` to determine the amount of tokens that\n     *   should be burned from the transfer amount, based on the sender and the total transfer amount.\n     * - If the calculated burn amount is greater than zero and less than the total transfer amount,\n     *   it proceeds to burn that portion of tokens from the sender's balance by calling the internal\n     *   `_burn` function.\n     * - Returns the remaining amount after the burn has been applied. This remaining amount is what\n     *   will be actually transferred to the recipient.\n     *\n     * Note: It's important to ensure the burn amount is valid (not exceeding the transfer amount) to\n     * prevent issues with token balances and supply.\n     *\n     * @param _sender The address from which the tokens are being transferred (and potentially burned).\n     * @param _amount The total amount of tokens being transferred before burn is applied.\n     * @return The amount of tokens to be transferred after applying the burn.\n     */\n    function _burnOnTransfer(\n        address _sender,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 burnAmount = mproMasterDistributor.getBurnAmount(\n            _sender,\n            _amount\n        );\n        if (burnAmount > 0 && burnAmount < _amount) {\n            _burn(_sender, burnAmount);\n        }\n        return _amount.sub(burnAmount);\n    }\n\n    /**\n     * @dev Internal function that hooks into the ERC20 token transfer process.\n     *\n     * This function overrides the `_beforeTokenTransfer` hook from the ERC20 standard. It is called\n     * automatically before every transfer, minting, or burning operation, allowing for additional\n     * custom logic to be executed.\n     *\n     * The function specifically enforces a maximum cap on the total token supply during minting. When\n     * tokens are being minted (indicated by the `from` address being the zero address), it checks\n     * whether the minting would cause the total token supply to exceed a predefined maximum cap\n     * (`_maxCap`). If so, it reverts the transaction to prevent exceeding the cap.\n     *\n     * This cap ensures that the total number of tokens in circulation does not surpass a certain\n     * limit, aligning with the token's economic design and providing a safeguard against\n     * uncontrolled token issuance.\n     *\n     * After performing this check (or in cases of transfer and burning), it calls the base\n     * implementation of `_beforeTokenTransfer` from the ERC20 contract to handle any additional\n     * standard logic.\n     *\n     * @param from The address of the sender. A zero address indicates tokens are being minted.\n     * @param to The address of the receiver. A zero address indicates tokens are being burned.\n     * @param amount The amount of tokens being transferred, minted, or burned.\n     */\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    /**\n     * @dev Internal function that hooks into the ERC20 token transfer process.\n     *\n     * This function overrides the `_afterTokenTransfer` hook from both the ERC20 and ERC20Votes\n     * contracts. It is called automatically after every transfer, minting, or burning operation.\n     * The function provides a point to insert custom logic that needs to occur after a token\n     * transfer, mint, or burn.\n     *\n     * In its current implementation, this function does not introduce any additional logic but\n     * rather delegates to the base implementation of `_afterTokenTransfer` in the parent contracts\n     * (ERC20 and ERC20Votes). This ensures that any necessary post-transfer processing defined in\n     * these base contracts, such as updating vote balances in ERC20Votes, is executed.\n     *\n     * This function can be extended in derived contracts to include additional post-transfer\n     * actions, making it a versatile hook for custom behaviors that should occur after token\n     * transactions.\n     *\n     * @param from The address of the sender. A zero address indicates tokens are being minted.\n     * @param to The address of the receiver. A zero address indicates tokens are being burned.\n     * @param amount The amount of tokens being transferred, minted, or burned.\n     */\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override(ERC20, ERC20Votes) {\n        super._afterTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "contracts/MPROMasterDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"hardhat/console.sol\";\n\ninterface IMPRO is IERC20 {\n    function mint(address account, uint256 amount) external;\n\n    function maxCap() external pure returns (uint256);\n}\n\n/**\n * @title MPRO Master Distributor Contract\n * @dev The MPROMasterDistributor contract manages token distribution and related operations.\n * It is responsible for distributing tokens to eligible recipients based on specified rules and\n * configurations. This contract utilizes the AccessControl feature for role-based access control.\n *\n * This contract extends the Context and AccessControl contracts to leverage their functionality.\n * Role-based access control allows specific roles to perform authorized actions within the contract,\n * ensuring proper governance and security.\n */\ncontract MPROMasterDistributor is Context, AccessControl, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Struct representing a distribution reduction configuration.\n     *\n     * This struct defines a configuration for reducing the daily token distribution over time. It\n     * consists of two fields:\n     * - `reductionTimestamp`: The timestamp at which the reduction in distribution should take effect.\n     * - `daylyDistribution`: The daily distribution amount of tokens after the reduction.\n     *\n     * Instances of this struct are typically used in an array to specify different reduction\n     * configurations over time. The reduction timestamp marks when the daily distribution amount\n     * should change.\n     */\n    struct DistributionReduction {\n        uint256 reductionTimestamp;\n        uint256 daylyDistribution;\n    }\n\n    /**\n     * @dev Constant representing the number of seconds in a day.\n     *\n     * This constant defines the number of seconds in a day, which is used for time calculations\n     * within the contract. It is set to the standard value of 86,400 seconds per day.\n     */\n    uint256 constant SECONDS_PER_DAY = 86400;\n\n    bytes32 public constant MPRO_MASTER_DISTRIBUTOR_ROLE =\n        keccak256(\"MPRO_MASTER_DISTRIBUTOR_ROLE\");\n    bytes32 public constant DISTRIBUTIONS_ADMINISTRATOR_ROLE =\n        keccak256(\"DISTRIBUTIONS_ADMINISTRATOR_ROLE\");\n    bytes32 public constant DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER =\n        keccak256(\"DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER\");\n    bytes32 public constant LISTER_ROLE = keccak256(\"LISTER_ROLE\");\n\n    IMPRO private mproToken;\n\n    mapping(bytes32 => bool) private assignedRoles;\n\n    /**\n     * @dev Internal mapping to manage blocklisted addresses.\n     *\n     * This mapping associates addresses (keys) with boolean values to maintain a list of addresses\n     * that are considered \"blocklisted\" within the contract's logic. If an address is included in\n     * this mapping with a `true` value, it indicates that the address is blocklisted and may be\n     * subject to certain restrictions or limitations imposed by the contract.\n     *\n     * The mapping is typically used in access control mechanisms and other parts of the contract's\n     * logic to determine the behavior or privileges associated with addresses based on their\n     * blocklist status.\n     */\n    mapping(address => bool) internal blocklisted;\n\n    /**\n     * @dev Internal mapping to manage whitelisted addresses.\n     *\n     * This mapping associates addresses (keys) with boolean values to maintain a list of addresses\n     * that are considered \"whitelisted\" within the contract's logic. If an address is included in\n     * this mapping with a `true` value, it indicates that the address is whitelisted and may have\n     * special privileges or exemptions within the contract.\n     *\n     * The mapping is typically used in access control mechanisms and other parts of the contract's\n     * logic to determine the behavior or privileges associated with addresses based on their\n     * whitelist status.\n     */\n    mapping(address => bool) internal whitelisted;\n\n    /**\n     * @dev Timestamp indicating when token distribution starts.\n     *\n     * This private state variable stores the Unix timestamp (in seconds) that marks the beginning\n     * of the token distribution period. The value is set during the contract initialization and\n     * can be updated by specific functions within the contract, depending on the contract's logic.\n     *\n     * The distributionStartTimestamp is used in various functions to determine whether the\n     * distribution period has begun. This allows for conditional logic based on the time, such as\n     * enabling token distributions only after this timestamp is reached.\n     *\n     * Being a private variable, it can only be accessed and modified by functions within this\n     * contract, providing a controlled and secure way to manage the start of the distribution phase.\n     */\n    uint256 public distributionStartTimestamp;\n\n    /**\n     * @dev Private immutable variable representing the deadline for the distribution start timestamp.\n     *\n     * This variable is used to store an immutable timestamp that defines the deadline for the\n     * distribution start timestamp within the contract. It is typically set during contract\n     * initialization and remains constant throughout the contract's lifetime.\n     *\n     * The distribution start timestamp deadline indicates the latest permissible timestamp for\n     * starting the distribution of tokens. After this deadline, distribution start timestamps\n     * beyond this value will not be accepted.\n     */\n    uint256 private immutable distributionStartTimestampDeadLine;\n\n    /**\n     * @dev Private variable to keep track of the total tokens distributed.\n     *\n     * This variable is used to maintain a count of the total tokens that have been distributed\n     * within the contract. It starts at zero and is updated whenever tokens are distributed to\n     * recipients.\n     *\n     * It serves as a record of the cumulative tokens distributed and is often used to enforce\n     * distribution limits or to check the available tokens for distribution.\n     */\n    uint256 private distributedTokens;\n\n    /**\n     * @dev Private constant representing the initial daily distribution of tokens.\n     *\n     * This constant defines the initial daily distribution of tokens within the contract. It\n     * represents a fixed amount of tokens that are distributed daily as part of a distribution\n     * mechanism.\n     *\n     * The value is expressed in the contract's token decimals, and it remains constant throughout\n     * the contract's lifetime.\n     */\n    uint256 public constant initialDaylyDistribution = 250_000 * 10 ** 18;\n\n    /**\n     * @dev Public array to store distribution reduction configurations.\n     *\n     * This dynamic array stores instances of the `DistributionReduction` struct, representing\n     * configurations for reducing the daily token distribution over time. Each element of the array\n     * specifies a different reduction configuration, and the array can grow as more configurations\n     * are added.\n     *\n     * These configurations determine when and how the daily distribution amount of tokens changes\n     * over time, allowing for flexibility in managing token distribution within the contract.\n     */\n    DistributionReduction[] private distributionReductions;\n\n    /**\n     * @dev Public variable representing the burn rate for tokens.\n     *\n     * This variable determines the burn rate for tokens within the contract, expressed as a\n     * percentage. A burn rate of 1000 corresponds to 10%, where a portion of tokens is burned\n     * during certain operations. A burn rate of 10000 would represent 100%.\n     *\n     * The value of this variable can be adjusted to control the rate at which tokens are burned\n     * during specific actions, impacting the total token supply over time.\n     */\n    uint256 public burnRate = 1000; // 10000 = 100%\n\n    /**\n     * @dev Modifier to check and enable distribution reduction configurations.\n     *\n     * This modifier is used to validate and enable distribution reduction configurations. It checks\n     * that the provided `_reductionTimestamp` and `_reductionAmount` meet certain criteria to ensure\n     * that reductions are allowed. The criteria include:\n     *\n     * - `_reductionTimestamp` must be greater than the timestamp of the last reduction.\n     * - `_reductionTimestamp` must be greater than or equal to the current timestamp plus 30 days.\n     * - `_reductionAmount` must be greater than or equal to half of the previous daily distribution.\n     *\n     * If all criteria are met, the modifier allows the decorated function or operation to proceed.\n     * Otherwise, it reverts with specific error messages.\n     */\n\n    event Distributed(address indexed _to, uint256 amount);\n    event SetDistribiutionStartTime(uint256 _startTime);\n    event AddDistributionReduction(\n        uint256 _redutionTimestamp,\n        uint256 _reductionAmount\n    );\n    event SetMPRO(address _mproTokenAddress);\n    event SetBurnRate(uint256 _burnRate);\n    event SetDistributorTimeAdministratorRoleManager(\n        address _roleManagerAddress\n    );\n    event SetDistributorTimeAdministratorRole(address _roleManagerAddress);\n\n    /**\n     * @dev Modifier that enforces rules for reduction in distribution. It ensures that a new distribution\n     * reduction can only be set after a certain period from the last reduction, and the new reduction amount\n     * must be within specific limits compared to the last reduction amount.\n     *\n     * The modifier checks against the last entry in the `distributionReductions` array (if it exists) to\n     * enforce the following:\n     * 1. The new reduction timestamp must be at least 183 days after the last reduction's timestamp.\n     * 2. The new daily distribution amount must not be more than half of the last reduction's daily distribution.\n     * 3. The new daily distribution amount must not be more than the last reduction's daily distribution multiplied by 2.\n     *\n     * This ensures a controlled and limited reduction of distribution over time.\n     *\n     * @param _reductionTimestamp The timestamp when the new reduction is intended to start.\n     * @param _reductionAmount The new daily distribution amount after the reduction.\n     */\n    modifier reductionEnabled(\n        uint256 _reductionTimestamp,\n        uint256 _reductionAmount\n    ) {\n        DistributionReduction memory lastReduction;\n\n        if (distributionReductions.length > 0) {\n            lastReduction = distributionReductions[\n                distributionReductions.length - 1\n            ];\n        } else {\n            lastReduction = DistributionReduction(\n                distributionStartTimestamp,\n                initialDaylyDistribution\n            );\n        }\n\n        require(\n            _reductionTimestamp >= lastReduction.reductionTimestamp + 183 days,\n            \"MPROMasterDistributor: New redution start time cannot be lower than 183 days after last redution timestamp\"\n        );\n        require(\n            _reductionAmount >= lastReduction.daylyDistribution.div(2),\n            \"MPROMasterDistributor: New reduction amount cannot be greater than half of the last reduction amount\"\n        );\n        require(\n            _reductionAmount <= lastReduction.daylyDistribution.mul(2),\n            \"MPROMasterDistributor: New reduction amount cannot be greater than the last reduction amount multiplied by 2\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier to ensure that the provided address is not blocklisted.\n     *\n     * This modifier is used to validate that the `_account` address passed as an argument is not\n     * blocklisted within the contract. Addresses that are blocklisted may have certain restrictions\n     * or limitations imposed on them by the contract, and this modifier helps prevent blocklisted\n     * addresses from participating in specific operations.\n     *\n     * If the `_account` address is blocklisted, the contract will revert with the message \"MPROMasterDistributor: Action on blocklisted account\"\n     * If the address is not blocklisted, the modified function or operation is executed as intended.\n     */\n    modifier notBlocklisted(address _account) {\n        require(\n            !blocklisted[_account],\n            \"MPROMasterDistributor: Action on blocklisted account\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier to ensure that the provided address is not the zero address.\n     *\n     * This modifier is used to validate that the `_account` address passed as an argument is not\n     * equal to the zero address (`address(0)`). Preventing the zero address from being used in\n     * certain contexts can help avoid unexpected behavior, as the zero address often has special\n     * significance.\n     *\n     * If the `_account` address is the zero address, the contract will revert with the error code \"Action on address zero\"\n     * If the address is valid (not zero), the modified function or operation is executed.\n     */\n    modifier notZeroAddress(address _account) {\n        require(\n            _account != address(0),\n            \"MPROMasterDistributor: Action on address zero\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier that ensures a role has not already been assigned to an account. This modifier checks\n     * the status of a role in the `assignedRoles` mapping. If the role has already been granted (i.e., the\n     * corresponding value in the mapping is `true`), the function call is reverted with an error message.\n     * This is used to prevent roles from being granted to more than one account, ensuring unique assignment\n     * of responsibilities or permissions within the contract.\n     *\n     * @param _role The bytes32 identifier of the role to check.\n     */\n    modifier notGranted(bytes32 _role) {\n        require(\n            !assignedRoles[_role],\n            \"MPROMasterDistributor: Role already granted to another account\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier that checks if a role has not been marked as burned. A role is considered burned if\n     * it has been explicitly revoked and cannot be reassigned. This is typically done by assigning the role\n     * to the zero address. The modifier uses the `hasRole` function to check the status of the role.\n     * If the role is found to be assigned to the zero address, indicating that it has been burned, the\n     * function call is reverted with an error message. This prevents operations on roles that are meant to\n     * be permanently inactive or revoked.\n     *\n     * @param _role The bytes32 identifier of the role to check.\n     */\n    modifier notBurned(bytes32 _role) {\n        require(\n            !hasRole(_role, address(0)),\n            \"MPROMasterDistributor: Role is already burned\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Constructor for the contract. Initializes the contract by setting the distribution start timestamp,\n     * the distribution deadline, and assigning the OWNER_ROLE to the provided owner address. The distribution\n     * start timestamp is set to 14 days from the current block time, providing a preparation period before the\n     * distribution begins. The distribution deadline is set to 30 days from the current block time, creating a\n     * finite period for the distribution process. The OWNER_ROLE is crucial for contract administration and\n     * oversight, allowing the owner to manage the contract's key operations.\n     *\n     * @param _owner The address that will be assigned the OWNER_ROLE, granting administrative control over the contract.\n     */\n    constructor(address _owner) {\n        // Set the distribution start timestamp to 14 days from the current block time.\n        // This delay allows for a preparation period before the distribution begins.\n        distributionStartTimestamp = block.timestamp + 14 days;\n        // Set the deadline for the distribution period to 30 days from the current block time.\n        // This sets a finite period for the distribution process, ensuring a clear end date.\n        distributionStartTimestampDeadLine = block.timestamp + 30 days;\n        // Assign the OWNER_ROLE to the provided owner address. This role typically includes\n        // elevated privileges and is crucial for contract administration and oversight.\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @dev Calculates the total token distribution based on the initial daily distribution, the elapsed time,\n     * and any distribution reductions that have been set. The function first checks if the current timestamp\n     * is past the distribution start timestamp. If not, it returns 0, indicating that distribution has not\n     * started yet. If the distribution has started, it calculates the total distribution by taking into\n     * account the initial daily distribution and adjusting it based on any reductions that have occurred\n     * since the start of the distribution.\n     *\n     * The function iterates through each distribution reduction, checks if the current timestamp is greater\n     * than the reduction timestamp, and, if so, calculates the distribution for the time period since the last\n     * reduction. It updates the total distribution accordingly. The total distribution also includes the\n     * distribution for the period from the start timestamp until the first reduction or the current time,\n     * whichever comes first.\n     *\n     * @return The total token distribution up to the current block timestamp.\n     */\n    function getAllTokenDistribution() public view returns (uint256) {\n        if (block.timestamp < distributionStartTimestamp) {\n            return 0;\n        }\n\n        DistributionReduction[]\n            memory _distributionReductions = distributionReductions;\n\n        // Time periods since last distribution\n        uint256 timeElapsed = block.timestamp - distributionStartTimestamp;\n        // If days elapsed will return 0 and block.timestamp < distributionStartTimestamp we want to add initialDaylyDistribution to totalDistribution (step before loop with reductions)\n        uint256 daysElapsed = timeElapsed / SECONDS_PER_DAY;\n        uint256 totalDistribution;\n\n        uint256 reductionEndTimestamp = block.timestamp;\n        for (\n            uint256 index = _distributionReductions.length;\n            index > 0;\n            index--\n        ) {\n            DistributionReduction\n                memory distributionReduction = _distributionReductions[\n                    index - 1\n                ];\n\n            // Check if the current timestamp is greater than the reduction timestamp\n            if (block.timestamp >= distributionReduction.reductionTimestamp) {\n                // Calculate the number of days in the current period\n                uint256 daysInCurrentPeriod = (reductionEndTimestamp -\n                    distributionReduction.reductionTimestamp) / SECONDS_PER_DAY;\n                totalDistribution +=\n                    // for 1.01 day in distribution we need to add one daily distribution\n                    // For 0.1 days we will get daysInCurrentPeriod = 0, so we need to add already calculated part\n                    distributionReduction.daylyDistribution +\n                    (daysInCurrentPeriod *\n                        distributionReduction.daylyDistribution);\n                // Update timestamp for previous period\n                reductionEndTimestamp = distributionReduction\n                    .reductionTimestamp;\n                // Update daysElapsed for previous period\n                daysElapsed -= daysInCurrentPeriod;\n            }\n        }\n        // When all reductions are calculated we need to add the rest of the days with the initialDaylyDistribution\n        // We want to calulate distribution from the first second of the distribution start timestamp\n        totalDistribution +=\n            initialDaylyDistribution +\n            // When days elapsed is 0 we need to add initialDaylyDistribution since distribution starts from the first second of the distributionStartTimestamp\n            daysElapsed *\n            initialDaylyDistribution;\n\n        return\n            totalDistribution >= mproToken.maxCap()\n                ? mproToken.maxCap()\n                : totalDistribution;\n    }\n\n    /**\n     * @dev Calculates the quantity of tokens that are available for distribution at the current time.\n     * It determines this quantity by subtracting the total number of tokens already distributed\n     * (`distributedTokens`) from the total number of tokens that should have been distributed up to the\n     * current point in time (`getAllTokenDistribution`). This function provides insight into the remaining\n     * token balance that is available for distribution, ensuring that the distribution does not exceed\n     * the planned amount at any given point.\n     *\n     * Note that this is a private function and can only be called within the contract itself. This function\n     * is typically used internally to manage and track the distribution process accurately.\n     *\n     * @return The quantity of tokens that are currently available for distribution.\n     */\n    function getAvailableForDistributionTokenQuantity()\n        private\n        view\n        returns (uint256)\n    {\n        return getAllTokenDistribution().sub(distributedTokens);\n    }\n\n    /**\n     * @dev Distributes a specified amount of tokens to a given address.\n     *\n     * This function allows tokens to be minted and distributed to a specified address.\n     * It can only be called by an account with the MPRO_MASTER_DISTRIBUTOR_ROLE.\n     * The function performs several checks before proceeding with the distribution:\n     * - It ensures that the amount to be distributed is greater than 0.\n     * - It verifies that the current timestamp is greater than or equal to the distributionStartTimestamp,\n     *   ensuring that the distribution period has started.\n     * - It checks that the total amount of tokens to be distributed (including the current distribution)\n     *   does not exceed the quantity available for distribution as determined by\n     *   getAvailableForDistributionTokenQuantity.\n     *\n     * If all checks pass, the function increments the distributedTokens state variable by the amount\n     * to be distributed and calls the mint function on the mproToken contract to mint the tokens\n     * to the specified address.\n     *\n     * @param _to The address to which the tokens will be distributed.\n     * @param _amount The amount of tokens to be distributed.\n     */\n    function distribute(\n        address _to,\n        uint256 _amount\n    ) public onlyRole(MPRO_MASTER_DISTRIBUTOR_ROLE) {\n        require(_amount > 0, \"amount must be greater than 0\");\n        require(\n            block.timestamp >= distributionStartTimestamp,\n            \"MPROMasterDistributor: Distribution is not enabled yet\"\n        );\n        require(\n            _amount <= getAvailableForDistributionTokenQuantity(),\n            \"MPROMasterDistributor: Distribution limit exceeded\"\n        );\n\n        mproToken.mint(_to, _amount);\n        distributedTokens += _amount;\n\n        emit Distributed(_to, _amount);\n    }\n\n    /**\n     * @dev Distributes tokens to multiple addresses in bulk.\n     *\n     * This function allows for the bulk distribution of tokens to a list of addresses, each receiving\n     * a specified amount. It is designed to efficiently handle multiple distributions in a single transaction.\n     * The function can only be invoked by an account with the MPRO_MASTER_DISTRIBUTOR_ROLE.\n     *\n     * The function performs the following checks and operations:\n     * - It ensures that the length of the `_to` address array matches the length of the `_amount` array,\n     *   ensuring each address has a corresponding amount to be distributed.\n     * - It then iterates over these arrays, calling the `distribute` function for each address-amount pair.\n     *   The `distribute` function is responsible for the actual minting and transferring of tokens,\n     *   as well as performing necessary checks such as ensuring the distribution period has started and\n     *   that the total distributed amount does not exceed the available quantity.\n     *\n     * Note: This function relies on the `distribute` function for individual distributions and inherits\n     * its checks and limitations. Each distribution in the loop is treated as a separate transaction in\n     * terms of checks and effects.\n     *\n     * @param _to An array of addresses to which tokens will be distributed.\n     * @param _amount An array of token amounts to be distributed to the respective addresses.\n     */\n    function distributeBulk(\n        address[] memory _to,\n        uint256[] memory _amount\n    ) public onlyRole(MPRO_MASTER_DISTRIBUTOR_ROLE) {\n        require(\n            _to.length == _amount.length,\n            \"to and amount arrays must have the same length\"\n        );\n        for (uint256 i = 0; i < _to.length; i++) {\n            distribute(_to[i], _amount[i]);\n        }\n    }\n\n    /**\n     * @dev Sets a new distribution start time.\n     *\n     * This function allows the contract owner to set a new start time\n     * for the token distribution process. It ensures that the new start time is in the future, has not yet been\n     * surpassed, and is before the predefined distribution start timestamp deadline. This function can only be\n     * called if the distribution has not yet started (i.e., no tokens have been distributed).\n     *\n     * The function includes checks to ensure:\n     * 1. The distribution has not yet started (`distributedTokens` must be 0).\n     * 2. The new start time (`_startTime`) is in the future (greater than the current `block.timestamp`).\n     * 3. The new start time does not exceed the predefined deadline (`distributionStartTimestampDeadLine`).\n     *\n     * If all conditions are met, the function updates the `distributionStartTimestamp` and emits a\n     * `SetDistribiutionStartTime` event with the new start time.\n     *\n     * @param _startTime The new start time for token distribution.\n     */\n    function setDistributionStartTime(uint256 _startTime) external onlyOwner {\n        require(\n            distributedTokens == 0,\n            \"MPROMasterDistributor: Distribution start time cannot be changed after distribution has started\"\n        );\n        require(\n            _startTime > block.timestamp,\n            \"MPROMasterDistributor: Distribution start time cannot be lower than current time\"\n        );\n        require(\n            _startTime <= distributionStartTimestampDeadLine,\n            \"MPROMasterDistributor: Distribution start time must be less than distributionStartTimeDeadline\"\n        );\n\n        distributionStartTimestamp = _startTime;\n\n        emit SetDistribiutionStartTime(_startTime);\n    }\n\n    /**\n     * @dev Adds a new distribution reduction to the contract.\n     *\n     * This external function allows an account with the DISTRIBUTIONS_ADMINISTRATOR_ROLE to add a\n     * new distribution reduction. A distribution reduction is a record that signifies a change in the\n     * distribution amount of tokens from a specific timestamp.\n     *\n     * The function includes a modifier `reductionEnabled` which likely contains logic to validate the\n     * input parameters `_redutionTimestamp` and `_reductionAmount`. It ensures that the reduction\n     * parameters meet certain criteria before allowing the addition of the new reduction.\n     *\n     * Once validated, the function appends a new `DistributionReduction` struct to the\n     * `distributionReductions` array. This struct includes the timestamp from which the reduction\n     * should take effect (`_redutionTimestamp`) and the new amount to be distributed from that\n     * timestamp (`_reductionAmount`).\n     *\n     * @param _redutionTimestamp The timestamp from which the new distribution amount should apply.\n     * @param _reductionAmount The new amount to be distributed from the specified timestamp.\n     */\n    function addDistributionReduction(\n        uint256 _redutionTimestamp,\n        uint256 _reductionAmount\n    )\n        external\n        onlyRole(DISTRIBUTIONS_ADMINISTRATOR_ROLE)\n        reductionEnabled(_redutionTimestamp, _reductionAmount)\n    {\n        distributionReductions.push(\n            DistributionReduction(_redutionTimestamp, _reductionAmount)\n        );\n\n        emit AddDistributionReduction(_redutionTimestamp, _reductionAmount);\n    }\n\n    /**\n     * @dev Sets the address of the MPRO token contract. This function allows the contract owner to set or\n     * update the address of the MPRO token contract to be used in the distribution. It includes a check to ensure\n     * that the MPRO token address is not already set, preventing accidental overwriting of the token address.\n     *\n     * This is a critical function as it establishes the link to the MPRO token that will be distributed by this\n     * contract. The function can only be successfully called once, as the MPRO token address is intended to be\n     * immutable once set to prevent unauthorized changes.\n     *\n     * If the token address has not been set before, the function updates the `mproToken` state variable and emits\n     * a `SetMPRO` event with the new MPRO token address.\n     *\n     * @param _mproTokenAddress The address of the MPRO token contract to be set.\n     */\n    function setMPRO(address _mproTokenAddress) external onlyOwner {\n        require(\n            mproToken == IMPRO(address(0)),\n            \"MPROMasterDistributor: MPRO token is already set\"\n        );\n        mproToken = IMPRO(_mproTokenAddress);\n        emit SetMPRO(_mproTokenAddress);\n    }\n\n    /**\n     * @dev Calculates the amount to be burned based on the burn rate.\n     *\n     * This function calculates the amount of tokens that should be burned from a given transaction\n     * amount, based on the current burn rate. The burn rate is applied unless the sender's address\n     * is whitelisted, in which case no tokens are burned.\n     *\n     * The function performs the following operations:\n     * - It checks if the sender (`_from`) is whitelisted using the `mproRoleManager.isWhitelisted`\n     *   function. If the sender is whitelisted, the function returns 0, indicating no burn is applied.\n     * - If the sender is not whitelisted, the function calculates the burn amount by applying the\n     *   burn rate to the transaction amount (`_amount`). The burn rate is represented as a percentage\n     *   scaled by a factor of 10000 (e.g., a burn rate of 10% is represented as 1000). The calculated\n     *   burn amount is then returned.\n     *\n     * This mechanism allows for a dynamic burn policy where certain addresses can be exempted from\n     * burning, potentially for promotional or operational purposes.\n     *\n     * @param _from The address from which the tokens are being transferred.\n     * @param _amount The amount of tokens being transferred, from which the burn amount will be calculated.\n     * @return The calculated amount of tokens to be burned.\n     */\n    function getBurnAmount(\n        address _from,\n        uint256 _amount\n    ) external view returns (uint256) {\n        // If the sender is whitelisted, no burn fee is applied\n        if (isWhitelisted(_from)) {\n            return 0;\n        }\n        return _amount.mul(burnRate).div(10000);\n    }\n\n    /**\n     * @dev Sets the burn rate for the contract.\n     *\n     * This external function allows an account with the OWNER_ROLE to set the burn rate,\n     * which is the percentage of the tokens that will be burned during certain operations.\n     * The burn rate is expressed as a percentage with a precision of up to three decimal places.\n     * For example, a burn rate of 1000 represents a 10% burn rate (1000 / 100 = 10%).\n     *\n     * A constraint is enforced to ensure that the burn rate does not exceed 10% (represented as 1000\n     * in the contract). This safeguard prevents setting an excessively high burn rate that could\n     * adversely impact the token economy or operations of the contract.\n     *\n     * It's critical to input the correct value for the burn rate as it directly affects the token\n     * dynamics. Only authorized accounts with the OWNER_ROLE can perform this operation, ensuring\n     * that the burn rate is controlled and updated responsibly.\n     *\n     * @param _burnRate The new burn rate to be set, scaled by a factor of 100. For example, to set a\n     *                 burn rate of 1%, `_burnFee` should be 10.\n     */\n    function setBurnRate(uint256 _burnRate) external onlyOwner {\n        require(\n            _burnRate <= 1000,\n            \"MPROMasterDistributor: Burn rate cannot be greater than or equal to 10%\"\n        );\n        burnRate = _burnRate;\n        emit SetBurnRate(_burnRate);\n    }\n\n    /**\n     * @dev Assigns the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to a specified address. This function\n     * allows the contract owner to delegate the management of distribution time administrators to a specific\n     * account. This is crucial for decentralized management and control over the distribution process.\n     *\n     * The function includes checks to ensure:\n     * 1. The role has not been burned (permanently deactivated).\n     * 2. The role has not already been granted to another account.\n     *\n     * If the role is available and active, the function grants the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role\n     * to the specified address, marks the role as assigned in the `assignedRoles` mapping, and emits a\n     * `SetDistributorTimeAdministratorRoleManager` event with the address of the new role manager.\n     *\n     * @param _roleManagerAddress The address to be assigned the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role.\n     */\n    function setDistributorTimeAdministratorRoleManager(\n        address _roleManagerAddress\n    )\n        external\n        onlyOwner\n        notBurned(DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER)\n        notGranted(DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER)\n    {\n        _grantRole(\n            DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER,\n            _roleManagerAddress\n        );\n        assignedRoles[DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER] = true;\n        emit SetDistributorTimeAdministratorRoleManager(_roleManagerAddress);\n    }\n\n    /**\n     * @dev Assigns the DISTRIBUTIONS_ADMINISTRATOR_ROLE to a specified address. This function allows an account\n     * with the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role to delegate the responsibilities of distribution\n     * time administration to a specific account. This role is crucial for managing the distribution schedule\n     * and ensuring the proper administration of the distribution process.\n     *\n     * The function includes checks to ensure:\n     * 1. The caller has the DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER role, allowing them to manage this role.\n     * 2. The DISTRIBUTIONS_ADMINISTRATOR_ROLE has not been burned (permanently deactivated).\n     * 3. The DISTRIBUTIONS_ADMINISTRATOR_ROLE has not already been granted to another account.\n     *\n     * If the role is available and active, the function grants the DISTRIBUTIONS_ADMINISTRATOR_ROLE to the\n     * specified address, marks the role as assigned in the `assignedRoles` mapping, and emits a\n     * `SetDistributorTimeAdministratorRole` event with the address of the new role administrator.\n     *\n     * @param _roleManagerAddress The address to be assigned the DISTRIBUTIONS_ADMINISTRATOR_ROLE.\n     */\n    function setDistributorTimeAdministratorRole(\n        address _roleManagerAddress\n    )\n        external\n        onlyRole(DISTRIBUTIONS_ADMINISTRATOR_ROLE_MANAGER)\n        notBurned(DISTRIBUTIONS_ADMINISTRATOR_ROLE)\n        notGranted(DISTRIBUTIONS_ADMINISTRATOR_ROLE)\n    {\n        _grantRole(DISTRIBUTIONS_ADMINISTRATOR_ROLE, _roleManagerAddress);\n        assignedRoles[DISTRIBUTIONS_ADMINISTRATOR_ROLE] = true;\n        emit SetDistributorTimeAdministratorRole(_roleManagerAddress);\n    }\n\n    /**\n     * @dev Public function to grant a specific role to an account.\n     *\n     * This function allows the contract owner to grant a specific role to the `_account` address. Roles\n     * are used to define permissions and responsibilities within the contract, and granting a role confers\n     * those associated privileges to the specified account.\n     *\n     * The function takes two parameters:\n     * - `_role`: The bytes32 identifier of the role to be granted.\n     * - `_account`: The address to which the role is to be granted.\n     *\n     * As a safeguard, the function enforces several preconditions before granting the role:\n     * - Ensures that the `_account` address is not blocklisted, maintaining the security and integrity\n     *   of the contract by preventing potentially malicious entities from gaining privileged access.\n     * - Checks that the `_account` address is not the zero address (`address(0)`), avoiding unintentional\n     *   role assignments to an address that may have special significance or represent \"no address\".\n     * - Verifies that the role has not already been burned, ensuring that only active, valid roles are\n     *   assignable.\n     * - Confirms that the role has not already been granted, upholding the principle of unique role assignments.\n     *\n     * This function can only be called by the contract owner, ensuring that role management is kept under\n     * tight control and preventing unauthorized role assignments.\n     *\n     * @param _role The bytes32 identifier of the role to be granted.\n     * @param _account The address to which the role is to be granted.\n     *\n     * Requirements:\n     * - The contract caller must be the contract owner.\n     * - The `_account` must not be blocklisted or the zero address.\n     * - The `_role` must not be burned or already granted.\n     */\n    function grantRole(\n        bytes32 _role,\n        address _account\n    )\n        public\n        virtual\n        override\n        onlyOwner\n        notBlocklisted(_account)\n        notZeroAddress(_account)\n        notBurned(_role)\n        notGranted(_role)\n    {\n        assignedRoles[_role] = true;\n        _grantRole(_role, _account);\n    }\n\n    /**\n     * @dev Public function to revoke a specific role from an account.\n     *\n     * This function allows the contract owner to remove a previously granted role from the `_account` address.\n     * Roles are crucial for defining permissions and responsibilities within the contract, and revoking a role\n     * removes those associated privileges from the specified account.\n     *\n     * The function takes two parameters:\n     * - `_role`: The bytes32 identifier of the role to be revoked.\n     * - `_account`: The address from which the role is to be removed.\n     *\n     * Before revoking the role, the function performs the following checks:\n     * - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent accidental\n     *   modifications of the zero address, which may have special significance.\n     * - Ensures that the `_account` currently has the role to be revoked, providing a safeguard against\n     *   unnecessary or mistaken revocations.\n     *\n     * Access to this function is restricted to addresses with the `OWNER_ROLE`, ensuring that only contract\n     * owners or administrators can revoke roles. Upon successful revocation of the role, the function updates\n     * the `assignedRoles` mapping and calls the internal `_revokeRole` function.\n     *\n     * @param _role The bytes32 identifier of the role to be revoked.\n     * @param _account The address from which the role is to be removed.\n     *\n     * Requirements:\n     * - The `_account` address must not be the zero address (`address(0)`).\n     * - The `_account` must currently have the role that is being revoked.\n     */\n    function revokeRole(\n        bytes32 _role,\n        address _account\n    ) public override onlyOwner notZeroAddress(_account) {\n        require(\n            hasRole(_role, _account),\n            \"MPROMasterDistributor: Account does not have role\"\n        );\n        assignedRoles[_role] = false;\n        _revokeRole(_role, _account);\n    }\n\n    /**\n     * @dev Public function for an account to renounce a specific role it possesses.\n     *\n     * This function allows an account to voluntarily renounce a role it holds, effectively removing the\n     * associated permissions and responsibilities. It's a self-initiated action, meaning an account can\n     * only renounce roles that it possesses for itself, enhancing the security by preventing external\n     * entities from forcibly removing roles.\n     *\n     * The function takes two parameters:\n     * - `_role`: The bytes32 identifier of the role to be renounced.\n     * - `_account`: The address of the account renouncing the role. To ensure security and prevent\n     *   unintended renunciations, the function checks that `_account` is the same as `_msgSender()`.\n     *\n     * Before allowing the role to be renounced, the function performs the following check:\n     * - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent\n     *   accidental modifications of the zero address, which may have special significance.\n     *\n     * Upon successfully renouncing the role, the function updates the `assignedRoles` mapping and\n     * calls the internal `_revokeRole` function to formally remove the role.\n     *\n     * @param _role The bytes32 identifier of the role to be renounced.\n     * @param _account The address of the account renouncing the role.\n     *\n     * Requirements:\n     * - The `_account` address must not be the zero address (`address(0)`).\n     * - The `_account` must be the same as `_msgSender()`, ensuring that accounts can only renounce\n     *   roles for themselves.\n     */\n    function renounceRole(\n        bytes32 _role,\n        address _account\n    ) public override notZeroAddress(_account) {\n        require(\n            _account == _msgSender(),\n            \"AccessControl: can only renounce roles for self\"\n        );\n        require(\n            hasRole(_role, _account),\n            \"MPROMasterDistributor: Account does not have role\"\n        );\n        assignedRoles[_role] = false;\n        _revokeRole(_role, _account);\n    }\n\n    /**\n     * @dev External function to blocklist or unblocklist an account.\n     *\n     * This function allows an address with the `LISTER_ROLE` to either blocklist or remove an account\n     * from the contract's blocklist. Blocklisting an account may restrict it from performing certain\n     * operations or participating in specific aspects of the contract, as defined by the contract's\n     * logic.\n     *\n     * The function takes two parameters:\n     * - `_account`: The address to be either blocklisted or unblocklisted.\n     * - `_blocklist`: A boolean indicating whether to blocklist (`true`) or unblocklist (`false`)\n     *   the account.\n     *\n     * Before modifying the blocklist status, the function checks if the specified `_account` address\n     * holds any other roles within the contract (owner, lister, pauser, distributor). If the account\n     * has any of these roles, the function reverts to prevent the blocklisting of accounts with\n     * roles.\n     *\n     * Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only\n     * authorized entities can modify the blocklist.\n     *\n     * @param _account The address to be blocklisted or unblocklisted.\n     * @param _blocklist A boolean indicating whether to blocklist or unblocklist the account.\n     *\n     * Requirements:\n     * - The `_account` address must not be the zero address (`address(0)`).\n     *   This prevents accidentally modifying the zero address, which may have special significance.\n     * - The `_account` address must not have any other roles (owner, lister, pauser, distributor).\n     *   Accounts with these roles cannot be blocklisted.\n     */\n\n    function blocklist(\n        address _account,\n        bool _blocklist\n    ) external onlyRole(LISTER_ROLE) notZeroAddress(_account) {\n        if (\n            this.owner() == _account ||\n            isLister(_account) ||\n            isDistributor(_account)\n        ) {\n            revert(\n                \"MPROMasterDistributor: Account has a role and cannot be blocklisted\"\n            );\n        }\n        blocklisted[_account] = _blocklist;\n    }\n\n    /**\n     * @dev External function to whitelist or unwhitelist an account.\n     *\n     * This function allows an address with the `LISTER_ROLE` to either whitelist or remove an account\n     * from the contract's whitelist. Whitelisting typically grants certain privileges or exemptions\n     * to the whitelisted account, while removing an account from the whitelist revokes these\n     * privileges.\n     *\n     * The function takes two parameters:\n     * - `_account`: The address to be either whitelisted or removed from the whitelist.\n     * - `_whitelist`: A boolean indicating whether to whitelist (`true`) or unwhitelist (`false`)\n     *   the account.\n     *\n     * The function sets the whitelisting status of the specified account by updating the `whitelisted`\n     * mapping accordingly.\n     *\n     * Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only\n     * authorized entities can modify the whitelist.\n     *\n     * @param _account The address to be whitelisted or unwhitelisted.\n     * @param _whitelist A boolean indicating whether to whitelist or unwhitelist the account.\n     *\n     * Requirements:\n     * - The `_account` address must not be the zero address (`address(0)`).\n     *   This prevents accidentally modifying the zero address, which may have special significance.\n     */\n\n    function whitelist(\n        address _account,\n        bool _whitelist\n    ) external onlyRole(LISTER_ROLE) notZeroAddress(_account) {\n        whitelisted[_account] = _whitelist;\n    }\n\n    /**\n     * @dev Public view function to check if an account has the LISTER_ROLE.\n     *\n     * This function provides a convenient way to verify if a specific account has been granted the LISTER_ROLE\n     * within the contract. The LISTER_ROLE is typically associated with permissions to list items or manage\n     * lists within the contract's ecosystem.\n     *\n     * The function takes a single parameter:\n     * - `_account`: The address of the account to check for the LISTER_ROLE.\n     *\n     * It returns a boolean value indicating whether the specified account has the LISTER_ROLE. This can be\n     * particularly useful for front-end interfaces or other contract interactions that require a quick check\n     * of an account's roles or permissions.\n     *\n     * @param _account The address of the account to check for the LISTER_ROLE.\n     * @return A boolean value indicating whether the specified account has the LISTER_ROLE.\n     */\n    function isLister(address _account) public view returns (bool) {\n        return hasRole(LISTER_ROLE, _account);\n    }\n\n    /**\n     * @dev Public view function to check if an address has the MPROMasterDistributor role.\n     *\n     * This function provides a straightforward method to verify if a specific address has been granted the\n     * MPROMasterDistributor role within the contract. The MPROMasterDistributor role is typically associated\n     * with permissions to manage and execute token distributions, making it a critical role for the\n     * operational aspects of the contract.\n     *\n     * The function takes a single parameter:\n     * - `_address`: The address of the account to check for the MPROMasterDistributor role.\n     *\n     * It returns a boolean value indicating whether the specified address has the MPROMasterDistributor role.\n     * This is particularly useful for confirming role assignments and managing access to distribution-related\n     * functions or sections of a dApp interface.\n     *\n     * @param _address The address of the account to check for the MPROMasterDistributor role.\n     * @return A boolean value indicating whether the specified address has the MPROMasterDistributor role.\n     */\n    function isDistributor(address _address) public view returns (bool) {\n        return hasRole(MPRO_MASTER_DISTRIBUTOR_ROLE, _address);\n    }\n\n    /**\n     * @dev Public view function to check if an account is blocklisted.\n     *\n     * This function allows anyone to determine if a specific account is included in the contract's\n     * blocklist. An account that is blocklisted may be restricted from performing certain operations\n     * or participating in specific aspects of the contract, as defined by the contract's logic.\n     *\n     * The function checks the `blocklisted` mapping to see if the provided `_account` address is\n     * marked as blocklisted, returning a boolean value indicating the blocklist status.\n     *\n     * Being a `view` function, it only reads the blocklist status from the contract's state and\n     * does not modify the contract. This function is typically used in access control mechanisms\n     * where actions are conditional based on whether an account is blocklisted.\n     *\n     * @param _account The address to be checked for blocklist status.\n     * @return `true` if the account is blocklisted, `false` otherwise.\n     */\n\n    function isBlocklisted(address _account) public view returns (bool) {\n        return blocklisted[_account];\n    }\n\n    /**\n     * @dev External view function to check if an account is whitelisted.\n     *\n     * This function is accessible externally and is used to determine if a specific account is\n     * included in the whitelist of the contract. Whitelisted accounts often have certain privileges\n     * or are exempt from various restrictions that apply to other users.\n     *\n     * The function's logic is as follows:\n     * - If the provided `_account` address is the zero address (`address(0)`), the function\n     *   returns `true`. This implies a default allowance or special treatment for the zero address\n     *   in certain contexts.\n     * - For any other address, it checks the `whitelisted` mapping to see if the address is\n     *   marked as whitelisted, returning a boolean value that indicates the status.\n     *\n     * Being a `view` function, it does not modify the state of the contract but simply reads and\n     * returns the whitelisting status. It is typically used in access control checks, where\n     * different actions or permissions are granted based on the user's whitelist status.\n     *\n     * @param _account The address to be checked for its whitelisted status.\n     * @return `true` if the account is whitelisted, `false` otherwise.\n     */\n\n    function isWhitelisted(address _account) private view returns (bool) {\n        if (_account == address(0)) {\n            return true;\n        }\n        return whitelisted[_account];\n    }\n\n    /**\n     * @dev External view function to check if minting is allowed for a given address.\n     *\n     * This function checks whether the provided `_minter` address is authorized to mint new tokens.\n     * In the current implementation, minting is restricted to the contract itself, signifying that\n     * minting operations are controlled internally and not open to external entities directly.\n     *\n     * The function takes a single parameter:\n     * - `_minter`: The address to be checked for minting permissions.\n     *\n     * It returns true if the `_minter` address is the same as the address of this contract,\n     * indicating that minting is allowed. Otherwise, it reverts the transaction with the message\n     * \"MPROMasterDistributor: Distributor only\", enforcing the rule that only the contract itself can initiate minting operations.\n     *\n     * @param _minter The address to be checked for minting permissions.\n     * @return A boolean value indicating whether minting is allowed for the specified `_minter` address.\n     */\n    function mintAllowed(address _minter) external view returns (bool) {\n        require(\n            _minter == address(this),\n            \"MPROMasterDistributor: Distributor only\"\n        );\n        return true;\n    }\n\n    /**\n     * @dev Public view function to check if a token transfer is allowed.\n     *\n     * This function is used to enforce restrictions on token transfers based on blocklist criteria.\n     * It checks whether any of the involved parties in a token transfer (the sender, receiver, and\n     * the caller of the function) are on a blocklist. If any of these addresses are blocklisted, the\n     * function reverts the transaction, preventing the transfer.\n     *\n     * Being a `view` function, it does not modify the state of the blockchain but reads from it.\n     * This function can be integrated into the token transfer process to add an additional layer of\n     * security and compliance, ensuring that tokens cannot be transferred by or to blocklisted\n     * addresses.\n     *\n     * @param _from The address attempting to send tokens.\n     * @param _to The address intended to receive the tokens.\n     * @param _msgSender The address initiating the transfer request.\n     *\n     * Requirements:\n     * - None of the involved addresses (_from, _to, and _msgSender) can be on the blocklist.\n     *   If any are blocklisted, the function reverts with an error message.\n     */\n\n    function transferAllowed(\n        address _from,\n        address _to,\n        address _msgSender\n    ) external view returns (bool) {\n        require(\n            !isBlocklisted(_from) &&\n                !isBlocklisted(_to) &&\n                !isBlocklisted(_msgSender),\n            \"MPROMasterDistributor: Action on blocklisted account\"\n        );\n\n        return true;\n    }\n\n    /**\n     * @dev Public view function to check if token approval is allowed.\n     *\n     * This function is used to enforce restrictions on token approvals based on blocklist criteria.\n     * It checks whether the spender or the caller of the function (message sender) are on a\n     * blocklist. If either of these addresses are blocklisted, the function reverts the transaction,\n     * preventing the approval operation.\n     *\n     * This check is crucial in scenarios where blocklisted addresses should not be permitted to\n     * interact with the token, including being approved to spend tokens on behalf of others. By\n     * incorporating this function into the approval process, the contract adds an additional layer\n     * of security and regulatory compliance.\n     *\n     * Being a `view` function, `approveAllowed` does not alter the state of the blockchain but\n     * reads from it to ensure compliance with the blocklist rules before any approval is granted.\n     *\n     * @param _spender The address being granted permission to spend tokens.\n     * @param _msgSender The address initiating the approval request.\n     *\n     * Requirements:\n     * - Neither the spender (_spender) nor the initiator of the approval (_msgSender) can be\n     *   on the blocklist. If any of them are blocklisted, the function reverts with an error message.\n     */\n\n    function approveAllowed(\n        address _spender,\n        address _msgSender\n    ) external view returns (bool) {\n        require(\n            !isBlocklisted(_spender) && !isBlocklisted(_msgSender),\n            \"MPROMasterDistributor: Action on blocklisted account\"\n        );\n\n        return true;\n    }\n\n    /**\n     * @dev External view function to retrieve the list of distribution reductions.\n     *\n     * This function provides access to the array of `distributionReductions`, which contains\n     * records of all the reductions applied to the token distribution over time. Each record in\n     * the array is a `DistributionReduction` struct, detailing the timestamp when the reduction\n     * takes effect and the new daily distribution amount after the reduction.\n     *\n     * The function does not take any parameters and returns the entire array of\n     * `distributionReductions`. This can be particularly useful for front-end interfaces or\n     * other contract interactions that require visibility into the history and schedule of\n     * distribution reductions.\n     *\n     * @return An array of `DistributionReduction` structs, representing the history of distribution reductions.\n     */\n    function getDistributionReductions()\n        external\n        view\n        returns (DistributionReduction[] memory)\n    {\n        return distributionReductions;\n    }\n}\n"
    },
    "contracts/MPROMasterDistributorLight.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title MPRO Master Distributor Contract Light\n * @dev The MPROMasterDistributor contract manages distributions logic.\n * It is responsible for managing rules as burn rate, blocklist, and whitelist.\n * configurations. This contract utilizes the AccessControl feature for role-based access control.\n *\n * This contract extends the Context and AccessControl contracts to leverage their functionality.\n * Role-based access control allows specific roles to perform authorized actions within the contract,\n * ensuring proper governance and security.\n */\ncontract MPROMasterDistributor is Context, AccessControl, Ownable {\n    using SafeMath for uint256;\n\n    bytes32 public constant LISTER_ROLE = keccak256(\"LISTER_ROLE\");\n\n    mapping(bytes32 => bool) private assignedRoles;\n\n    /**\n     * @dev Internal mapping to manage blocklisted addresses.\n     *\n     * This mapping associates addresses (keys) with boolean values to maintain a list of addresses\n     * that are considered \"blocklisted\" within the contract's logic. If an address is included in\n     * this mapping with a `true` value, it indicates that the address is blocklisted and may be\n     * subject to certain restrictions or limitations imposed by the contract.\n     *\n     * The mapping is typically used in access control mechanisms and other parts of the contract's\n     * logic to determine the behavior or privileges associated with addresses based on their\n     * blocklist status.\n     */\n    mapping(address => bool) internal blocklisted;\n\n    /**\n     * @dev Internal mapping to manage whitelisted addresses.\n     *\n     * This mapping associates addresses (keys) with boolean values to maintain a list of addresses\n     * that are considered \"whitelisted\" within the contract's logic. If an address is included in\n     * this mapping with a `true` value, it indicates that the address is whitelisted and may have\n     * special privileges or exemptions within the contract.\n     *\n     * The mapping is typically used in access control mechanisms and other parts of the contract's\n     * logic to determine the behavior or privileges associated with addresses based on their\n     * whitelist status.\n     */\n    mapping(address => bool) internal whitelisted;\n\n    /**\n     * @dev Public variable representing the burn rate for tokens.\n     *\n     * This variable determines the burn rate for tokens within the contract, expressed as a\n     * percentage. A burn rate of 1000 corresponds to 10%, where a portion of tokens is burned\n     * during certain operations. A burn rate of 10000 would represent 100%.\n     *\n     * The value of this variable can be adjusted to control the rate at which tokens are burned\n     * during specific actions, impacting the total token supply over time.\n     */\n    uint256 public burnRate = 1000; // 10000 = 100%\n\n    event SetBurnRate(uint256 _burnRate);\n\n    /**\n     * @dev Modifier to ensure that the provided address is not blocklisted.\n     *\n     * This modifier is used to validate that the `_account` address passed as an argument is not\n     * blocklisted within the contract. Addresses that are blocklisted may have certain restrictions\n     * or limitations imposed on them by the contract, and this modifier helps prevent blocklisted\n     * addresses from participating in specific operations.\n     *\n     * If the `_account` address is blocklisted, the contract will revert with the message \"MPROMasterDistributor: Action on blocklisted account\"\n     * If the address is not blocklisted, the modified function or operation is executed as intended.\n     */\n    modifier notBlocklisted(address _account) {\n        require(\n            !blocklisted[_account],\n            \"MPROMasterDistributor: Action on blocklisted account\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier to ensure that the provided address is not the zero address.\n     *\n     * This modifier is used to validate that the `_account` address passed as an argument is not\n     * equal to the zero address (`address(0)`). Preventing the zero address from being used in\n     * certain contexts can help avoid unexpected behavior, as the zero address often has special\n     * significance.\n     *\n     * If the `_account` address is the zero address, the contract will revert with the error code \"Action on address zero\"\n     * If the address is valid (not zero), the modified function or operation is executed.\n     */\n    modifier notZeroAddress(address _account) {\n        require(\n            _account != address(0),\n            \"MPROMasterDistributor: Action on address zero\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier that ensures a role has not already been assigned to an account. This modifier checks\n     * the status of a role in the `assignedRoles` mapping. If the role has already been granted (i.e., the\n     * corresponding value in the mapping is `true`), the function call is reverted with an error message.\n     * This is used to prevent roles from being granted to more than one account, ensuring unique assignment\n     * of responsibilities or permissions within the contract.\n     *\n     * @param _role The bytes32 identifier of the role to check.\n     */\n    modifier notGranted(bytes32 _role) {\n        require(\n            !assignedRoles[_role],\n            \"MPROMasterDistributor: Role already granted to another account\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Modifier that checks if a role has not been marked as burned. A role is considered burned if\n     * it has been explicitly revoked and cannot be reassigned. This is typically done by assigning the role\n     * to the zero address. The modifier uses the `hasRole` function to check the status of the role.\n     * If the role is found to be assigned to the zero address, indicating that it has been burned, the\n     * function call is reverted with an error message. This prevents operations on roles that are meant to\n     * be permanently inactive or revoked.\n     *\n     * @param _role The bytes32 identifier of the role to check.\n     */\n    modifier notBurned(bytes32 _role) {\n        require(\n            !hasRole(_role, address(0)),\n            \"MPROMasterDistributor: Role is already burned\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Constructor for the contract. Initializes the contract by setting the distribution start timestamp,\n     * the distribution deadline, and assigning the OWNER_ROLE to the provided owner address. The distribution\n     * start timestamp is set to 14 days from the current block time, providing a preparation period before the\n     * distribution begins. The distribution deadline is set to 30 days from the current block time, creating a\n     * finite period for the distribution process. The OWNER_ROLE is crucial for contract administration and\n     * oversight, allowing the owner to manage the contract's key operations.\n     *\n     * @param _owner The address that will be assigned the OWNER_ROLE, granting administrative control over the contract.\n     */\n    constructor(address _owner) {\n        // Assign the OWNER_ROLE to the provided owner address. This role typically includes\n        // elevated privileges and is crucial for contract administration and oversight.\n        _transferOwnership(_owner);\n    }\n\n    /**\n     * @dev Calculates the amount to be burned based on the burn rate.\n     *\n     * This function calculates the amount of tokens that should be burned from a given transaction\n     * amount, based on the current burn rate. The burn rate is applied unless the sender's address\n     * is whitelisted, in which case no tokens are burned.\n     *\n     * The function performs the following operations:\n     * - It checks if the sender (`_from`) is whitelisted using the `mproRoleManager.isWhitelisted`\n     *   function. If the sender is whitelisted, the function returns 0, indicating no burn is applied.\n     * - If the sender is not whitelisted, the function calculates the burn amount by applying the\n     *   burn rate to the transaction amount (`_amount`). The burn rate is represented as a percentage\n     *   scaled by a factor of 10000 (e.g., a burn rate of 10% is represented as 1000). The calculated\n     *   burn amount is then returned.\n     *\n     * This mechanism allows for a dynamic burn policy where certain addresses can be exempted from\n     * burning, potentially for promotional or operational purposes.\n     *\n     * @param _from The address from which the tokens are being transferred.\n     * @param _amount The amount of tokens being transferred, from which the burn amount will be calculated.\n     * @return The calculated amount of tokens to be burned.\n     */\n    function getBurnAmount(\n        address _from,\n        uint256 _amount\n    ) external view returns (uint256) {\n        // If the sender is whitelisted, no burn fee is applied\n        if (isWhitelisted(_from)) {\n            return 0;\n        }\n        return _amount.mul(burnRate).div(10000);\n    }\n\n    /**\n     * @dev Sets the burn rate for the contract.\n     *\n     * This external function allows an account with the OWNER_ROLE to set the burn rate,\n     * which is the percentage of the tokens that will be burned during certain operations.\n     * The burn rate is expressed as a percentage with a precision of up to three decimal places.\n     * For example, a burn rate of 1000 represents a 10% burn rate (1000 / 100 = 10%).\n     *\n     * A constraint is enforced to ensure that the burn rate does not exceed 10% (represented as 1000\n     * in the contract). This safeguard prevents setting an excessively high burn rate that could\n     * adversely impact the token economy or operations of the contract.\n     *\n     * It's critical to input the correct value for the burn rate as it directly affects the token\n     * dynamics. Only authorized accounts with the OWNER_ROLE can perform this operation, ensuring\n     * that the burn rate is controlled and updated responsibly.\n     *\n     * @param _burnRate The new burn rate to be set, scaled by a factor of 100. For example, to set a\n     *                 burn rate of 1%, `_burnFee` should be 10.\n     */\n    function setBurnRate(uint256 _burnRate) external onlyOwner {\n        require(\n            _burnRate <= 1000,\n            \"MPROMasterDistributor: Burn rate cannot be greater than or equal to 10%\"\n        );\n        burnRate = _burnRate;\n        emit SetBurnRate(_burnRate);\n    }\n\n    /**\n     * @dev Public function to grant a specific role to an account.\n     *\n     * This function allows the contract owner to grant a specific role to the `_account` address. Roles\n     * are used to define permissions and responsibilities within the contract, and granting a role confers\n     * those associated privileges to the specified account.\n     *\n     * The function takes two parameters:\n     * - `_role`: The bytes32 identifier of the role to be granted.\n     * - `_account`: The address to which the role is to be granted.\n     *\n     * As a safeguard, the function enforces several preconditions before granting the role:\n     * - Ensures that the `_account` address is not blocklisted, maintaining the security and integrity\n     *   of the contract by preventing potentially malicious entities from gaining privileged access.\n     * - Checks that the `_account` address is not the zero address (`address(0)`), avoiding unintentional\n     *   role assignments to an address that may have special significance or represent \"no address\".\n     * - Verifies that the role has not already been burned, ensuring that only active, valid roles are\n     *   assignable.\n     * - Confirms that the role has not already been granted, upholding the principle of unique role assignments.\n     *\n     * This function can only be called by the contract owner, ensuring that role management is kept under\n     * tight control and preventing unauthorized role assignments.\n     *\n     * @param _role The bytes32 identifier of the role to be granted.\n     * @param _account The address to which the role is to be granted.\n     *\n     * Requirements:\n     * - The contract caller must be the contract owner.\n     * - The `_account` must not be blocklisted or the zero address.\n     * - The `_role` must not be burned or already granted.\n     */\n    function grantRole(\n        bytes32 _role,\n        address _account\n    )\n        public\n        virtual\n        override\n        onlyOwner\n        notBlocklisted(_account)\n        notZeroAddress(_account)\n        notBurned(_role)\n        notGranted(_role)\n    {\n        assignedRoles[_role] = true;\n        _grantRole(_role, _account);\n    }\n\n    /**\n     * @dev Public function to revoke a specific role from an account.\n     *\n     * This function allows the contract owner to remove a previously granted role from the `_account` address.\n     * Roles are crucial for defining permissions and responsibilities within the contract, and revoking a role\n     * removes those associated privileges from the specified account.\n     *\n     * The function takes two parameters:\n     * - `_role`: The bytes32 identifier of the role to be revoked.\n     * - `_account`: The address from which the role is to be removed.\n     *\n     * Before revoking the role, the function performs the following checks:\n     * - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent accidental\n     *   modifications of the zero address, which may have special significance.\n     * - Ensures that the `_account` currently has the role to be revoked, providing a safeguard against\n     *   unnecessary or mistaken revocations.\n     *\n     * Access to this function is restricted to addresses with the `OWNER_ROLE`, ensuring that only contract\n     * owners or administrators can revoke roles. Upon successful revocation of the role, the function updates\n     * the `assignedRoles` mapping and calls the internal `_revokeRole` function.\n     *\n     * @param _role The bytes32 identifier of the role to be revoked.\n     * @param _account The address from which the role is to be removed.\n     *\n     * Requirements:\n     * - The `_account` address must not be the zero address (`address(0)`).\n     * - The `_account` must currently have the role that is being revoked.\n     */\n    function revokeRole(\n        bytes32 _role,\n        address _account\n    ) public override onlyOwner notZeroAddress(_account) {\n        require(\n            hasRole(_role, _account),\n            \"MPROMasterDistributor: Account does not have role\"\n        );\n        assignedRoles[_role] = false;\n        _revokeRole(_role, _account);\n    }\n\n    /**\n     * @dev Public function for an account to renounce a specific role it possesses.\n     *\n     * This function allows an account to voluntarily renounce a role it holds, effectively removing the\n     * associated permissions and responsibilities. It's a self-initiated action, meaning an account can\n     * only renounce roles that it possesses for itself, enhancing the security by preventing external\n     * entities from forcibly removing roles.\n     *\n     * The function takes two parameters:\n     * - `_role`: The bytes32 identifier of the role to be renounced.\n     * - `_account`: The address of the account renouncing the role. To ensure security and prevent\n     *   unintended renunciations, the function checks that `_account` is the same as `_msgSender()`.\n     *\n     * Before allowing the role to be renounced, the function performs the following check:\n     * - Verifies that the `_account` address is not the zero address (`address(0)`) to prevent\n     *   accidental modifications of the zero address, which may have special significance.\n     *\n     * Upon successfully renouncing the role, the function updates the `assignedRoles` mapping and\n     * calls the internal `_revokeRole` function to formally remove the role.\n     *\n     * @param _role The bytes32 identifier of the role to be renounced.\n     * @param _account The address of the account renouncing the role.\n     *\n     * Requirements:\n     * - The `_account` address must not be the zero address (`address(0)`).\n     * - The `_account` must be the same as `_msgSender()`, ensuring that accounts can only renounce\n     *   roles for themselves.\n     */\n    function renounceRole(\n        bytes32 _role,\n        address _account\n    ) public override notZeroAddress(_account) {\n        require(\n            _account == _msgSender(),\n            \"AccessControl: can only renounce roles for self\"\n        );\n        require(\n            hasRole(_role, _account),\n            \"MPROMasterDistributor: Account does not have role\"\n        );\n        assignedRoles[_role] = false;\n        _revokeRole(_role, _account);\n    }\n\n    /**\n     * @dev External function to blocklist or unblocklist an account.\n     *\n     * This function allows an address with the `LISTER_ROLE` to either blocklist or remove an account\n     * from the contract's blocklist. Blocklisting an account may restrict it from performing certain\n     * operations or participating in specific aspects of the contract, as defined by the contract's\n     * logic.\n     *\n     * The function takes two parameters:\n     * - `_account`: The address to be either blocklisted or unblocklisted.\n     * - `_blocklist`: A boolean indicating whether to blocklist (`true`) or unblocklist (`false`)\n     *   the account.\n     *\n     * Before modifying the blocklist status, the function checks if the specified `_account` address\n     * holds any other roles within the contract (owner, lister, pauser, distributor). If the account\n     * has any of these roles, the function reverts to prevent the blocklisting of accounts with\n     * roles.\n     *\n     * Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only\n     * authorized entities can modify the blocklist.\n     *\n     * @param _account The address to be blocklisted or unblocklisted.\n     * @param _blocklist A boolean indicating whether to blocklist or unblocklist the account.\n     *\n     * Requirements:\n     * - The `_account` address must not be the zero address (`address(0)`).\n     *   This prevents accidentally modifying the zero address, which may have special significance.\n     * - The `_account` address must not have any other roles (owner, lister, pauser, distributor).\n     *   Accounts with these roles cannot be blocklisted.\n     */\n\n    function blocklist(\n        address _account,\n        bool _blocklist\n    ) external onlyRole(LISTER_ROLE) notZeroAddress(_account) {\n        if (this.owner() == _account || isLister(_account)) {\n            revert(\n                \"MPROMasterDistributor: Account has a role and cannot be blocklisted\"\n            );\n        }\n        blocklisted[_account] = _blocklist;\n    }\n\n    /**\n     * @dev External function to whitelist or unwhitelist an account.\n     *\n     * This function allows an address with the `LISTER_ROLE` to either whitelist or remove an account\n     * from the contract's whitelist. Whitelisting typically grants certain privileges or exemptions\n     * to the whitelisted account, while removing an account from the whitelist revokes these\n     * privileges.\n     *\n     * The function takes two parameters:\n     * - `_account`: The address to be either whitelisted or removed from the whitelist.\n     * - `_whitelist`: A boolean indicating whether to whitelist (`true`) or unwhitelist (`false`)\n     *   the account.\n     *\n     * The function sets the whitelisting status of the specified account by updating the `whitelisted`\n     * mapping accordingly.\n     *\n     * Access to this function is restricted to addresses with the `LISTER_ROLE`, ensuring that only\n     * authorized entities can modify the whitelist.\n     *\n     * @param _account The address to be whitelisted or unwhitelisted.\n     * @param _whitelist A boolean indicating whether to whitelist or unwhitelist the account.\n     *\n     * Requirements:\n     * - The `_account` address must not be the zero address (`address(0)`).\n     *   This prevents accidentally modifying the zero address, which may have special significance.\n     */\n\n    function whitelist(\n        address _account,\n        bool _whitelist\n    ) external onlyRole(LISTER_ROLE) notZeroAddress(_account) {\n        whitelisted[_account] = _whitelist;\n    }\n\n    /**\n     * @dev Public view function to check if an account has the LISTER_ROLE.\n     *\n     * This function provides a convenient way to verify if a specific account has been granted the LISTER_ROLE\n     * within the contract. The LISTER_ROLE is typically associated with permissions to list items or manage\n     * lists within the contract's ecosystem.\n     *\n     * The function takes a single parameter:\n     * - `_account`: The address of the account to check for the LISTER_ROLE.\n     *\n     * It returns a boolean value indicating whether the specified account has the LISTER_ROLE. This can be\n     * particularly useful for front-end interfaces or other contract interactions that require a quick check\n     * of an account's roles or permissions.\n     *\n     * @param _account The address of the account to check for the LISTER_ROLE.\n     * @return A boolean value indicating whether the specified account has the LISTER_ROLE.\n     */\n    function isLister(address _account) public view returns (bool) {\n        return hasRole(LISTER_ROLE, _account);\n    }\n\n    /**\n     * @dev Public view function to check if an account is blocklisted.\n     *\n     * This function allows anyone to determine if a specific account is included in the contract's\n     * blocklist. An account that is blocklisted may be restricted from performing certain operations\n     * or participating in specific aspects of the contract, as defined by the contract's logic.\n     *\n     * The function checks the `blocklisted` mapping to see if the provided `_account` address is\n     * marked as blocklisted, returning a boolean value indicating the blocklist status.\n     *\n     * Being a `view` function, it only reads the blocklist status from the contract's state and\n     * does not modify the contract. This function is typically used in access control mechanisms\n     * where actions are conditional based on whether an account is blocklisted.\n     *\n     * @param _account The address to be checked for blocklist status.\n     * @return `true` if the account is blocklisted, `false` otherwise.\n     */\n\n    function isBlocklisted(address _account) public view returns (bool) {\n        return blocklisted[_account];\n    }\n\n    /**\n     * @dev External view function to check if an account is whitelisted.\n     *\n     * This function is accessible externally and is used to determine if a specific account is\n     * included in the whitelist of the contract. Whitelisted accounts often have certain privileges\n     * or are exempt from various restrictions that apply to other users.\n     *\n     * The function's logic is as follows:\n     * - If the provided `_account` address is the zero address (`address(0)`), the function\n     *   returns `true`. This implies a default allowance or special treatment for the zero address\n     *   in certain contexts.\n     * - For any other address, it checks the `whitelisted` mapping to see if the address is\n     *   marked as whitelisted, returning a boolean value that indicates the status.\n     *\n     * Being a `view` function, it does not modify the state of the contract but simply reads and\n     * returns the whitelisting status. It is typically used in access control checks, where\n     * different actions or permissions are granted based on the user's whitelist status.\n     *\n     * @param _account The address to be checked for its whitelisted status.\n     * @return `true` if the account is whitelisted, `false` otherwise.\n     */\n\n    function isWhitelisted(address _account) private view returns (bool) {\n        if (_account == address(0)) {\n            return true;\n        }\n        return whitelisted[_account];\n    }\n\n    /**\n     * @dev Public view function to check if a token transfer is allowed.\n     *\n     * This function is used to enforce restrictions on token transfers based on blocklist criteria.\n     * It checks whether any of the involved parties in a token transfer (the sender, receiver, and\n     * the caller of the function) are on a blocklist. If any of these addresses are blocklisted, the\n     * function reverts the transaction, preventing the transfer.\n     *\n     * Being a `view` function, it does not modify the state of the blockchain but reads from it.\n     * This function can be integrated into the token transfer process to add an additional layer of\n     * security and compliance, ensuring that tokens cannot be transferred by or to blocklisted\n     * addresses.\n     *\n     * @param _from The address attempting to send tokens.\n     * @param _to The address intended to receive the tokens.\n     * @param _msgSender The address initiating the transfer request.\n     *\n     * Requirements:\n     * - None of the involved addresses (_from, _to, and _msgSender) can be on the blocklist.\n     *   If any are blocklisted, the function reverts with an error message.\n     */\n\n    function transferAllowed(\n        address _from,\n        address _to,\n        address _msgSender\n    ) external view returns (bool) {\n        require(\n            !isBlocklisted(_from) &&\n                !isBlocklisted(_to) &&\n                !isBlocklisted(_msgSender),\n            \"MPROMasterDistributor: Action on blocklisted account\"\n        );\n\n        return true;\n    }\n\n    /**\n     * @dev Public view function to check if token approval is allowed.\n     *\n     * This function is used to enforce restrictions on token approvals based on blocklist criteria.\n     * It checks whether the spender or the caller of the function (message sender) are on a\n     * blocklist. If either of these addresses are blocklisted, the function reverts the transaction,\n     * preventing the approval operation.\n     *\n     * This check is crucial in scenarios where blocklisted addresses should not be permitted to\n     * interact with the token, including being approved to spend tokens on behalf of others. By\n     * incorporating this function into the approval process, the contract adds an additional layer\n     * of security and regulatory compliance.\n     *\n     * Being a `view` function, `approveAllowed` does not alter the state of the blockchain but\n     * reads from it to ensure compliance with the blocklist rules before any approval is granted.\n     *\n     * @param _spender The address being granted permission to spend tokens.\n     * @param _msgSender The address initiating the approval request.\n     *\n     * Requirements:\n     * - Neither the spender (_spender) nor the initiator of the approval (_msgSender) can be\n     *   on the blocklist. If any of them are blocklisted, the function reverts with an error message.\n     */\n\n    function approveAllowed(\n        address _spender,\n        address _msgSender\n    ) external view returns (bool) {\n        require(\n            !isBlocklisted(_spender) && !isBlocklisted(_msgSender),\n            \"MPROMasterDistributor: Action on blocklisted account\"\n        );\n\n        return true;\n    }\n}\n"
    },
    "contracts/MPROVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MPROVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"MPROVesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the MPROVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount == 0) {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingBeneficiary[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingBeneficiary[] memory beneficiaries = new VestingBeneficiary[](\n            length\n        );\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            beneficiaries[i] = vestingBeneficiaries[beneficiary];\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/PrivateRoundVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PrivateRoundVesting is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    struct VestingLookup {\n        address beneficiary;\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"Vesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the PrivateRoundVesting contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount == 0) {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingLookup[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingLookup[] memory beneficiaries = new VestingLookup[](length);\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            uint256 amount = vestingBeneficiaries[beneficiary].amount;\n            uint256 claimed = vestingBeneficiaries[beneficiary].claimed;\n            beneficiaries[i] = VestingLookup(beneficiary, amount, claimed);\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "contracts/VestingSeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract VestingSeed is Context, Ownable {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\n     * to their decimal representation. For example, a value of 10000 represents 100%.\n     */\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\n\n    /**\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\n     * the beneficiary has already claimed from their allocation.\n     */\n    struct VestingBeneficiary {\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    struct VestingLookup {\n        address beneficiary;\n        uint256 amount;\n        uint256 claimed;\n    }\n\n    /**\n     * @dev The ERC20 token address which is being vested in this contract.\n     */\n    address public token;\n    /**\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\n     */\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\n    /**\n     * @dev Array of beneficiary addresses.\n     */\n    address[] private beneficiaryKeys;\n    /**\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\n     */\n    uint256 private immutable tgeUnlockTimestampDeadline;\n    /**\n     * @dev The timestamp after which tokens begin to unlock.\n     */\n    uint256 public tgeUnlockTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\n     */\n    uint256 public immutable tgeUnlockPercent;\n    /**\n     * @dev The timestamp after which tokens begin to vest.\n     */\n    uint256 public cliffTimestamp;\n    /**\n     * @dev The percentage of tokens to be unlocked per vesting period.\n     */\n    uint256 public immutable vestingUnlockPercentPerPeriod;\n    /**\n     * @dev The duration of each vesting period in seconds.\n     */\n    uint256 public immutable vestingPeriodDuration;\n\n    /**\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\n     * certain functions, such as claiming vested tokens.\n     *\n     * @param _account The address of the account to check for beneficiary status.\n     */\n    modifier onlyBeneficiary(address _account) {\n        require(\n            vestingBeneficiaries[_account].amount > 0,\n            \"Vesting: Account is not a beneficiary\"\n        );\n        _;\n    }\n\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\n    event Claim(address _beneficiary, uint256 _amount);\n    event EmergencyWithdraw(uint256 _amount);\n\n    /**\n     * @dev Constructor for the VestingSeed contract. Initializes the contract with necessary parameters\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\n     *\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\n     * rate and frequency at which tokens are vested after the cliff period.\n     *\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\n     * beneficiaries.\n     *\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\n     * @param _newOwner The address that will be granted ownership of the contract.\n     */\n    constructor(\n        uint256 _tgeUnlockTimestamp,\n        uint256 _tgeUnlockPercent,\n        uint256 _cliffDelay,\n        uint256 _vestingUnlockPercentPerPeriod,\n        uint256 _vestingPeriodDuration,\n        address _newOwner\n    ) {\n        require(\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid period unlock percent\"\n        );\n        require(\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\n            \"Vesting: Invalid tge unlock percent\"\n        );\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\n        tgeUnlockPercent = _tgeUnlockPercent;\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\n        vestingPeriodDuration = _vestingPeriodDuration;\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\n     *\n     * @param _timestamp The new TGE unlock timestamp.\n     */\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\n        require(\n            _timestamp > block.timestamp,\n            \"Vesting: TGE unlock time cannot be lower than current time\"\n        );\n        require(\n            _timestamp <= tgeUnlockTimestampDeadline,\n            \"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\"\n        );\n        require(\n            tgeUnlockTimestamp > block.timestamp,\n            \"Vesting: TGE unlock time already passed\"\n        );\n\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\n        tgeUnlockTimestamp = _timestamp;\n        emit SetTgeUnlockTimestamp(_timestamp);\n    }\n\n    /**\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\n     * event upon successful update.\n     *\n     * @param _token The address of the ERC20 token to be vested.\n     */\n    function setVestingToken(address _token) external onlyOwner {\n        require(_token != address(0), \"Vesting: Invalid vesting token\");\n        require(token == address(0), \"Vesting: Token already set\");\n        token = _token;\n    }\n\n    /**\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\n     *\n     * @param _beneficiaries Array of beneficiary addresses.\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\n     */\n    function registerBeneficiaries(\n        address[] memory _beneficiaries,\n        uint256[] memory _amounts\n    ) external virtual onlyOwner {\n        require(\n            _beneficiaries.length == _amounts.length,\n            \"Vesting: Invalid input lengths\"\n        );\n        // Use in memory _beneficiaries for lenght check\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            if (_beneficiaries[i] == address(0)) {\n                revert(\"Vesting: Invalid beneficiary\");\n            }\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n                _beneficiaries[i]\n            ];\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\n            if (beneficiary.amount == 0) {\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\n                    _amounts[i],\n                    0\n                );\n                beneficiaryKeys.push(_beneficiaries[i]);\n            }\n        }\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\n    }\n\n    /**\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\n     * called by a beneficiary of the vesting contract.\n     *\n     * @return The amount of tokens that the caller can claim.\n     */\n    function claimBalance()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return\n            vestingBeneficiaries[_msgSender()].amount -\n            vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\n     * withdrawn from their allocated amount.\n     *\n     * @return The amount of tokens already claimed by the caller.\n     */\n    function claimedAllocation()\n        public\n        view\n        virtual\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        return vestingBeneficiaries[_msgSender()].claimed;\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\n     * the tokens available based on the vesting schedule otherwise.\n     *\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\n     */\n    function enableForRelease()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (\n            block.timestamp >= tgeUnlockTimestamp &&\n            block.timestamp < cliffTimestamp\n        ) {\n            return claimableTgaTokens.sub(beneficiary.claimed);\n        } else if (block.timestamp >= cliffTimestamp) {\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\n            );\n\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\n                UNLOCK_PERCENT_DIVIDER\n            );\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\n            if (totalLinearTokens > totalTokens) {\n                totalLinearTokens = totalTokens;\n            }\n            return totalLinearTokens.sub(beneficiary.claimed);\n        } else {\n            return 0;\n        }\n    }\n\n    function nextReleaseTimestamp() public view returns (uint256) {\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return tgeUnlockTimestamp;\n        } else if (block.timestamp < cliffTimestamp) {\n            return cliffTimestamp;\n        } else {\n            uint256 vestingCircle = 1;\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                vestingPeriodDuration\n            );\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\n        }\n    }\n\n    function nextReleaseAllocation()\n        public\n        view\n        onlyBeneficiary(_msgSender())\n        returns (uint256)\n    {\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\n            _msgSender()\n        ];\n        uint256 totalTokens = beneficiary.amount;\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\n            UNLOCK_PERCENT_DIVIDER\n        );\n        if (block.timestamp < tgeUnlockTimestamp) {\n            return claimableTgaTokens;\n        } else {\n            uint256 vestingCircle = 1;\n            if (block.timestamp > cliffTimestamp)\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\n                    vestingPeriodDuration\n                );\n\n            uint256 vestingTokens = totalTokens\n                .mul(vestingUnlockPercentPerPeriod)\n                .div(UNLOCK_PERCENT_DIVIDER);\n\n            if (\n                vestingCircle.mul(vestingTokens) >=\n                totalTokens - claimableTgaTokens\n            ) {\n                return 0;\n            }\n\n            return vestingTokens;\n        }\n    }\n\n    /**\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\n     * successful transfer of tokens.\n     */\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\n        require(\n            block.timestamp >= tgeUnlockTimestamp,\n            \"Vesting: Not yet unlocked\"\n        );\n        uint256 tokensEnableForRelease = enableForRelease();\n        require(tokensEnableForRelease > 0, \"Vesting: No tokens to release\");\n\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\n        SafeERC20.safeTransfer(\n            IERC20(token),\n            _msgSender(),\n            tokensEnableForRelease\n        );\n        emit Claim(_msgSender(), tokensEnableForRelease);\n    }\n\n    function emergencyVestingTokenWithdraw() external onlyOwner {\n        uint256 _amount = IERC20(token).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\n        emit EmergencyWithdraw(_amount);\n    }\n\n    function getBeneficiaries()\n        external\n        view\n        onlyOwner\n        returns (VestingLookup[] memory)\n    {\n        uint256 length = beneficiaryKeys.length;\n\n        VestingLookup[] memory beneficiaries = new VestingLookup[](length);\n\n        // Iterate over the array of keys and populate the arrays\n        for (uint256 i = 0; i < length; i++) {\n            address beneficiary = beneficiaryKeys[i];\n            uint256 amount = vestingBeneficiaries[beneficiary].amount;\n            uint256 claimed = vestingBeneficiaries[beneficiary].claimed;\n            beneficiaries[i] = VestingLookup(beneficiary, amount, claimed);\n        }\n\n        return beneficiaries;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    },
    "solidity-bytes-utils/contracts/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equal_nonAligned(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let endMinusWord := add(_preBytes, length)\n                let mc := add(_preBytes, 0x20)\n                let cc := add(_postBytes, 0x20)\n\n                for {\n                // the next line is the loop condition:\n                // while(uint256(mc < endWord) + cb == 2)\n                } eq(add(lt(mc, endMinusWord), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n\n                // Only if still successful\n                // For <1 word tail bytes\n                if gt(success, 0) {\n                    // Get the remainder of length/32\n                    // length % 32 = AND(length, 32 - 1)\n                    let numTailBytes := and(length, 0x1f)\n                    let mcRem := mload(mc)\n                    let ccRem := mload(cc)\n                    for {\n                        let i := 0\n                    // the next line is the loop condition:\n                    // while(uint256(i < numTailBytes) + cb == 2)\n                    } eq(add(lt(i, numTailBytes), cb), 2) {\n                        i := add(i, 1)\n                    } {\n                        if iszero(eq(byte(i, mcRem), byte(i, ccRem))) {\n                            // unsuccess:\n                            success := 0\n                            cb := 0\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}