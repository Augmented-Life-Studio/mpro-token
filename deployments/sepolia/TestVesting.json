{
  "address": "0xFF84604214708E3A295FdBAf0B1f97B40f7c818b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tgeUnlockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tgeUnlockPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliffDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingUnlockPercentPerPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingPeriodDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "RegisterBeneficiaries",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "SetTgeUnlockTimestamp",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimedAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cliffTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyVestingTokenWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableForRelease",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeneficiaries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct TestVesting.VestingBeneficiary[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextReleaseAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextReleaseTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "registerBeneficiaries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "setTgeUnlockTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setVestingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeUnlockPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeUnlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingPeriodDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingUnlockPercentPerPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a7b7b3a5b716071cfdfd6388a202b8da65c1da8a9f3132a16e89ce63e4c0acc",
  "receipt": {
    "to": null,
    "from": "0x8B7C5D0F05Dc6A5Af60292A6061aE960b8a47274",
    "contractAddress": "0xFF84604214708E3A295FdBAf0B1f97B40f7c818b",
    "transactionIndex": 71,
    "gasUsed": "1445697",
    "logsBloom": "0x
    "blockHash": "0xab7c4b24e8492a61f731c14296e2024eaaf53fe2ab5c80919a770038ec97bb28",
    "transactionHash": "0x4a7b7b3a5b716071cfdfd6388a202b8da65c1da8a9f3132a16e89ce63e4c0acc",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 5946848,
        "transactionHash": "0x4a7b7b3a5b716071cfdfd6388a202b8da65c1da8a9f3132a16e89ce63e4c0acc",
        "address": "0xFF84604214708E3A295FdBAf0B1f97B40f7c818b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b7c5d0f05dc6a5af60292a6061ae960b8a47274"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0xab7c4b24e8492a61f731c14296e2024eaaf53fe2ab5c80919a770038ec97bb28"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 5946848,
        "transactionHash": "0x4a7b7b3a5b716071cfdfd6388a202b8da65c1da8a9f3132a16e89ce63e4c0acc",
        "address": "0xFF84604214708E3A295FdBAf0B1f97B40f7c818b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000008b7c5d0f05dc6a5af60292a6061ae960b8a47274",
          "0x0000000000000000000000008b7c5d0f05dc6a5af60292a6061ae960b8a47274"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0xab7c4b24e8492a61f731c14296e2024eaaf53fe2ab5c80919a770038ec97bb28"
      }
    ],
    "blockNumber": 5946848,
    "cumulativeGasUsed": "11874128",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1716272863,
    4000,
    3600,
    1000,
    3600,
    "0x8B7C5D0F05Dc6A5Af60292A6061aE960b8a47274"
  ],
  "numDeployments": 1,
  "solcInputHash": "33a3d0d0f3b34019d5d28a1356e1686d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tgeUnlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tgeUnlockPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingUnlockPercentPerPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"RegisterBeneficiaries\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"SetTgeUnlockTimestamp\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimedAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyVestingTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableForRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiaries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"internalType\":\"struct TestVesting.VestingBeneficiary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReleaseAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextReleaseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"registerBeneficiaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setTgeUnlockTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setVestingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeUnlockPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingUnlockPercentPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim()\":{\"details\":\"Allows a beneficiary to claim their vested tokens. This function checks if the current time is past the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon successful transfer of tokens.\"},\"claimBalance()\":{\"details\":\"Returns the claimable balance of tokens for the caller. This function calculates the balance by subtracting the already claimed tokens from the total allocated amount for the caller. It can only be called by a beneficiary of the vesting contract.\",\"returns\":{\"_0\":\"The amount of tokens that the caller can claim.\"}},\"claimedAllocation()\":{\"details\":\"Returns the amount of tokens already claimed by the caller. This function is accessible only to beneficiaries of the contract and provides an easy way to track the amount of tokens they have already withdrawn from their allocated amount.\",\"returns\":{\"_0\":\"The amount of tokens already claimed by the caller.\"}},\"constructor\":{\"details\":\"Constructor for the MPROVesting contract. Initializes the contract with necessary parameters for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent, cliff delay, vesting percent per period, vesting period duration, and the contract owner. The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which no tokens are vested. The vesting unlock percent per period and the vesting period duration define the rate and frequency at which tokens are vested after the cliff period. Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and beneficiaries.\",\"params\":{\"_cliffDelay\":\"The delay after TGE during which no tokens are vested.\",\"_newOwner\":\"The address that will be granted ownership of the contract.\",\"_tgeUnlockPercent\":\"The percentage of total tokens to be unlocked at TGE.\",\"_tgeUnlockTimestamp\":\"The timestamp for the initial unlock of tokens (TGE).\",\"_vestingPeriodDuration\":\"The duration of each vesting period in seconds.\",\"_vestingUnlockPercentPerPeriod\":\"The percentage of tokens to be vested per vesting period.\"}},\"enableForRelease()\":{\"details\":\"Calculates the amount of tokens that a beneficiary is eligible to claim at the current time. This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates the tokens available based on the vesting schedule otherwise.\",\"returns\":{\"_0\":\"The amount of tokens the beneficiary is currently eligible to claim.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerBeneficiaries(address[],uint256[])\":{\"details\":\"Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific amount of tokens. This function can only be called by the contract owner. It validates the input arrays for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided data. Emits `RegisterBeneficiaries` event upon successful registration.\",\"params\":{\"_amounts\":\"Array of token amounts corresponding to each beneficiary.\",\"_beneficiaries\":\"Array of beneficiary addresses.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTgeUnlockTimestamp(uint256)\":{\"details\":\"Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp` accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\",\"params\":{\"_timestamp\":\"The new TGE unlock timestamp.\"}},\"setVestingToken(address)\":{\"details\":\"Sets the vesting token address. This function can only be called by the contract owner. It enforces that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken` event upon successful update.\",\"params\":{\"_token\":\"The address of the ERC20 token to be vested.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"UNLOCK_PERCENT_DIVIDER\":{\"details\":\"Constant representing the divider for percentage values. This is used to convert percentage values to their decimal representation. For example, a value of 10000 represents 100%.\"},\"beneficiaryKeys\":{\"details\":\"Array of beneficiary addresses.\"},\"cliffTimestamp\":{\"details\":\"The timestamp after which tokens begin to vest.\"},\"tgeUnlockPercent\":{\"details\":\"The percentage of tokens to be unlocked at TGE (Token Generation Event).\"},\"tgeUnlockTimestamp\":{\"details\":\"The timestamp after which tokens begin to unlock.\"},\"tgeUnlockTimestampDeadline\":{\"details\":\"The timestamp deadline after which the TGE unlock timestamp cannot be updated.\"},\"token\":{\"details\":\"The ERC20 token address which is being vested in this contract.\"},\"vestingBeneficiaries\":{\"details\":\"Mapping of beneficiary addresses to their respective vesting data.\"},\"vestingPeriodDuration\":{\"details\":\"The duration of each vesting period in seconds.\"},\"vestingUnlockPercentPerPeriod\":{\"details\":\"The percentage of tokens to be unlocked per vesting period.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tests/MPROVesting.sol\":\"TestVesting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/tests/MPROVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TestVesting is Context, Ownable {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Constant representing the divider for percentage values. This is used to convert percentage values\\n     * to their decimal representation. For example, a value of 10000 represents 100%.\\n     */\\n    uint256 private constant UNLOCK_PERCENT_DIVIDER = 10000;\\n\\n    /**\\n     * @dev Struct representing a beneficiary of the vesting contract. Each beneficiary is associated with\\n     * a specific amount of tokens and a claimable amount of tokens. The `amount` field represents the total\\n     * amount of tokens allocated to the beneficiary. The `claimed` field represents the amount of tokens that\\n     * the beneficiary has already claimed from their allocation.\\n     */\\n    struct VestingBeneficiary {\\n        uint256 amount;\\n        uint256 claimed;\\n    }\\n\\n    /**\\n     * @dev The ERC20 token address which is being vested in this contract.\\n     */\\n    address public token;\\n    /**\\n     * @dev Mapping of beneficiary addresses to their respective vesting data.\\n     */\\n    mapping(address => VestingBeneficiary) private vestingBeneficiaries;\\n    /**\\n     * @dev Array of beneficiary addresses.\\n     */\\n    address[] private beneficiaryKeys;\\n    /**\\n     * @dev The timestamp deadline after which the TGE unlock timestamp cannot be updated.\\n     */\\n    uint256 private immutable tgeUnlockTimestampDeadline;\\n    /**\\n     * @dev The timestamp after which tokens begin to unlock.\\n     */\\n    uint256 public tgeUnlockTimestamp;\\n    /**\\n     * @dev The percentage of tokens to be unlocked at TGE (Token Generation Event).\\n     */\\n    uint256 public immutable tgeUnlockPercent;\\n    /**\\n     * @dev The timestamp after which tokens begin to vest.\\n     */\\n    uint256 public cliffTimestamp;\\n    /**\\n     * @dev The percentage of tokens to be unlocked per vesting period.\\n     */\\n    uint256 public immutable vestingUnlockPercentPerPeriod;\\n    /**\\n     * @dev The duration of each vesting period in seconds.\\n     */\\n    uint256 public immutable vestingPeriodDuration;\\n\\n    /**\\n     * @dev Modifier that restricts function access to only beneficiaries of the vesting contract.\\n     * This modifier checks if the specified account is a beneficiary by verifying that the account has\\n     * a non-zero allocation of tokens for vesting. If the account does not have an allocation, the function\\n     * call is reverted with an error message. This ensures that only accounts with vested tokens can access\\n     * certain functions, such as claiming vested tokens.\\n     *\\n     * @param _account The address of the account to check for beneficiary status.\\n     */\\n    modifier onlyBeneficiary(address _account) {\\n        require(\\n            vestingBeneficiaries[_account].amount > 0,\\n            \\\"MPROVesting: Account is not a beneficiary\\\"\\n        );\\n        _;\\n    }\\n\\n    event SetTgeUnlockTimestamp(uint256 _timestamp);\\n    event RegisterBeneficiaries(address[] _beneficiaries, uint256[] _amounts);\\n    event Claim(address _beneficiary, uint256 _amount);\\n    event EmergencyWithdraw(uint256 _amount);\\n\\n    /**\\n     * @dev Constructor for the MPROVesting contract. Initializes the contract with necessary parameters\\n     * for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent,\\n     * cliff delay, vesting percent per period, vesting period duration, and the contract owner.\\n     *\\n     * The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent\\n     * specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which\\n     * no tokens are vested. The vesting unlock percent per period and the vesting period duration define the\\n     * rate and frequency at which tokens are vested after the cliff period.\\n     *\\n     * Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and\\n     * beneficiaries.\\n     *\\n     * @param _tgeUnlockTimestamp The timestamp for the initial unlock of tokens (TGE).\\n     * @param _tgeUnlockPercent The percentage of total tokens to be unlocked at TGE.\\n     * @param _cliffDelay The delay after TGE during which no tokens are vested.\\n     * @param _vestingUnlockPercentPerPeriod The percentage of tokens to be vested per vesting period.\\n     * @param _vestingPeriodDuration The duration of each vesting period in seconds.\\n     * @param _newOwner The address that will be granted ownership of the contract.\\n     */\\n    constructor(\\n        uint256 _tgeUnlockTimestamp,\\n        uint256 _tgeUnlockPercent,\\n        uint256 _cliffDelay,\\n        uint256 _vestingUnlockPercentPerPeriod,\\n        uint256 _vestingPeriodDuration,\\n        address _newOwner\\n    ) {\\n        require(\\n            _vestingUnlockPercentPerPeriod <= UNLOCK_PERCENT_DIVIDER,\\n            \\\"Vesting: Invalid period unlock percent\\\"\\n        );\\n        require(\\n            _tgeUnlockPercent <= UNLOCK_PERCENT_DIVIDER,\\n            \\\"Vesting: Invalid tge unlock percent\\\"\\n        );\\n        tgeUnlockTimestampDeadline = block.timestamp + 30 days;\\n        tgeUnlockTimestamp = _tgeUnlockTimestamp;\\n        tgeUnlockPercent = _tgeUnlockPercent;\\n        cliffTimestamp = tgeUnlockTimestamp + _cliffDelay;\\n        vestingUnlockPercentPerPeriod = _vestingUnlockPercentPerPeriod;\\n        vestingPeriodDuration = _vestingPeriodDuration;\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner\\n     * to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new\\n     * timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp`\\n     * accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.\\n     *\\n     * @param _timestamp The new TGE unlock timestamp.\\n     */\\n    function setTgeUnlockTimestamp(uint256 _timestamp) external onlyOwner {\\n        require(\\n            _timestamp > block.timestamp,\\n            \\\"Vesting: TGE unlock time cannot be lower than current time\\\"\\n        );\\n        require(\\n            _timestamp <= tgeUnlockTimestampDeadline,\\n            \\\"Vesting: TGE unlock time must be less than tgeUnlockTimestampDeadline\\\"\\n        );\\n        require(\\n            tgeUnlockTimestamp > block.timestamp,\\n            \\\"Vesting: TGE unlock time already passed\\\"\\n        );\\n\\n        cliffTimestamp = _timestamp + (cliffTimestamp - tgeUnlockTimestamp);\\n        tgeUnlockTimestamp = _timestamp;\\n        emit SetTgeUnlockTimestamp(_timestamp);\\n    }\\n\\n    /**\\n     * @dev Sets the vesting token address. This function can only be called by the contract owner. It enforces\\n     * that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken`\\n     * event upon successful update.\\n     *\\n     * @param _token The address of the ERC20 token to be vested.\\n     */\\n    function setVestingToken(address _token) external onlyOwner {\\n        require(_token != address(0), \\\"Vesting: Invalid vesting token\\\");\\n        require(token == address(0), \\\"Vesting: Token already set\\\");\\n        token = _token;\\n    }\\n\\n    /**\\n     * @dev Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific\\n     * amount of tokens. This function can only be called by the contract owner. It validates the input arrays\\n     * for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided\\n     * data. Emits `RegisterBeneficiaries` event upon successful registration.\\n     *\\n     * @param _beneficiaries Array of beneficiary addresses.\\n     * @param _amounts Array of token amounts corresponding to each beneficiary.\\n     */\\n    function registerBeneficiaries(\\n        address[] memory _beneficiaries,\\n        uint256[] memory _amounts\\n    ) external virtual onlyOwner {\\n        require(\\n            _beneficiaries.length == _amounts.length,\\n            \\\"Vesting: Invalid input lengths\\\"\\n        );\\n        // Use in memory _beneficiaries for lenght check\\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\\n            if (_beneficiaries[i] == address(0)) {\\n                revert(\\\"Vesting: Invalid beneficiary\\\");\\n            }\\n            VestingBeneficiary memory beneficiary = vestingBeneficiaries[\\n                _beneficiaries[i]\\n            ];\\n            // Allow owner to reduce the amount of tokens for a beneficiary by registering beneficiary with a lower amount\\n            if (beneficiary.amount == 0) {\\n                vestingBeneficiaries[_beneficiaries[i]] = VestingBeneficiary(\\n                    _amounts[i],\\n                    0\\n                );\\n                beneficiaryKeys.push(_beneficiaries[i]);\\n            }\\n        }\\n        emit RegisterBeneficiaries(_beneficiaries, _amounts);\\n    }\\n\\n    /**\\n     * @dev Returns the claimable balance of tokens for the caller. This function calculates the balance by\\n     * subtracting the already claimed tokens from the total allocated amount for the caller. It can only be\\n     * called by a beneficiary of the vesting contract.\\n     *\\n     * @return The amount of tokens that the caller can claim.\\n     */\\n    function claimBalance()\\n        public\\n        view\\n        virtual\\n        onlyBeneficiary(_msgSender())\\n        returns (uint256)\\n    {\\n        return\\n            vestingBeneficiaries[_msgSender()].amount -\\n            vestingBeneficiaries[_msgSender()].claimed;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens already claimed by the caller. This function is accessible only to\\n     * beneficiaries of the contract and provides an easy way to track the amount of tokens they have already\\n     * withdrawn from their allocated amount.\\n     *\\n     * @return The amount of tokens already claimed by the caller.\\n     */\\n    function claimedAllocation()\\n        public\\n        view\\n        virtual\\n        onlyBeneficiary(_msgSender())\\n        returns (uint256)\\n    {\\n        return vestingBeneficiaries[_msgSender()].claimed;\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that a beneficiary is eligible to claim at the current time.\\n     * This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute\\n     * the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates\\n     * the tokens available based on the vesting schedule otherwise.\\n     *\\n     * @return The amount of tokens the beneficiary is currently eligible to claim.\\n     */\\n    function enableForRelease()\\n        public\\n        view\\n        onlyBeneficiary(_msgSender())\\n        returns (uint256)\\n    {\\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\\n            _msgSender()\\n        ];\\n        uint256 totalTokens = beneficiary.amount;\\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\\n            UNLOCK_PERCENT_DIVIDER\\n        );\\n        if (\\n            block.timestamp >= tgeUnlockTimestamp &&\\n            block.timestamp < cliffTimestamp\\n        ) {\\n            return claimableTgaTokens.sub(beneficiary.claimed);\\n        } else if (block.timestamp >= cliffTimestamp) {\\n            uint256 vestingCircles = block.timestamp.sub(cliffTimestamp).div(\\n                vestingPeriodDuration\\n            );\\n            uint256 percentFromVesting = vestingUnlockPercentPerPeriod.add(\\n                vestingCircles.mul(vestingUnlockPercentPerPeriod)\\n            );\\n\\n            uint256 vestingTokens = totalTokens.mul(percentFromVesting).div(\\n                UNLOCK_PERCENT_DIVIDER\\n            );\\n            uint256 totalLinearTokens = claimableTgaTokens.add(vestingTokens);\\n            if (totalLinearTokens > totalTokens) {\\n                totalLinearTokens = totalTokens;\\n            }\\n            return totalLinearTokens.sub(beneficiary.claimed);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function nextReleaseTimestamp() public view returns (uint256) {\\n        if (block.timestamp < tgeUnlockTimestamp) {\\n            return tgeUnlockTimestamp;\\n        } else if (block.timestamp < cliffTimestamp) {\\n            return cliffTimestamp;\\n        } else {\\n            uint256 vestingCircle = 1;\\n            vestingCircle += block.timestamp.sub(cliffTimestamp).div(\\n                vestingPeriodDuration\\n            );\\n            return cliffTimestamp.add(vestingCircle.mul(vestingPeriodDuration));\\n        }\\n    }\\n\\n    function nextReleaseAllocation()\\n        public\\n        view\\n        onlyBeneficiary(_msgSender())\\n        returns (uint256)\\n    {\\n        VestingBeneficiary memory beneficiary = vestingBeneficiaries[\\n            _msgSender()\\n        ];\\n        uint256 totalTokens = beneficiary.amount;\\n        uint256 claimableTgaTokens = totalTokens.mul(tgeUnlockPercent).div(\\n            UNLOCK_PERCENT_DIVIDER\\n        );\\n        if (block.timestamp < tgeUnlockTimestamp) {\\n            return claimableTgaTokens;\\n        } else {\\n            uint256 vestingCircle = 1;\\n            if (block.timestamp > cliffTimestamp)\\n                vestingCircle += block.timestamp.sub(cliffTimestamp).div(\\n                    vestingPeriodDuration\\n                );\\n\\n            uint256 vestingTokens = totalTokens\\n                .mul(vestingUnlockPercentPerPeriod)\\n                .div(UNLOCK_PERCENT_DIVIDER);\\n\\n            if (\\n                vestingCircle.mul(vestingTokens) >=\\n                totalTokens - claimableTgaTokens\\n            ) {\\n                return 0;\\n            }\\n\\n            return vestingTokens;\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows a beneficiary to claim their vested tokens. This function checks if the current time is past\\n     * the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the\\n     * `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon\\n     * successful transfer of tokens.\\n     */\\n    function claim() external virtual onlyBeneficiary(_msgSender()) {\\n        require(\\n            block.timestamp >= tgeUnlockTimestamp,\\n            \\\"Vesting: Not yet unlocked\\\"\\n        );\\n        uint256 tokensEnableForRelease = enableForRelease();\\n        require(tokensEnableForRelease > 0, \\\"Vesting: No tokens to release\\\");\\n\\n        vestingBeneficiaries[_msgSender()].claimed += tokensEnableForRelease;\\n        SafeERC20.safeTransfer(\\n            IERC20(token),\\n            _msgSender(),\\n            tokensEnableForRelease\\n        );\\n        emit Claim(_msgSender(), tokensEnableForRelease);\\n    }\\n\\n    function emergencyVestingTokenWithdraw() external onlyOwner {\\n        uint256 _amount = IERC20(token).balanceOf(address(this));\\n        SafeERC20.safeTransfer(IERC20(token), _msgSender(), _amount);\\n        emit EmergencyWithdraw(_amount);\\n    }\\n\\n    function getBeneficiaries()\\n        external\\n        view\\n        onlyOwner\\n        returns (VestingBeneficiary[] memory)\\n    {\\n        uint256 length = beneficiaryKeys.length;\\n\\n        VestingBeneficiary[] memory beneficiaries = new VestingBeneficiary[](\\n            length\\n        );\\n\\n        // Iterate over the array of keys and populate the arrays\\n        for (uint256 i = 0; i < length; i++) {\\n            address beneficiary = beneficiaryKeys[i];\\n            beneficiaries[i] = vestingBeneficiaries[beneficiary];\\n        }\\n\\n        return beneficiaries;\\n    }\\n}\\n\",\"keccak256\":\"0x26f89c4b363e6d88d84e0e9b27a8c6a7a05bd01fc1e5cbfdd7d926f0a780522e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636ac345e9116100ad578063a14f993511610071578063a14f99351461025c578063e07edfdc1461026f578063e2936b9414610278578063f2fde38b14610280578063fc0c546a1461029357600080fd5b80636ac345e9146101cc578063715018a6146101f35780638da5cb5b146101fb578063913b722c146102205780639b57002f1461023557600080fd5b80632f8e7071116100f45780632f8e70711461019857806330509bca146101a1578063497b46a2146101a95780634b862646146101b15780634e71d92d146101c457600080fd5b80630640d9411461013157806310451f301461016b57806310a70a4d146101735780631827ab571461017d5780631dbc04ae14610185575b600080fd5b6101587f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101586102a6565b61017b6102f8565b005b6101586103bf565b61017b61019336600461136b565b610468565b61015860045481565b610158610541565b610158610590565b61017b6101bf366004611460565b610742565b61017b6109aa565b6101587f000000000000000000000000000000000000000000000000000000000000000081565b61017b610af7565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610162565b610228610b0b565b6040516101629190611520565b6101587f000000000000000000000000000000000000000000000000000000000000000081565b61017b61026a36600461156f565b610c08565b61015860055481565b610158610ddc565b61017b61028e36600461136b565b610f37565b600154610208906001600160a01b031681565b336000818152600260205260408120549091906102de5760405162461bcd60e51b81526004016102d590611588565b60405180910390fd5b3360009081526002602052604090206001015491505b5090565b610300610fb0565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d91906115d1565b600154909150610388906001600160a01b0316335b8361100a565b6040518181527f99d7f8b71cfb9126984f7a5eed3a40e64a8959e9b0e442221546fb04ec6a489c906020015b60405180910390a150565b60006004544210156103d2575060045490565b6005544210156103e3575060055490565b600554600190610420907f00000000000000000000000000000000000000000000000000000000000000009061041a904290611061565b90611076565b61042a9082611600565b9050610462610459827f0000000000000000000000000000000000000000000000000000000000000000611082565b6005549061108e565b91505090565b610470610fb0565b6001600160a01b0381166104c65760405162461bcd60e51b815260206004820152601e60248201527f56657374696e673a20496e76616c69642076657374696e6720746f6b656e000060448201526064016102d5565b6001546001600160a01b03161561051f5760405162461bcd60e51b815260206004820152601a60248201527f56657374696e673a20546f6b656e20616c72656164792073657400000000000060448201526064016102d5565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b336000818152600260205260408120549091906105705760405162461bcd60e51b81526004016102d590611588565b336000908152600260205260409020600181015490546104629190611613565b336000818152600260205260408120549091906105bf5760405162461bcd60e51b81526004016102d590611588565b33600090815260026020908152604080832081518083019092528054808352600190910154928201929092529161061c61271061041a847f0000000000000000000000000000000000000000000000000000000000000000611082565b90506004544210158015610631575060055442105b1561064f576020830151610646908290611061565b94505050505090565b60055442106107375760006106937f000000000000000000000000000000000000000000000000000000000000000061041a6005544261106190919063ffffffff16565b905060006106eb6106c4837f0000000000000000000000000000000000000000000000000000000000000000611082565b7f00000000000000000000000000000000000000000000000000000000000000009061108e565b905060006106ff61271061041a8785611082565b9050600061070d858361108e565b90508581111561071a5750845b602087015161072a908290611061565b9850505050505050505090565b600094505050505090565b61074a610fb0565b805182511461079b5760405162461bcd60e51b815260206004820152601e60248201527f56657374696e673a20496e76616c696420696e707574206c656e67746873000060448201526064016102d5565b60005b825181101561096c5760006001600160a01b03168382815181106107c4576107c4611626565b60200260200101516001600160a01b0316036108225760405162461bcd60e51b815260206004820152601c60248201527f56657374696e673a20496e76616c69642062656e65666963696172790000000060448201526064016102d5565b60006002600085848151811061083a5761083a611626565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905080600001516000036109635760405180604001604052808484815181106108ac576108ac611626565b602002602001015181526020016000815250600260008685815181106108d4576108d4611626565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155905050600384838151811061092757610927611626565b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b5060010161079e565b507fbc95e14b18247180755fe0279809720d311528505fa5c6a0c49f3d294ba9bbe2828260405161099e92919061163c565b60405180910390a15050565b336000818152600260205260409020546109d65760405162461bcd60e51b81526004016102d590611588565b600454421015610a285760405162461bcd60e51b815260206004820152601960248201527f56657374696e673a204e6f742079657420756e6c6f636b65640000000000000060448201526064016102d5565b6000610a32610590565b905060008111610a845760405162461bcd60e51b815260206004820152601d60248201527f56657374696e673a204e6f20746f6b656e7320746f2072656c6561736500000060448201526064016102d5565b3360009081526002602052604081206001018054839290610aa6908490611600565b9091555050600154610ac1906001600160a01b031633610382565b60408051338152602081018390527f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4910161099e565b610aff610fb0565b610b09600061109a565b565b6060610b15610fb0565b60035460008167ffffffffffffffff811115610b3357610b33611386565b604051908082528060200260200182016040528015610b7857816020015b6040805180820190915260008082526020820152815260200190600190039081610b515790505b50905060005b82811015610c0157600060038281548110610b9b57610b9b611626565b60009182526020808320909101546001600160a01b03168083526002825260409283902083518085019094528054845260010154918301919091528451909250849084908110610bed57610bed611626565b602090810291909101015250600101610b7e565b5091505090565b610c10610fb0565b428111610c855760405162461bcd60e51b815260206004820152603a60248201527f56657374696e673a2054474520756e6c6f636b2074696d652063616e6e6f742060448201527f6265206c6f776572207468616e2063757272656e742074696d6500000000000060648201526084016102d5565b7f0000000000000000000000000000000000000000000000000000000000000000811115610d295760405162461bcd60e51b815260206004820152604560248201527f56657374696e673a2054474520756e6c6f636b2074696d65206d75737420626560448201527f206c657373207468616e20746765556e6c6f636b54696d657374616d70446561606482015264646c696e6560d81b608482015260a4016102d5565b4260045411610d8a5760405162461bcd60e51b815260206004820152602760248201527f56657374696e673a2054474520756e6c6f636b2074696d6520616c7265616479604482015266081c185cdcd95960ca1b60648201526084016102d5565b600454600554610d9a9190611613565b610da49082611600565b60055560048190556040518181527fa384b6c5c660c6d2561a025b578ca5fe51178019841db50c219ea8baa32a6607906020016103b4565b33600081815260026020526040812054909190610e0b5760405162461bcd60e51b81526004016102d590611588565b336000908152600260209081526040808320815180830190925280548083526001909101549282019290925291610e6861271061041a847f0000000000000000000000000000000000000000000000000000000000000000611082565b9050600454421015610e7e5793506102f4915050565b600554600190421115610ed157610ec47f000000000000000000000000000000000000000000000000000000000000000061041a6005544261106190919063ffffffff16565b610ece9082611600565b90505b6000610f0361271061041a867f0000000000000000000000000000000000000000000000000000000000000000611082565b9050610f0f8385611613565b610f198383611082565b10610f2b576000965050505050505090565b95506102f49350505050565b610f3f610fb0565b6001600160a01b038116610fa45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d5565b610fad8161109a565b50565b6000546001600160a01b03163314610b095760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d5565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261105c9084906110ea565b505050565b600061106d8284611613565b90505b92915050565b600061106d82846116c0565b600061106d82846116e2565b600061106d8284611600565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061113f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111bf9092919063ffffffff16565b905080516000148061116057508080602001905181019061116091906116f9565b61105c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102d5565b60606111ce84846000856111d6565b949350505050565b6060824710156112375760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102d5565b600080866001600160a01b031685876040516112539190611746565b60006040518083038185875af1925050503d8060008114611290576040519150601f19603f3d011682016040523d82523d6000602084013e611295565b606091505b50915091506112a6878383876112b1565b979650505050505050565b60608315611320578251600003611319576001600160a01b0385163b6113195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d5565b50816111ce565b6111ce83838151156113355781518083602001fd5b8060405162461bcd60e51b81526004016102d59190611762565b80356001600160a01b038116811461136657600080fd5b919050565b60006020828403121561137d57600080fd5b61106d8261134f565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156113c5576113c5611386565b604052919050565b600067ffffffffffffffff8211156113e7576113e7611386565b5060051b60200190565b600082601f83011261140257600080fd5b81356020611417611412836113cd565b61139c565b8083825260208201915060208460051b87010193508684111561143957600080fd5b602086015b84811015611455578035835291830191830161143e565b509695505050505050565b6000806040838503121561147357600080fd5b823567ffffffffffffffff8082111561148b57600080fd5b818501915085601f83011261149f57600080fd5b813560206114af611412836113cd565b82815260059290921b840181019181810190898411156114ce57600080fd5b948201945b838610156114f3576114e48661134f565b825294820194908201906114d3565b9650508601359250508082111561150957600080fd5b50611516858286016113f1565b9150509250929050565b602080825282518282018190526000919060409081850190868401855b828110156115625781518051855286015186850152928401929085019060010161153d565b5091979650505050505050565b60006020828403121561158157600080fd5b5035919050565b60208082526029908201527f4d50524f56657374696e673a204163636f756e74206973206e6f7420612062656040820152686e656669636961727960b81b606082015260800190565b6000602082840312156115e357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611070576110706115ea565b81810381811115611070576110706115ea565b634e487b7160e01b600052603260045260246000fd5b604080825283519082018190526000906020906060840190828701845b8281101561167e5781516001600160a01b031684529284019290840190600101611659565b5050508381038285015284518082528583019183019060005b818110156116b357835183529284019291840191600101611697565b5090979650505050505050565b6000826116dd57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417611070576110706115ea565b60006020828403121561170b57600080fd5b8151801515811461171b57600080fd5b9392505050565b60005b8381101561173d578181015183820152602001611725565b50506000910152565b60008251611758818460208701611722565b9190910192915050565b6020815260008251806020840152611781816040850160208701611722565b601f01601f1916919091016040019291505056fea26469706673582212209d31376243dffcf73bfb7ba05c8b890011ab5363d04c824b0af30b87c4a7c0ea64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim()": {
        "details": "Allows a beneficiary to claim their vested tokens. This function checks if the current time is past the TGE unlock timestamp and if there are tokens available for release. Updates the claimed amount in the `vestingBeneficiaries` mapping and transfers the eligible tokens to the caller. Emits a `Claim` event upon successful transfer of tokens."
      },
      "claimBalance()": {
        "details": "Returns the claimable balance of tokens for the caller. This function calculates the balance by subtracting the already claimed tokens from the total allocated amount for the caller. It can only be called by a beneficiary of the vesting contract.",
        "returns": {
          "_0": "The amount of tokens that the caller can claim."
        }
      },
      "claimedAllocation()": {
        "details": "Returns the amount of tokens already claimed by the caller. This function is accessible only to beneficiaries of the contract and provides an easy way to track the amount of tokens they have already withdrawn from their allocated amount.",
        "returns": {
          "_0": "The amount of tokens already claimed by the caller."
        }
      },
      "constructor": {
        "details": "Constructor for the MPROVesting contract. Initializes the contract with necessary parameters for token vesting. Sets the token address, Token Generation Event (TGE) unlock timestamp and percent, cliff delay, vesting percent per period, vesting period duration, and the contract owner. The TGE unlock timestamp defines when the initial unlock of tokens occurs, and the TGE unlock percent specifies the percentage of tokens unlocked at TGE. The cliff delay sets a period after TGE during which no tokens are vested. The vesting unlock percent per period and the vesting period duration define the rate and frequency at which tokens are vested after the cliff period. Ownership of the contract is transferred to `_newOwner` to allow management of vesting parameters and beneficiaries.",
        "params": {
          "_cliffDelay": "The delay after TGE during which no tokens are vested.",
          "_newOwner": "The address that will be granted ownership of the contract.",
          "_tgeUnlockPercent": "The percentage of total tokens to be unlocked at TGE.",
          "_tgeUnlockTimestamp": "The timestamp for the initial unlock of tokens (TGE).",
          "_vestingPeriodDuration": "The duration of each vesting period in seconds.",
          "_vestingUnlockPercentPerPeriod": "The percentage of tokens to be vested per vesting period."
        }
      },
      "enableForRelease()": {
        "details": "Calculates the amount of tokens that a beneficiary is eligible to claim at the current time. This function considers the TGE unlock timestamp, the cliff period, and the vesting schedule to compute the claimable amount. It returns zero if the current time is before the TGE unlock timestamp, and calculates the tokens available based on the vesting schedule otherwise.",
        "returns": {
          "_0": "The amount of tokens the beneficiary is currently eligible to claim."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerBeneficiaries(address[],uint256[])": {
        "details": "Registers multiple beneficiaries for vesting. Each beneficiary is associated with a specific amount of tokens. This function can only be called by the contract owner. It validates the input arrays for proper length and non-zero addresses. Updates the `vestingBeneficiaries` mapping with the provided data. Emits `RegisterBeneficiaries` event upon successful registration.",
        "params": {
          "_amounts": "Array of token amounts corresponding to each beneficiary.",
          "_beneficiaries": "Array of beneficiary addresses."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setTgeUnlockTimestamp(uint256)": {
        "details": "Sets the TGE (Token Generation Event) unlock timestamp. This function allows the contract owner to set the timestamp indicating when tokens begin to unlock for beneficiaries. It enforces that the new timestamp is greater than the current time and less than a predefined deadline. Adjusts the `cliffTimestamp` accordingly to maintain the delay period. Emits a `SetTgeUnlockTimestamp` event upon successful update.",
        "params": {
          "_timestamp": "The new TGE unlock timestamp."
        }
      },
      "setVestingToken(address)": {
        "details": "Sets the vesting token address. This function can only be called by the contract owner. It enforces that the token address is non-zero and that the token has not already been set. Emits a `SetVestingToken` event upon successful update.",
        "params": {
          "_token": "The address of the ERC20 token to be vested."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "UNLOCK_PERCENT_DIVIDER": {
        "details": "Constant representing the divider for percentage values. This is used to convert percentage values to their decimal representation. For example, a value of 10000 represents 100%."
      },
      "beneficiaryKeys": {
        "details": "Array of beneficiary addresses."
      },
      "cliffTimestamp": {
        "details": "The timestamp after which tokens begin to vest."
      },
      "tgeUnlockPercent": {
        "details": "The percentage of tokens to be unlocked at TGE (Token Generation Event)."
      },
      "tgeUnlockTimestamp": {
        "details": "The timestamp after which tokens begin to unlock."
      },
      "tgeUnlockTimestampDeadline": {
        "details": "The timestamp deadline after which the TGE unlock timestamp cannot be updated."
      },
      "token": {
        "details": "The ERC20 token address which is being vested in this contract."
      },
      "vestingBeneficiaries": {
        "details": "Mapping of beneficiary addresses to their respective vesting data."
      },
      "vestingPeriodDuration": {
        "details": "The duration of each vesting period in seconds."
      },
      "vestingUnlockPercentPerPeriod": {
        "details": "The percentage of tokens to be unlocked per vesting period."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/tests/MPROVesting.sol:TestVesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1300,
        "contract": "contracts/tests/MPROVesting.sol:TestVesting",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1306,
        "contract": "contracts/tests/MPROVesting.sol:TestVesting",
        "label": "vestingBeneficiaries",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(VestingBeneficiary)1297_storage)"
      },
      {
        "astId": 1310,
        "contract": "contracts/tests/MPROVesting.sol:TestVesting",
        "label": "beneficiaryKeys",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1316,
        "contract": "contracts/tests/MPROVesting.sol:TestVesting",
        "label": "tgeUnlockTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1322,
        "contract": "contracts/tests/MPROVesting.sol:TestVesting",
        "label": "cliffTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(VestingBeneficiary)1297_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestVesting.VestingBeneficiary)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingBeneficiary)1297_storage"
      },
      "t_struct(VestingBeneficiary)1297_storage": {
        "encoding": "inplace",
        "label": "struct TestVesting.VestingBeneficiary",
        "members": [
          {
            "astId": 1294,
            "contract": "contracts/tests/MPROVesting.sol:TestVesting",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1296,
            "contract": "contracts/tests/MPROVesting.sol:TestVesting",
            "label": "claimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}